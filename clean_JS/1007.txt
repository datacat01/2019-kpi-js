
  WebFontConfig = {
    google: { families: [       
      
      	
      	
      	'Montserrat:100,200,300,400,500,600,700,800,900'
      	
      
      	
      	
      	,'Poppins:100,200,300,400,500,600,700,800,900'
      	
      
      	
      	
      	,'Oswald:100,200,300,400,500,600,700,800,900'
      	
      
      	
      	
      	,'Open Sans:100,200,300,400,500,600,700,800,900'
      	
      
      	
      	
      	,'Arial:100,200,300,400,500,600,700,800,900'
      	
      
      
    ] }
  };
  (function() {
    var wf = document.createElement('script');
    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
    wf.type = 'text/javascript';
    wf.async = 'true';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wf, s);
  })(); 

  
  Shopify.doNotTriggerClickOnThumb = false; 

  var selectCallbackQuickview = function(variant, selector) {
    var productItem = jQuery('.quick-view');
      addToCart = productItem.find('.add-to-cart-btn'),
      productPrice = productItem.find('.price'),
      comparePrice = productItem.find('.compare-price'),
      totalPrice = productItem.find('.total-price span');
//       tagsnew = productItem.find('.product-label strong.new'),
//       tagsSale = productItem.find('.product-label strong.sale'),
//       tagsSoldout = productItem.find('.product-label strong.sold-out-label'),
      
//       productItem.find('.new:contains(new)').text('new').show();

    if (variant) {
      if (variant.available) {
        // We have a valid product variant, so enable the submit button
        addToCart.removeClass('disabled').removeAttr('disabled').text(window.inventory_text.add_to_cart);
// 		tagsSoldout.hide();
      } else {
        // Variant is sold out, disable the submit button
        addToCart.val(window.inventory_text.sold_out).addClass('disabled').attr('disabled', 'disabled');
//        tagsSoldout.show();
      }

      // Regardless of stock, update the product price
      productPrice.html(Shopify.formatMoney(variant.price, "<span class=money>${{amount}}</span>"));
                                            
      if ( variant.compare_at_price > variant.price ) {
      comparePrice
      .html(Shopify.formatMoney(variant.compare_at_price, "<span class=money>${{amount}}</span>"))
      .show();
      productPrice.addClass('on-sale');
//       tagsSale.text(window.inventory_text.sale).show();
      
    } else {
      
      comparePrice.hide();
      productPrice.removeClass('on-sale');
//        tagsSale.hide();
    }
    if (variant) {
      $('.variant-sku').text(variant.sku);
      
      if($('.variant-sku').text() === "") {
      	$('.variant-sku').siblings('.variant-sku-title').css('display', 'none');
      }
    }
    
    

    //update variant inventory
    
    var inventoryInfo = productItem.find('.product-inventory span');
//     if (variant.available) {
//       if (variant.inventory_management!=null) {
//         inventoryInfo.text(window.inventory_text.in_stock);
//       } else {
//         inventoryInfo.text(window.inventory_text.many_in_stock);
//       }
//     } else {
//       inventoryInfo.text(window.inventory_text.out_of_stock);
//     }
    

    /*recaculate total price*/
    //try pattern one before pattern 2
    var regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;
    var unitPriceTextMatch = jQuery('.quick-view .price').text().match(regex);

    if (!unitPriceTextMatch) {
      regex = /([0-9]+[.|,][0-9]+)/g;
      unitPriceTextMatch = jQuery('.quick-view .price').text().match(regex);     
    }

    if (unitPriceTextMatch) {
      var unitPriceText = unitPriceTextMatch[0];     
      var unitPrice = unitPriceText.replace(/[.|,]/g,'');
      var quantity = parseInt(jQuery('.quick-view input[name=quantity]').val());
      var totalPrice = unitPrice * quantity;

      var totalPriceText = Shopify.formatMoney(totalPrice, window.money_format);
      regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;     
      if (!totalPriceText.match(regex)) {
        regex = /([0-9]+[.|,][0-9]+)/g;
      } 
      totalPriceText = totalPriceText.match(regex)[0];

      var regInput = new RegExp(unitPriceText, "g"); 
      var totalPriceHtml = jQuery('.quick-view .price').html().replace(regInput ,totalPriceText);
      jQuery('.quick-view .total-price span').html(totalPriceHtml);     
    }
    /*end of price calculation*/


    
        /*begin variant image*/
        if (variant && variant.featured_image) {
            var originalImage = jQuery(".quick-view .quickview-featured-image img");
            var newImage = variant.featured_image;
            var element = originalImage[0];
            Shopify.Image.switchImage(newImage, element, function (newImageSizedSrc, newImage, element) {
              newImageSizedSrc = newImageSizedSrc.replace(/\?(.*)/,"");
              jQuery('.quick-view .more-view-wrapper img').each(function() {
                var grandSize = jQuery(this).attr('src');
                grandSize = grandSize.replace('compact','grande');
               
                if (grandSize == newImageSizedSrc) {
                  jQuery(this).parent().trigger('click');              
                  return false;
                }
              });
            });        
        }
        /*end of variant image*/   

  } else {
    // The variant doesn't exist. Just a safegaurd for errors, but disable the submit button anyway
    addToCart.text(window.inventory_text.unavailable).addClass('disabled').attr('disabled', 'disabled');
  }
  };

