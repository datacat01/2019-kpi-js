define("social.home", ["@ta/common.authz", "@ta/common.cdn", "@ta/common.error-handling", "@ta/common.localstorage", "@ta/common.photo-carousel", "@ta/common.sessionstorage", "@ta/common.text", "@ta/common.typeahead", "@ta/common.webview", "@ta/events.lifecycle", "@ta/input.text-area", "@ta/input.text-input", "@ta/loading.error", "@ta/media.common", "@ta/media.image", "@ta/media.upload", "@ta/overlays.headers", "@ta/overlays.managers", "@ta/overlays.modal", "@ta/overlays.pieces", "@ta/overlays.popover", "@ta/overlays.toast", "@ta/platform.import", "@ta/social.block-button", "@ta/social.blocks", "@ta/social.common-popover", "@ta/social.content-removal", "@ta/social.cover-photo", "@ta/social.dates", "@ta/social.educational-tooltips", "@ta/social.engagement-card", "@ta/social.feed", "@ta/social.feed-filter", "@ta/social.follow", "@ta/social.follow-feed", "@ta/social.link-preview", "@ta/social.links", "@ta/social.login-gate", "@ta/social.member-common", "@ta/social.member-event", "@ta/social.onboarding-state", "@ta/social.place-type", "@ta/social.poi", "@ta/social.repost-action", "@ta/social.review-info", "@ta/social.scroll", "@ta/social.section-overflow", "@ta/social.show-more", "@ta/social.skeletons", "@ta/social.social-reference", "@ta/social.suggested-followees", "@ta/social.tabs", "@ta/social.ugc-actions", "@ta/styleguide.avatar", "@ta/styleguide.button", "@ta/styleguide.icon", "@ta/styleguide.loading", "@ta/tracking.interactions", "common/Radio", "@ta/common.global"], function(e, t, n, a, i, o, r, s, l, c, d, u, m, p, v, b, f, k, g, h, _, j, S, y, N, O, E, I, C, F, T, w, x, P, L, A, R, M, D, z, B, V, U, W, H, q, G, K, Q, Y, X, J, Z, $, ee, te, ne, ae, ie, oe) {
    return function(e) {
        var t = {};

        function n(a) {
            if (t[a]) return t[a].exports;
            var i = t[a] = {
                i: a,
                l: !1,
                exports: {}
            };
            return e[a].call(i.exports, i, i.exports, n), i.l = !0, i.exports
        }
        return n.m = e, n.c = t, n.d = function(e, t, a) {
            n.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: a
            })
        }, n.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            })
        }, n.t = function(e, t) {
            if (1 & t && (e = n(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var a = Object.create(null);
            if (n.r(a), Object.defineProperty(a, "default", {
                    enumerable: !0,
                    value: e
                }), 2 & t && "string" != typeof e)
                for (var i in e) n.d(a, i, function(t) {
                    return e[t]
                }.bind(null, i));
            return a
        }, n.n = function(e) {
            var t = e && e.__esModule ? function t() {
                return e.default
            } : function t() {
                return e
            };
            return n.d(t, "a", t), t
        }, n.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }, n.p = "", n(n.s = "./roots/social/home/Home.jsx")
    }({
        "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js": function(e, t, n) {
            "use strict";

            function a(e) {
                if (Array.isArray(e)) return e
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js": function(e, t, n) {
            "use strict";

            function a(e) {
                if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return e
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js": function(e, t, n) {
            "use strict";

            function a(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/createClass.js": function(e, t, n) {
            "use strict";

            function a(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var a = t[n];
                    a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
                }
            }

            function i(e, t, n) {
                return t && a(e.prototype, t), n && a(e, n), e
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/defineProperty.js": function(e, t, n) {
            "use strict";

            function a(e, t, n) {
                return t in e ? Object.defineProperty(e, t, {
                    value: n,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = n, e
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/extends.js": function(e, t, n) {
            "use strict";

            function a() {
                return (a = Object.assign || function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                }).apply(this, arguments)
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js": function(e, t, n) {
            "use strict";

            function a(e) {
                return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
                    return t.__proto__ || Object.getPrototypeOf(t)
                })(e)
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/inherits.js": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

            function i(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        writable: !0,
                        configurable: !0
                    }
                }), t && Object(a.a)(e, t)
            }
        },
        "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js": function(e, t, n) {
            "use strict";

            function a(e) {
                if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e)
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js": function(e, t, n) {
            "use strict";

            function a() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance")
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/objectSpread.js": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js");

            function i(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var n = null != arguments[t] ? arguments[t] : {},
                        i = Object.keys(n);
                    "function" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter(function(e) {
                        return Object.getOwnPropertyDescriptor(n, e).enumerable
                    }))), i.forEach(function(t) {
                        Object(a.a)(e, t, n[t])
                    })
                }
                return e
            }
        },
        "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js": function(e, t, n) {
            "use strict";

            function a(e, t) {
                if (null == e) return {};
                var n, a, i = function o(e, t) {
                    if (null == e) return {};
                    var n, a, i = {},
                        o = Object.keys(e);
                    for (a = 0; a < o.length; a++) n = o[a], t.indexOf(n) >= 0 || (i[n] = e[n]);
                    return i
                }(e, t);
                if (Object.getOwnPropertySymbols) {
                    var r = Object.getOwnPropertySymbols(e);
                    for (a = 0; a < r.length; a++) n = r[a], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (i[n] = e[n])
                }
                return i
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/typeof.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");

            function o(e, t) {
                return !t || "object" !== Object(a.a)(t) && "function" != typeof t ? Object(i.a)(e) : t
            }
        },
        "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js": function(e, t, n) {
            "use strict";

            function a(e, t) {
                return (a = Object.setPrototypeOf || function e(t, n) {
                    return t.__proto__ = n, t
                })(e, t)
            }
            n.d(t, "a", function() {
                return a
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js");

            function o(e, t) {
                return Object(a.a)(e) || function n(e, t) {
                    var n = [],
                        a = !0,
                        i = !1,
                        o = void 0;
                    try {
                        for (var r, s = e[Symbol.iterator](); !(a = (r = s.next()).done) && (n.push(r.value), !t || n.length !== t); a = !0);
                    } catch (e) {
                        i = !0, o = e
                    } finally {
                        try {
                            a || null == s.return || s.return()
                        } finally {
                            if (i) throw o
                        }
                    }
                    return n
                }(e, t) || Object(i.a)()
            }
            n.d(t, "a", function() {
                return o
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/iterableToArray.js");

            function i(e) {
                return function t(e) {
                    if (Array.isArray(e)) {
                        for (var t = 0, n = new Array(e.length); t < e.length; t++) n[t] = e[t];
                        return n
                    }
                }(e) || Object(a.a)(e) || function n() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance")
                }()
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "./node_modules/@babel/runtime/helpers/esm/typeof.js": function(e, t, n) {
            "use strict";

            function a(e) {
                return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function e(t) {
                    return typeof t
                } : function e(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(e)
            }

            function i(e) {
                return (i = "function" == typeof Symbol && "symbol" === a(Symbol.iterator) ? function e(t) {
                    return a(t)
                } : function e(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : a(t)
                })(e)
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "./node_modules/fast-deep-equal/index.js": function(e, t, n) {
            "use strict";
            var a = Array.isArray,
                i = Object.keys,
                o = Object.prototype.hasOwnProperty;
            e.exports = function e(t, n) {
                if (t === n) return !0;
                if (t && n && "object" == typeof t && "object" == typeof n) {
                    var r, s, l, c = a(t),
                        d = a(n);
                    if (c && d) {
                        if ((s = t.length) != n.length) return !1;
                        for (r = s; 0 != r--;)
                            if (!e(t[r], n[r])) return !1;
                        return !0
                    }
                    if (c != d) return !1;
                    var u = t instanceof Date,
                        m = n instanceof Date;
                    if (u != m) return !1;
                    if (u && m) return t.getTime() == n.getTime();
                    var p = t instanceof RegExp,
                        v = n instanceof RegExp;
                    if (p != v) return !1;
                    if (p && v) return t.toString() == n.toString();
                    var b = i(t);
                    if ((s = b.length) !== i(n).length) return !1;
                    for (r = s; 0 != r--;)
                        if (!o.call(n, b[r])) return !1;
                    for (r = s; 0 != r--;)
                        if (!e(t[l = b[r]], n[l])) return !1;
                    return !0
                }
                return t != t && n != n
            }
        },
        "./node_modules/lodash/_DataView.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"), "DataView");
            e.exports = a
        },
        "./node_modules/lodash/_Hash.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_hashClear.js"),
                i = n("./node_modules/lodash/_hashDelete.js"),
                o = n("./node_modules/lodash/_hashGet.js"),
                r = n("./node_modules/lodash/_hashHas.js"),
                s = n("./node_modules/lodash/_hashSet.js");

            function l(e) {
                var t = -1,
                    n = null == e ? 0 : e.length;
                for (this.clear(); ++t < n;) {
                    var a = e[t];
                    this.set(a[0], a[1])
                }
            }
            l.prototype.clear = a, l.prototype.delete = i, l.prototype.get = o, l.prototype.has = r, l.prototype.set = s, e.exports = l
        },
        "./node_modules/lodash/_ListCache.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_listCacheClear.js"),
                i = n("./node_modules/lodash/_listCacheDelete.js"),
                o = n("./node_modules/lodash/_listCacheGet.js"),
                r = n("./node_modules/lodash/_listCacheHas.js"),
                s = n("./node_modules/lodash/_listCacheSet.js");

            function l(e) {
                var t = -1,
                    n = null == e ? 0 : e.length;
                for (this.clear(); ++t < n;) {
                    var a = e[t];
                    this.set(a[0], a[1])
                }
            }
            l.prototype.clear = a, l.prototype.delete = i, l.prototype.get = o, l.prototype.has = r, l.prototype.set = s, e.exports = l
        },
        "./node_modules/lodash/_Map.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"), "Map");
            e.exports = a
        },
        "./node_modules/lodash/_MapCache.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_mapCacheClear.js"),
                i = n("./node_modules/lodash/_mapCacheDelete.js"),
                o = n("./node_modules/lodash/_mapCacheGet.js"),
                r = n("./node_modules/lodash/_mapCacheHas.js"),
                s = n("./node_modules/lodash/_mapCacheSet.js");

            function l(e) {
                var t = -1,
                    n = null == e ? 0 : e.length;
                for (this.clear(); ++t < n;) {
                    var a = e[t];
                    this.set(a[0], a[1])
                }
            }
            l.prototype.clear = a, l.prototype.delete = i, l.prototype.get = o, l.prototype.has = r, l.prototype.set = s, e.exports = l
        },
        "./node_modules/lodash/_Promise.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"), "Promise");
            e.exports = a
        },
        "./node_modules/lodash/_Set.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"), "Set");
            e.exports = a
        },
        "./node_modules/lodash/_Stack.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_ListCache.js"),
                i = n("./node_modules/lodash/_stackClear.js"),
                o = n("./node_modules/lodash/_stackDelete.js"),
                r = n("./node_modules/lodash/_stackGet.js"),
                s = n("./node_modules/lodash/_stackHas.js"),
                l = n("./node_modules/lodash/_stackSet.js");

            function c(e) {
                var t = this.__data__ = new a(e);
                this.size = t.size
            }
            c.prototype.clear = i, c.prototype.delete = o, c.prototype.get = r, c.prototype.has = s, c.prototype.set = l, e.exports = c
        },
        "./node_modules/lodash/_Symbol.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_root.js").Symbol;
            e.exports = a
        },
        "./node_modules/lodash/_Uint8Array.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_root.js").Uint8Array;
            e.exports = a
        },
        "./node_modules/lodash/_WeakMap.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(n("./node_modules/lodash/_root.js"), "WeakMap");
            e.exports = a
        },
        "./node_modules/lodash/_apply.js": function(e, t) {
            e.exports = function n(e, t, a) {
                switch (a.length) {
                    case 0:
                        return e.call(t);
                    case 1:
                        return e.call(t, a[0]);
                    case 2:
                        return e.call(t, a[0], a[1]);
                    case 3:
                        return e.call(t, a[0], a[1], a[2])
                }
                return e.apply(t, a)
            }
        },
        "./node_modules/lodash/_arrayEach.js": function(e, t) {
            e.exports = function n(e, t) {
                for (var n = -1, a = null == e ? 0 : e.length; ++n < a && !1 !== t(e[n], n, e););
                return e
            }
        },
        "./node_modules/lodash/_arrayFilter.js": function(e, t) {
            e.exports = function n(e, t) {
                for (var n = -1, a = null == e ? 0 : e.length, i = 0, o = []; ++n < a;) {
                    var r = e[n];
                    t(r, n, e) && (o[i++] = r)
                }
                return o
            }
        },
        "./node_modules/lodash/_arrayLikeKeys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseTimes.js"),
                i = n("./node_modules/lodash/isArguments.js"),
                o = n("./node_modules/lodash/isArray.js"),
                r = n("./node_modules/lodash/isBuffer.js"),
                s = n("./node_modules/lodash/_isIndex.js"),
                l = n("./node_modules/lodash/isTypedArray.js"),
                c = Object.prototype.hasOwnProperty;
            e.exports = function d(e, t) {
                var n = o(e),
                    d = !n && i(e),
                    u = !n && !d && r(e),
                    m = !n && !d && !u && l(e),
                    p = n || d || u || m,
                    v = p ? a(e.length, String) : [],
                    b = v.length;
                for (var f in e) !t && !c.call(e, f) || p && ("length" == f || u && ("offset" == f || "parent" == f) || m && ("buffer" == f || "byteLength" == f || "byteOffset" == f) || s(f, b)) || v.push(f);
                return v
            }
        },
        "./node_modules/lodash/_arrayMap.js": function(e, t) {
            e.exports = function n(e, t) {
                for (var n = -1, a = null == e ? 0 : e.length, i = Array(a); ++n < a;) i[n] = t(e[n], n, e);
                return i
            }
        },
        "./node_modules/lodash/_arrayPush.js": function(e, t) {
            e.exports = function n(e, t) {
                for (var n = -1, a = t.length, i = e.length; ++n < a;) e[i + n] = t[n];
                return e
            }
        },
        "./node_modules/lodash/_assignValue.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseAssignValue.js"),
                i = n("./node_modules/lodash/eq.js"),
                o = Object.prototype.hasOwnProperty;
            e.exports = function r(e, t, n) {
                var r = e[t];
                o.call(e, t) && i(r, n) && (void 0 !== n || t in e) || a(e, t, n)
            }
        },
        "./node_modules/lodash/_assocIndexOf.js": function(e, t, n) {
            var a = n("./node_modules/lodash/eq.js");
            e.exports = function i(e, t) {
                for (var n = e.length; n--;)
                    if (a(e[n][0], t)) return n;
                return -1
            }
        },
        "./node_modules/lodash/_baseAssign.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_copyObject.js"),
                i = n("./node_modules/lodash/keys.js");
            e.exports = function o(e, t) {
                return e && a(t, i(t), e)
            }
        },
        "./node_modules/lodash/_baseAssignIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_copyObject.js"),
                i = n("./node_modules/lodash/keysIn.js");
            e.exports = function o(e, t) {
                return e && a(t, i(t), e)
            }
        },
        "./node_modules/lodash/_baseAssignValue.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_defineProperty.js");
            e.exports = function i(e, t, n) {
                "__proto__" == t && a ? a(e, t, {
                    configurable: !0,
                    enumerable: !0,
                    value: n,
                    writable: !0
                }) : e[t] = n
            }
        },
        "./node_modules/lodash/_baseClone.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Stack.js"),
                i = n("./node_modules/lodash/_arrayEach.js"),
                o = n("./node_modules/lodash/_assignValue.js"),
                r = n("./node_modules/lodash/_baseAssign.js"),
                s = n("./node_modules/lodash/_baseAssignIn.js"),
                l = n("./node_modules/lodash/_cloneBuffer.js"),
                c = n("./node_modules/lodash/_copyArray.js"),
                d = n("./node_modules/lodash/_copySymbols.js"),
                u = n("./node_modules/lodash/_copySymbolsIn.js"),
                m = n("./node_modules/lodash/_getAllKeys.js"),
                p = n("./node_modules/lodash/_getAllKeysIn.js"),
                v = n("./node_modules/lodash/_getTag.js"),
                b = n("./node_modules/lodash/_initCloneArray.js"),
                f = n("./node_modules/lodash/_initCloneByTag.js"),
                k = n("./node_modules/lodash/_initCloneObject.js"),
                g = n("./node_modules/lodash/isArray.js"),
                h = n("./node_modules/lodash/isBuffer.js"),
                _ = n("./node_modules/lodash/isMap.js"),
                j = n("./node_modules/lodash/isObject.js"),
                S = n("./node_modules/lodash/isSet.js"),
                y = n("./node_modules/lodash/keys.js"),
                N = {};
            N["[object Arguments]"] = N["[object Array]"] = N["[object ArrayBuffer]"] = N["[object DataView]"] = N["[object Boolean]"] = N["[object Date]"] = N["[object Float32Array]"] = N["[object Float64Array]"] = N["[object Int8Array]"] = N["[object Int16Array]"] = N["[object Int32Array]"] = N["[object Map]"] = N["[object Number]"] = N["[object Object]"] = N["[object RegExp]"] = N["[object Set]"] = N["[object String]"] = N["[object Symbol]"] = N["[object Uint8Array]"] = N["[object Uint8ClampedArray]"] = N["[object Uint16Array]"] = N["[object Uint32Array]"] = !0, N["[object Error]"] = N["[object Function]"] = N["[object WeakMap]"] = !1, e.exports = function e(t, n, O, E, I, C) {
                var F, T = 1 & n,
                    w = 2 & n,
                    x = 4 & n;
                if (O && (F = I ? O(t, E, I, C) : O(t)), void 0 !== F) return F;
                if (!j(t)) return t;
                var P = g(t);
                if (P) {
                    if (F = b(t), !T) return c(t, F)
                } else {
                    var L = v(t),
                        A = "[object Function]" == L || "[object GeneratorFunction]" == L;
                    if (h(t)) return l(t, T);
                    if ("[object Object]" == L || "[object Arguments]" == L || A && !I) {
                        if (F = w || A ? {} : k(t), !T) return w ? u(t, s(F, t)) : d(t, r(F, t))
                    } else {
                        if (!N[L]) return I ? t : {};
                        F = f(t, L, T)
                    }
                }
                C || (C = new a);
                var R = C.get(t);
                if (R) return R;
                if (C.set(t, F), S(t)) return t.forEach(function(a) {
                    F.add(e(a, n, O, a, t, C))
                }), F;
                if (_(t)) return t.forEach(function(a, i) {
                    F.set(i, e(a, n, O, i, t, C))
                }), F;
                var M = x ? w ? p : m : w ? keysIn : y,
                    D = P ? void 0 : M(t);
                return i(D || t, function(a, i) {
                    D && (a = t[i = a]), o(F, i, e(a, n, O, i, t, C))
                }), F
            }
        },
        "./node_modules/lodash/_baseCreate.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isObject.js"),
                i = Object.create,
                o = function() {
                    function e() {}
                    return function(t) {
                        if (!a(t)) return {};
                        if (i) return i(t);
                        e.prototype = t;
                        var n = new e;
                        return e.prototype = void 0, n
                    }
                }();
            e.exports = o
        },
        "./node_modules/lodash/_baseFlatten.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayPush.js"),
                i = n("./node_modules/lodash/_isFlattenable.js");
            e.exports = function e(t, n, o, r, s) {
                var l = -1,
                    c = t.length;
                for (o || (o = i), s || (s = []); ++l < c;) {
                    var d = t[l];
                    n > 0 && o(d) ? n > 1 ? e(d, n - 1, o, r, s) : a(s, d) : r || (s[s.length] = d)
                }
                return s
            }
        },
        "./node_modules/lodash/_baseGet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_castPath.js"),
                i = n("./node_modules/lodash/_toKey.js");
            e.exports = function o(e, t) {
                for (var n = 0, o = (t = a(t, e)).length; null != e && n < o;) e = e[i(t[n++])];
                return n && n == o ? e : void 0
            }
        },
        "./node_modules/lodash/_baseGetAllKeys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayPush.js"),
                i = n("./node_modules/lodash/isArray.js");
            e.exports = function o(e, t, n) {
                var o = t(e);
                return i(e) ? o : a(o, n(e))
            }
        },
        "./node_modules/lodash/_baseGetTag.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Symbol.js"),
                i = n("./node_modules/lodash/_getRawTag.js"),
                o = n("./node_modules/lodash/_objectToString.js"),
                r = a ? a.toStringTag : void 0;
            e.exports = function s(e) {
                return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : r && r in Object(e) ? i(e) : o(e)
            }
        },
        "./node_modules/lodash/_baseIsArguments.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetTag.js"),
                i = n("./node_modules/lodash/isObjectLike.js");
            e.exports = function o(e) {
                return i(e) && "[object Arguments]" == a(e)
            }
        },
        "./node_modules/lodash/_baseIsMap.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getTag.js"),
                i = n("./node_modules/lodash/isObjectLike.js");
            e.exports = function o(e) {
                return i(e) && "[object Map]" == a(e)
            }
        },
        "./node_modules/lodash/_baseIsNative.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isFunction.js"),
                i = n("./node_modules/lodash/_isMasked.js"),
                o = n("./node_modules/lodash/isObject.js"),
                r = n("./node_modules/lodash/_toSource.js"),
                s = /^\[object .+?Constructor\]$/,
                l = Function.prototype,
                c = Object.prototype,
                d = l.toString,
                u = c.hasOwnProperty,
                m = RegExp("^" + d.call(u).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
            e.exports = function p(e) {
                return !(!o(e) || i(e)) && (a(e) ? m : s).test(r(e))
            }
        },
        "./node_modules/lodash/_baseIsSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getTag.js"),
                i = n("./node_modules/lodash/isObjectLike.js");
            e.exports = function o(e) {
                return i(e) && "[object Set]" == a(e)
            }
        },
        "./node_modules/lodash/_baseIsTypedArray.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetTag.js"),
                i = n("./node_modules/lodash/isLength.js"),
                o = n("./node_modules/lodash/isObjectLike.js"),
                r = {};
            r["[object Float32Array]"] = r["[object Float64Array]"] = r["[object Int8Array]"] = r["[object Int16Array]"] = r["[object Int32Array]"] = r["[object Uint8Array]"] = r["[object Uint8ClampedArray]"] = r["[object Uint16Array]"] = r["[object Uint32Array]"] = !0, r["[object Arguments]"] = r["[object Array]"] = r["[object ArrayBuffer]"] = r["[object Boolean]"] = r["[object DataView]"] = r["[object Date]"] = r["[object Error]"] = r["[object Function]"] = r["[object Map]"] = r["[object Number]"] = r["[object Object]"] = r["[object RegExp]"] = r["[object Set]"] = r["[object String]"] = r["[object WeakMap]"] = !1, e.exports = function s(e) {
                return o(e) && i(e.length) && !!r[a(e)]
            }
        },
        "./node_modules/lodash/_baseKeys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_isPrototype.js"),
                i = n("./node_modules/lodash/_nativeKeys.js"),
                o = Object.prototype.hasOwnProperty;
            e.exports = function r(e) {
                if (!a(e)) return i(e);
                var t = [];
                for (var n in Object(e)) o.call(e, n) && "constructor" != n && t.push(n);
                return t
            }
        },
        "./node_modules/lodash/_baseKeysIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isObject.js"),
                i = n("./node_modules/lodash/_isPrototype.js"),
                o = n("./node_modules/lodash/_nativeKeysIn.js"),
                r = Object.prototype.hasOwnProperty;
            e.exports = function s(e) {
                if (!a(e)) return o(e);
                var t = i(e),
                    n = [];
                for (var s in e)("constructor" != s || !t && r.call(e, s)) && n.push(s);
                return n
            }
        },
        "./node_modules/lodash/_baseSetToString.js": function(e, t, n) {
            var a = n("./node_modules/lodash/constant.js"),
                i = n("./node_modules/lodash/_defineProperty.js"),
                o = n("./node_modules/lodash/identity.js"),
                r = i ? function(e, t) {
                    return i(e, "toString", {
                        configurable: !0,
                        enumerable: !1,
                        value: a(t),
                        writable: !0
                    })
                } : o;
            e.exports = r
        },
        "./node_modules/lodash/_baseSlice.js": function(e, t) {
            e.exports = function n(e, t, a) {
                var i = -1,
                    o = e.length;
                t < 0 && (t = -t > o ? 0 : o + t), (a = a > o ? o : a) < 0 && (a += o), o = t > a ? 0 : a - t >>> 0, t >>>= 0;
                for (var r = Array(o); ++i < o;) r[i] = e[i + t];
                return r
            }
        },
        "./node_modules/lodash/_baseTimes.js": function(e, t) {
            e.exports = function n(e, t) {
                for (var n = -1, a = Array(e); ++n < e;) a[n] = t(n);
                return a
            }
        },
        "./node_modules/lodash/_baseToString.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Symbol.js"),
                i = n("./node_modules/lodash/_arrayMap.js"),
                o = n("./node_modules/lodash/isArray.js"),
                r = n("./node_modules/lodash/isSymbol.js"),
                s = a ? a.prototype : void 0,
                l = s ? s.toString : void 0;
            e.exports = function e(t) {
                if ("string" == typeof t) return t;
                if (o(t)) return i(t, e) + "";
                if (r(t)) return l ? l.call(t) : "";
                var n = t + "";
                return "0" == n && 1 / t == -1 / 0 ? "-0" : n
            }
        },
        "./node_modules/lodash/_baseUnary.js": function(e, t) {
            e.exports = function n(e) {
                return function(t) {
                    return e(t)
                }
            }
        },
        "./node_modules/lodash/_baseUnset.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_castPath.js"),
                i = n("./node_modules/lodash/last.js"),
                o = n("./node_modules/lodash/_parent.js"),
                r = n("./node_modules/lodash/_toKey.js");
            e.exports = function s(e, t) {
                return t = a(t, e), null == (e = o(e, t)) || delete e[r(i(t))]
            }
        },
        "./node_modules/lodash/_castPath.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isArray.js"),
                i = n("./node_modules/lodash/_isKey.js"),
                o = n("./node_modules/lodash/_stringToPath.js"),
                r = n("./node_modules/lodash/toString.js");
            e.exports = function s(e, t) {
                return a(e) ? e : i(e, t) ? [e] : o(r(e))
            }
        },
        "./node_modules/lodash/_cloneArrayBuffer.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Uint8Array.js");
            e.exports = function i(e) {
                var t = new e.constructor(e.byteLength);
                return new a(t).set(new a(e)), t
            }
        },
        "./node_modules/lodash/_cloneBuffer.js": function(e, t, n) {
            (function(e) {
                var a = n("./node_modules/lodash/_root.js"),
                    i = t && !t.nodeType && t,
                    o = i && "object" == typeof e && e && !e.nodeType && e,
                    r = o && o.exports === i ? a.Buffer : void 0,
                    s = r ? r.allocUnsafe : void 0;
                e.exports = function l(e, t) {
                    if (t) return e.slice();
                    var n = e.length,
                        a = s ? s(n) : new e.constructor(n);
                    return e.copy(a), a
                }
            }).call(this, n("./node_modules/webpack/buildin/module.js")(e))
        },
        "./node_modules/lodash/_cloneDataView.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_cloneArrayBuffer.js");
            e.exports = function i(e, t) {
                var n = t ? a(e.buffer) : e.buffer;
                return new e.constructor(n, e.byteOffset, e.byteLength)
            }
        },
        "./node_modules/lodash/_cloneRegExp.js": function(e, t) {
            var n = /\w*$/;
            e.exports = function a(e) {
                var t = new e.constructor(e.source, n.exec(e));
                return t.lastIndex = e.lastIndex, t
            }
        },
        "./node_modules/lodash/_cloneSymbol.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Symbol.js"),
                i = a ? a.prototype : void 0,
                o = i ? i.valueOf : void 0;
            e.exports = function r(e) {
                return o ? Object(o.call(e)) : {}
            }
        },
        "./node_modules/lodash/_cloneTypedArray.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_cloneArrayBuffer.js");
            e.exports = function i(e, t) {
                var n = t ? a(e.buffer) : e.buffer;
                return new e.constructor(n, e.byteOffset, e.length)
            }
        },
        "./node_modules/lodash/_copyArray.js": function(e, t) {
            e.exports = function n(e, t) {
                var n = -1,
                    a = e.length;
                for (t || (t = Array(a)); ++n < a;) t[n] = e[n];
                return t
            }
        },
        "./node_modules/lodash/_copyObject.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_assignValue.js"),
                i = n("./node_modules/lodash/_baseAssignValue.js");
            e.exports = function o(e, t, n, r) {
                var s = !n;
                n || (n = {});
                for (var l = -1, c = t.length; ++l < c;) {
                    var d = t[l],
                        u = r ? r(n[d], e[d], d, n, e) : void 0;
                    void 0 === u && (u = e[d]), s ? i(n, d, u) : a(n, d, u)
                }
                return n
            }
        },
        "./node_modules/lodash/_copySymbols.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_copyObject.js"),
                i = n("./node_modules/lodash/_getSymbols.js");
            e.exports = function o(e, t) {
                return a(e, i(e), t)
            }
        },
        "./node_modules/lodash/_copySymbolsIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_copyObject.js"),
                i = n("./node_modules/lodash/_getSymbolsIn.js");
            e.exports = function o(e, t) {
                return a(e, i(e), t)
            }
        },
        "./node_modules/lodash/_coreJsData.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_root.js")["__core-js_shared__"];
            e.exports = a
        },
        "./node_modules/lodash/_customOmitClone.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isPlainObject.js");
            e.exports = function i(e) {
                return a(e) ? void 0 : e
            }
        },
        "./node_modules/lodash/_defineProperty.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js"),
                i = function() {
                    try {
                        var e = a(Object, "defineProperty");
                        return e({}, "", {}), e
                    } catch (e) {}
                }();
            e.exports = i
        },
        "./node_modules/lodash/_flatRest.js": function(e, t, n) {
            var a = n("./node_modules/lodash/flatten.js"),
                i = n("./node_modules/lodash/_overRest.js"),
                o = n("./node_modules/lodash/_setToString.js");
            e.exports = function r(e) {
                return o(i(e, void 0, a), e + "")
            }
        },
        "./node_modules/lodash/_freeGlobal.js": function(e, t, n) {
            (function(t) {
                var n = "object" == typeof t && t && t.Object === Object && t;
                e.exports = n
            }).call(this, n("./node_modules/webpack/buildin/global.js"))
        },
        "./node_modules/lodash/_getAllKeys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetAllKeys.js"),
                i = n("./node_modules/lodash/_getSymbols.js"),
                o = n("./node_modules/lodash/keys.js");
            e.exports = function r(e) {
                return a(e, o, i)
            }
        },
        "./node_modules/lodash/_getAllKeysIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetAllKeys.js"),
                i = n("./node_modules/lodash/_getSymbolsIn.js"),
                o = n("./node_modules/lodash/keysIn.js");
            e.exports = function r(e) {
                return a(e, o, i)
            }
        },
        "./node_modules/lodash/_getMapData.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_isKeyable.js");
            e.exports = function i(e, t) {
                var n = e.__data__;
                return a(t) ? n["string" == typeof t ? "string" : "hash"] : n.map
            }
        },
        "./node_modules/lodash/_getNative.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseIsNative.js"),
                i = n("./node_modules/lodash/_getValue.js");
            e.exports = function o(e, t) {
                var n = i(e, t);
                return a(n) ? n : void 0
            }
        },
        "./node_modules/lodash/_getPrototype.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_overArg.js")(Object.getPrototypeOf, Object);
            e.exports = a
        },
        "./node_modules/lodash/_getRawTag.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Symbol.js"),
                i = Object.prototype,
                o = i.hasOwnProperty,
                r = i.toString,
                s = a ? a.toStringTag : void 0;
            e.exports = function l(e) {
                var t = o.call(e, s),
                    n = e[s];
                try {
                    e[s] = void 0;
                    var a = !0
                } catch (e) {}
                var i = r.call(e);
                return a && (t ? e[s] = n : delete e[s]), i
            }
        },
        "./node_modules/lodash/_getSymbols.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayFilter.js"),
                i = n("./node_modules/lodash/stubArray.js"),
                o = Object.prototype.propertyIsEnumerable,
                r = Object.getOwnPropertySymbols,
                s = r ? function(e) {
                    return null == e ? [] : (e = Object(e), a(r(e), function(t) {
                        return o.call(e, t)
                    }))
                } : i;
            e.exports = s
        },
        "./node_modules/lodash/_getSymbolsIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayPush.js"),
                i = n("./node_modules/lodash/_getPrototype.js"),
                o = n("./node_modules/lodash/_getSymbols.js"),
                r = n("./node_modules/lodash/stubArray.js"),
                s = Object.getOwnPropertySymbols ? function(e) {
                    for (var t = []; e;) a(t, o(e)), e = i(e);
                    return t
                } : r;
            e.exports = s
        },
        "./node_modules/lodash/_getTag.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_DataView.js"),
                i = n("./node_modules/lodash/_Map.js"),
                o = n("./node_modules/lodash/_Promise.js"),
                r = n("./node_modules/lodash/_Set.js"),
                s = n("./node_modules/lodash/_WeakMap.js"),
                l = n("./node_modules/lodash/_baseGetTag.js"),
                c = n("./node_modules/lodash/_toSource.js"),
                d = c(a),
                u = c(i),
                m = c(o),
                p = c(r),
                v = c(s),
                b = l;
            (a && "[object DataView]" != b(new a(new ArrayBuffer(1))) || i && "[object Map]" != b(new i) || o && "[object Promise]" != b(o.resolve()) || r && "[object Set]" != b(new r) || s && "[object WeakMap]" != b(new s)) && (b = function(e) {
                var t = l(e),
                    n = "[object Object]" == t ? e.constructor : void 0,
                    a = n ? c(n) : "";
                if (a) switch (a) {
                    case d:
                        return "[object DataView]";
                    case u:
                        return "[object Map]";
                    case m:
                        return "[object Promise]";
                    case p:
                        return "[object Set]";
                    case v:
                        return "[object WeakMap]"
                }
                return t
            }), e.exports = b
        },
        "./node_modules/lodash/_getValue.js": function(e, t) {
            e.exports = function n(e, t) {
                return null == e ? void 0 : e[t]
            }
        },
        "./node_modules/lodash/_hashClear.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_nativeCreate.js");
            e.exports = function i() {
                this.__data__ = a ? a(null) : {}, this.size = 0
            }
        },
        "./node_modules/lodash/_hashDelete.js": function(e, t) {
            e.exports = function n(e) {
                var t = this.has(e) && delete this.__data__[e];
                return this.size -= t ? 1 : 0, t
            }
        },
        "./node_modules/lodash/_hashGet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_nativeCreate.js"),
                i = Object.prototype.hasOwnProperty;
            e.exports = function o(e) {
                var t = this.__data__;
                if (a) {
                    var n = t[e];
                    return "__lodash_hash_undefined__" === n ? void 0 : n
                }
                return i.call(t, e) ? t[e] : void 0
            }
        },
        "./node_modules/lodash/_hashHas.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_nativeCreate.js"),
                i = Object.prototype.hasOwnProperty;
            e.exports = function o(e) {
                var t = this.__data__;
                return a ? void 0 !== t[e] : i.call(t, e)
            }
        },
        "./node_modules/lodash/_hashSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_nativeCreate.js");
            e.exports = function i(e, t) {
                var n = this.__data__;
                return this.size += this.has(e) ? 0 : 1, n[e] = a && void 0 === t ? "__lodash_hash_undefined__" : t, this
            }
        },
        "./node_modules/lodash/_initCloneArray.js": function(e, t) {
            var n = Object.prototype.hasOwnProperty;
            e.exports = function a(e) {
                var t = e.length,
                    a = new e.constructor(t);
                return t && "string" == typeof e[0] && n.call(e, "index") && (a.index = e.index, a.input = e.input), a
            }
        },
        "./node_modules/lodash/_initCloneByTag.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_cloneArrayBuffer.js"),
                i = n("./node_modules/lodash/_cloneDataView.js"),
                o = n("./node_modules/lodash/_cloneRegExp.js"),
                r = n("./node_modules/lodash/_cloneSymbol.js"),
                s = n("./node_modules/lodash/_cloneTypedArray.js");
            e.exports = function l(e, t, n) {
                var l = e.constructor;
                switch (t) {
                    case "[object ArrayBuffer]":
                        return a(e);
                    case "[object Boolean]":
                    case "[object Date]":
                        return new l(+e);
                    case "[object DataView]":
                        return i(e, n);
                    case "[object Float32Array]":
                    case "[object Float64Array]":
                    case "[object Int8Array]":
                    case "[object Int16Array]":
                    case "[object Int32Array]":
                    case "[object Uint8Array]":
                    case "[object Uint8ClampedArray]":
                    case "[object Uint16Array]":
                    case "[object Uint32Array]":
                        return s(e, n);
                    case "[object Map]":
                        return new l;
                    case "[object Number]":
                    case "[object String]":
                        return new l(e);
                    case "[object RegExp]":
                        return o(e);
                    case "[object Set]":
                        return new l;
                    case "[object Symbol]":
                        return r(e)
                }
            }
        },
        "./node_modules/lodash/_initCloneObject.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseCreate.js"),
                i = n("./node_modules/lodash/_getPrototype.js"),
                o = n("./node_modules/lodash/_isPrototype.js");
            e.exports = function r(e) {
                return "function" != typeof e.constructor || o(e) ? {} : a(i(e))
            }
        },
        "./node_modules/lodash/_isFlattenable.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Symbol.js"),
                i = n("./node_modules/lodash/isArguments.js"),
                o = n("./node_modules/lodash/isArray.js"),
                r = a ? a.isConcatSpreadable : void 0;
            e.exports = function s(e) {
                return o(e) || i(e) || !!(r && e && e[r])
            }
        },
        "./node_modules/lodash/_isIndex.js": function(e, t) {
            var n = /^(?:0|[1-9]\d*)$/;
            e.exports = function a(e, t) {
                var a = typeof e;
                return !!(t = null == t ? 9007199254740991 : t) && ("number" == a || "symbol" != a && n.test(e)) && e > -1 && e % 1 == 0 && e < t
            }
        },
        "./node_modules/lodash/_isKey.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isArray.js"),
                i = n("./node_modules/lodash/isSymbol.js"),
                o = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                r = /^\w*$/;
            e.exports = function s(e, t) {
                if (a(e)) return !1;
                var n = typeof e;
                return !("number" != n && "symbol" != n && "boolean" != n && null != e && !i(e)) || r.test(e) || !o.test(e) || null != t && e in Object(t)
            }
        },
        "./node_modules/lodash/_isKeyable.js": function(e, t) {
            e.exports = function n(e) {
                var t = typeof e;
                return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e
            }
        },
        "./node_modules/lodash/_isMasked.js": function(e, t, n) {
            var a, i = n("./node_modules/lodash/_coreJsData.js"),
                o = (a = /[^.]+$/.exec(i && i.keys && i.keys.IE_PROTO || "")) ? "Symbol(src)_1." + a : "";
            e.exports = function r(e) {
                return !!o && o in e
            }
        },
        "./node_modules/lodash/_isPrototype.js": function(e, t) {
            var n = Object.prototype;
            e.exports = function a(e) {
                var t = e && e.constructor;
                return e === ("function" == typeof t && t.prototype || n)
            }
        },
        "./node_modules/lodash/_listCacheClear.js": function(e, t) {
            e.exports = function n() {
                this.__data__ = [], this.size = 0
            }
        },
        "./node_modules/lodash/_listCacheDelete.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_assocIndexOf.js"),
                i = Array.prototype.splice;
            e.exports = function o(e) {
                var t = this.__data__,
                    n = a(t, e);
                return !(n < 0 || (n == t.length - 1 ? t.pop() : i.call(t, n, 1), --this.size, 0))
            }
        },
        "./node_modules/lodash/_listCacheGet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_assocIndexOf.js");
            e.exports = function i(e) {
                var t = this.__data__,
                    n = a(t, e);
                return n < 0 ? void 0 : t[n][1]
            }
        },
        "./node_modules/lodash/_listCacheHas.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_assocIndexOf.js");
            e.exports = function i(e) {
                return a(this.__data__, e) > -1
            }
        },
        "./node_modules/lodash/_listCacheSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_assocIndexOf.js");
            e.exports = function i(e, t) {
                var n = this.__data__,
                    i = a(n, e);
                return i < 0 ? (++this.size, n.push([e, t])) : n[i][1] = t, this
            }
        },
        "./node_modules/lodash/_mapCacheClear.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_Hash.js"),
                i = n("./node_modules/lodash/_ListCache.js"),
                o = n("./node_modules/lodash/_Map.js");
            e.exports = function r() {
                this.size = 0, this.__data__ = {
                    hash: new a,
                    map: new(o || i),
                    string: new a
                }
            }
        },
        "./node_modules/lodash/_mapCacheDelete.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getMapData.js");
            e.exports = function i(e) {
                var t = a(this, e).delete(e);
                return this.size -= t ? 1 : 0, t
            }
        },
        "./node_modules/lodash/_mapCacheGet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getMapData.js");
            e.exports = function i(e) {
                return a(this, e).get(e)
            }
        },
        "./node_modules/lodash/_mapCacheHas.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getMapData.js");
            e.exports = function i(e) {
                return a(this, e).has(e)
            }
        },
        "./node_modules/lodash/_mapCacheSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getMapData.js");
            e.exports = function i(e, t) {
                var n = a(this, e),
                    i = n.size;
                return n.set(e, t), this.size += n.size == i ? 0 : 1, this
            }
        },
        "./node_modules/lodash/_memoizeCapped.js": function(e, t, n) {
            var a = n("./node_modules/lodash/memoize.js");
            e.exports = function i(e) {
                var t = a(e, function(e) {
                        return 500 === n.size && n.clear(), e
                    }),
                    n = t.cache;
                return t
            }
        },
        "./node_modules/lodash/_nativeCreate.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_getNative.js")(Object, "create");
            e.exports = a
        },
        "./node_modules/lodash/_nativeKeys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_overArg.js")(Object.keys, Object);
            e.exports = a
        },
        "./node_modules/lodash/_nativeKeysIn.js": function(e, t) {
            e.exports = function n(e) {
                var t = [];
                if (null != e)
                    for (var n in Object(e)) t.push(n);
                return t
            }
        },
        "./node_modules/lodash/_nodeUtil.js": function(e, t, n) {
            (function(e) {
                var a = n("./node_modules/lodash/_freeGlobal.js"),
                    i = t && !t.nodeType && t,
                    o = i && "object" == typeof e && e && !e.nodeType && e,
                    r = o && o.exports === i && a.process,
                    s = function() {
                        try {
                            return r && r.binding && r.binding("util")
                        } catch (e) {}
                    }();
                e.exports = s
            }).call(this, n("./node_modules/webpack/buildin/module.js")(e))
        },
        "./node_modules/lodash/_objectToString.js": function(e, t) {
            var n = Object.prototype.toString;
            e.exports = function a(e) {
                return n.call(e)
            }
        },
        "./node_modules/lodash/_overArg.js": function(e, t) {
            e.exports = function n(e, t) {
                return function(n) {
                    return e(t(n))
                }
            }
        },
        "./node_modules/lodash/_overRest.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_apply.js"),
                i = Math.max;
            e.exports = function o(e, t, n) {
                return t = i(void 0 === t ? e.length - 1 : t, 0),
                    function() {
                        for (var o = arguments, r = -1, s = i(o.length - t, 0), l = Array(s); ++r < s;) l[r] = o[t + r];
                        r = -1;
                        for (var c = Array(t + 1); ++r < t;) c[r] = o[r];
                        return c[t] = n(l), a(e, this, c)
                    }
            }
        },
        "./node_modules/lodash/_parent.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGet.js"),
                i = n("./node_modules/lodash/_baseSlice.js");
            e.exports = function o(e, t) {
                return t.length < 2 ? e : a(e, i(t, 0, -1))
            }
        },
        "./node_modules/lodash/_root.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_freeGlobal.js"),
                i = "object" == typeof self && self && self.Object === Object && self,
                o = a || i || Function("return this")();
            e.exports = o
        },
        "./node_modules/lodash/_setToString.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseSetToString.js"),
                i = n("./node_modules/lodash/_shortOut.js")(a);
            e.exports = i
        },
        "./node_modules/lodash/_shortOut.js": function(e, t) {
            var n = Date.now;
            e.exports = function a(e) {
                var t = 0,
                    a = 0;
                return function() {
                    var i = n(),
                        o = 16 - (i - a);
                    if (a = i, o > 0) {
                        if (++t >= 800) return arguments[0]
                    } else t = 0;
                    return e.apply(void 0, arguments)
                }
            }
        },
        "./node_modules/lodash/_stackClear.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_ListCache.js");
            e.exports = function i() {
                this.__data__ = new a, this.size = 0
            }
        },
        "./node_modules/lodash/_stackDelete.js": function(e, t) {
            e.exports = function n(e) {
                var t = this.__data__,
                    n = t.delete(e);
                return this.size = t.size, n
            }
        },
        "./node_modules/lodash/_stackGet.js": function(e, t) {
            e.exports = function n(e) {
                return this.__data__.get(e)
            }
        },
        "./node_modules/lodash/_stackHas.js": function(e, t) {
            e.exports = function n(e) {
                return this.__data__.has(e)
            }
        },
        "./node_modules/lodash/_stackSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_ListCache.js"),
                i = n("./node_modules/lodash/_Map.js"),
                o = n("./node_modules/lodash/_MapCache.js");
            e.exports = function r(e, t) {
                var n = this.__data__;
                if (n instanceof a) {
                    var r = n.__data__;
                    if (!i || r.length < 199) return r.push([e, t]), this.size = ++n.size, this;
                    n = this.__data__ = new o(r)
                }
                return n.set(e, t), this.size = n.size, this
            }
        },
        "./node_modules/lodash/_stringToPath.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_memoizeCapped.js"),
                i = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
                o = /\\(\\)?/g,
                r = a(function(e) {
                    var t = [];
                    return 46 === e.charCodeAt(0) && t.push(""), e.replace(i, function(e, n, a, i) {
                        t.push(a ? i.replace(o, "$1") : n || e)
                    }), t
                });
            e.exports = r
        },
        "./node_modules/lodash/_toKey.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isSymbol.js");
            e.exports = function i(e) {
                if ("string" == typeof e || a(e)) return e;
                var t = e + "";
                return "0" == t && 1 / e == -1 / 0 ? "-0" : t
            }
        },
        "./node_modules/lodash/_toSource.js": function(e, t) {
            var n = Function.prototype.toString;
            e.exports = function a(e) {
                if (null != e) {
                    try {
                        return n.call(e)
                    } catch (e) {}
                    try {
                        return e + ""
                    } catch (e) {}
                }
                return ""
            }
        },
        "./node_modules/lodash/constant.js": function(e, t) {
            e.exports = function n(e) {
                return function() {
                    return e
                }
            }
        },
        "./node_modules/lodash/eq.js": function(e, t) {
            e.exports = function n(e, t) {
                return e === t || e != e && t != t
            }
        },
        "./node_modules/lodash/flatten.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseFlatten.js");
            e.exports = function i(e) {
                return null != e && e.length ? a(e, 1) : []
            }
        },
        "./node_modules/lodash/identity.js": function(e, t) {
            e.exports = function n(e) {
                return e
            }
        },
        "./node_modules/lodash/isArguments.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseIsArguments.js"),
                i = n("./node_modules/lodash/isObjectLike.js"),
                o = Object.prototype,
                r = o.hasOwnProperty,
                s = o.propertyIsEnumerable,
                l = a(function() {
                    return arguments
                }()) ? a : function(e) {
                    return i(e) && r.call(e, "callee") && !s.call(e, "callee")
                };
            e.exports = l
        },
        "./node_modules/lodash/isArray.js": function(e, t) {
            var n = Array.isArray;
            e.exports = n
        },
        "./node_modules/lodash/isArrayLike.js": function(e, t, n) {
            var a = n("./node_modules/lodash/isFunction.js"),
                i = n("./node_modules/lodash/isLength.js");
            e.exports = function o(e) {
                return null != e && i(e.length) && !a(e)
            }
        },
        "./node_modules/lodash/isBuffer.js": function(e, t, n) {
            (function(e) {
                var a = n("./node_modules/lodash/_root.js"),
                    i = n("./node_modules/lodash/stubFalse.js"),
                    o = t && !t.nodeType && t,
                    r = o && "object" == typeof e && e && !e.nodeType && e,
                    s = r && r.exports === o ? a.Buffer : void 0,
                    l = (s ? s.isBuffer : void 0) || i;
                e.exports = l
            }).call(this, n("./node_modules/webpack/buildin/module.js")(e))
        },
        "./node_modules/lodash/isFunction.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetTag.js"),
                i = n("./node_modules/lodash/isObject.js");
            e.exports = function o(e) {
                if (!i(e)) return !1;
                var t = a(e);
                return "[object Function]" == t || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t
            }
        },
        "./node_modules/lodash/isLength.js": function(e, t) {
            e.exports = function n(e) {
                return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991
            }
        },
        "./node_modules/lodash/isMap.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseIsMap.js"),
                i = n("./node_modules/lodash/_baseUnary.js"),
                o = n("./node_modules/lodash/_nodeUtil.js"),
                r = o && o.isMap,
                s = r ? i(r) : a;
            e.exports = s
        },
        "./node_modules/lodash/isObject.js": function(e, t) {
            e.exports = function n(e) {
                var t = typeof e;
                return null != e && ("object" == t || "function" == t)
            }
        },
        "./node_modules/lodash/isObjectLike.js": function(e, t) {
            e.exports = function n(e) {
                return null != e && "object" == typeof e
            }
        },
        "./node_modules/lodash/isPlainObject.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetTag.js"),
                i = n("./node_modules/lodash/_getPrototype.js"),
                o = n("./node_modules/lodash/isObjectLike.js"),
                r = Function.prototype,
                s = Object.prototype,
                l = r.toString,
                c = s.hasOwnProperty,
                d = l.call(Object);
            e.exports = function u(e) {
                if (!o(e) || "[object Object]" != a(e)) return !1;
                var t = i(e);
                if (null === t) return !0;
                var n = c.call(t, "constructor") && t.constructor;
                return "function" == typeof n && n instanceof n && l.call(n) == d
            }
        },
        "./node_modules/lodash/isSet.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseIsSet.js"),
                i = n("./node_modules/lodash/_baseUnary.js"),
                o = n("./node_modules/lodash/_nodeUtil.js"),
                r = o && o.isSet,
                s = r ? i(r) : a;
            e.exports = s
        },
        "./node_modules/lodash/isSymbol.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseGetTag.js"),
                i = n("./node_modules/lodash/isObjectLike.js");
            e.exports = function o(e) {
                return "symbol" == typeof e || i(e) && "[object Symbol]" == a(e)
            }
        },
        "./node_modules/lodash/isTypedArray.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseIsTypedArray.js"),
                i = n("./node_modules/lodash/_baseUnary.js"),
                o = n("./node_modules/lodash/_nodeUtil.js"),
                r = o && o.isTypedArray,
                s = r ? i(r) : a;
            e.exports = s
        },
        "./node_modules/lodash/keys.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayLikeKeys.js"),
                i = n("./node_modules/lodash/_baseKeys.js"),
                o = n("./node_modules/lodash/isArrayLike.js");
            e.exports = function r(e) {
                return o(e) ? a(e) : i(e)
            }
        },
        "./node_modules/lodash/keysIn.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayLikeKeys.js"),
                i = n("./node_modules/lodash/_baseKeysIn.js"),
                o = n("./node_modules/lodash/isArrayLike.js");
            e.exports = function r(e) {
                return o(e) ? a(e, !0) : i(e)
            }
        },
        "./node_modules/lodash/last.js": function(e, t) {
            e.exports = function n(e) {
                var t = null == e ? 0 : e.length;
                return t ? e[t - 1] : void 0
            }
        },
        "./node_modules/lodash/memoize.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_MapCache.js"),
                i = "Expected a function";

            function o(e, t) {
                if ("function" != typeof e || null != t && "function" != typeof t) throw new TypeError(i);
                var n = function() {
                    var a = arguments,
                        i = t ? t.apply(this, a) : a[0],
                        o = n.cache;
                    if (o.has(i)) return o.get(i);
                    var r = e.apply(this, a);
                    return n.cache = o.set(i, r) || o, r
                };
                return n.cache = new(o.Cache || a), n
            }
            o.Cache = a, e.exports = o
        },
        "./node_modules/lodash/omit.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_arrayMap.js"),
                i = n("./node_modules/lodash/_baseClone.js"),
                o = n("./node_modules/lodash/_baseUnset.js"),
                r = n("./node_modules/lodash/_castPath.js"),
                s = n("./node_modules/lodash/_copyObject.js"),
                l = n("./node_modules/lodash/_customOmitClone.js"),
                c = n("./node_modules/lodash/_flatRest.js"),
                d = n("./node_modules/lodash/_getAllKeysIn.js"),
                u = c(function(e, t) {
                    var n = {};
                    if (null == e) return n;
                    var c = !1;
                    t = a(t, function(t) {
                        return t = r(t, e), c || (c = t.length > 1), t
                    }), s(e, d(e), n), c && (n = i(n, 7, l));
                    for (var u = t.length; u--;) o(n, t[u]);
                    return n
                });
            e.exports = u
        },
        "./node_modules/lodash/stubArray.js": function(e, t) {
            e.exports = function n() {
                return []
            }
        },
        "./node_modules/lodash/stubFalse.js": function(e, t) {
            e.exports = function n() {
                return !1
            }
        },
        "./node_modules/lodash/toString.js": function(e, t, n) {
            var a = n("./node_modules/lodash/_baseToString.js");
            e.exports = function i(e) {
                return null == e ? "" : a(e)
            }
        },
        "./node_modules/react-apollo/react-apollo.browser.umd.js": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./node_modules/react-apollo/react-apollo.browser.umd.js")
        },
        "./node_modules/react-dom/index.js": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./node_modules/react-dom/index.js")
        },
        "./node_modules/react-flip-move/dist/react-flip-move.es.js": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n.n(a),
                o = n("./node_modules/react-dom/index.js"),
                r = n.n(o);

            function s(e) {
                var t = !1;
                return function() {
                    t || (console.warn(e), t = !0)
                }
            }
            s("\n>> Error, via react-flip-move <<\n\nYou provided a stateless functional component as a child to <FlipMove>. Unfortunately, SFCs aren't supported, because Flip Move needs access to the backing instances via refs, and SFCs don't have a public instance that holds that info.\n\nPlease wrap your components in a native element (eg. <div>), or a non-functional component.\n"), s("\n>> Error, via react-flip-move <<\n\nYou provided a primitive (text or number) node as a child to <FlipMove>. Flip Move needs containers with unique keys to move children around.\n\nPlease wrap your value in a native element (eg. <span>), or a component.\n");
            var l = s("\n>> Warning, via react-flip-move <<\n\nWhen using \"wrapperless\" mode (by supplying 'typeName' of 'null'), strange things happen when the direct parent has the default \"static\" position.\n\nFlipMove has added 'position: relative' to this node, to ensure Flip Move animates correctly.\n\nTo avoid seeing this warning, simply apply a non-static position to that parent node.\n"),
                c = s("\n>> Warning, via react-flip-move <<\n\nOne or more of Flip Move's child elements have the html attribute 'disabled' set to true.\n\nPlease note that this will cause animations to break in Internet Explorer 11 and below. Either remove the disabled attribute or set 'animation' to false.\n"),
                d = {
                    elevator: {
                        from: {
                            transform: "scale(0)",
                            opacity: "0"
                        },
                        to: {
                            transform: "",
                            opacity: ""
                        }
                    },
                    fade: {
                        from: {
                            opacity: "0"
                        },
                        to: {
                            opacity: ""
                        }
                    },
                    accordionVertical: {
                        from: {
                            transform: "scaleY(0)",
                            transformOrigin: "center top"
                        },
                        to: {
                            transform: "",
                            transformOrigin: "center top"
                        }
                    },
                    accordionHorizontal: {
                        from: {
                            transform: "scaleX(0)",
                            transformOrigin: "left center"
                        },
                        to: {
                            transform: "",
                            transformOrigin: "left center"
                        }
                    },
                    none: null
                },
                u = {
                    elevator: {
                        from: {
                            transform: "scale(1)",
                            opacity: "1"
                        },
                        to: {
                            transform: "scale(0)",
                            opacity: "0"
                        }
                    },
                    fade: {
                        from: {
                            opacity: "1"
                        },
                        to: {
                            opacity: "0"
                        }
                    },
                    accordionVertical: {
                        from: {
                            transform: "scaleY(1)",
                            transformOrigin: "center top"
                        },
                        to: {
                            transform: "scaleY(0)",
                            transformOrigin: "center top"
                        }
                    },
                    accordionHorizontal: {
                        from: {
                            transform: "scaleX(1)",
                            transformOrigin: "left center"
                        },
                        to: {
                            transform: "scaleX(0)",
                            transformOrigin: "left center"
                        }
                    },
                    none: null
                },
                m = d,
                p = "elevator",
                v = "none",
                b = function e(t, n) {
                    for (var a = 0; a < n.length; a++)
                        if (t(n[a], a, n)) return n[a]
                },
                f = function e(t) {
                    return (f = Array.isArray || function(e) {
                        return "[object Array]" === Object.prototype.toString.call(e)
                    })(t)
                },
                k = function g(e) {
                    var t = {};
                    return function(n) {
                        return t[n] || (t[n] = e(n)), t[n]
                    }
                }(function(e) {
                    return e.replace(/([A-Z])/g, "-$1").toLowerCase()
                }),
                h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                },
                _ = function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                },
                j = Object.assign || function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = arguments[t];
                        for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a])
                    }
                    return e
                },
                S = function(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
                },
                y = function(e, t) {
                    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return !t || "object" != typeof t && "function" != typeof t ? e : t
                };

            function N(e) {
                var t, n;
                return n = t = function(t) {
                    function n() {
                        return _(this, n), y(this, t.apply(this, arguments))
                    }
                    return S(n, t), n.prototype.checkChildren = function e(t) {}, n.prototype.convertProps = function e(t) {
                        var n = {
                            children: t.children,
                            easing: t.easing,
                            onStart: t.onStart,
                            onFinish: t.onFinish,
                            onStartAll: t.onStartAll,
                            onFinishAll: t.onFinishAll,
                            typeName: t.typeName,
                            disableAllAnimations: t.disableAllAnimations,
                            getPosition: t.getPosition,
                            maintainContainerHeight: t.maintainContainerHeight,
                            verticalAlignment: t.verticalAlignment,
                            duration: this.convertTimingProp("duration"),
                            delay: this.convertTimingProp("delay"),
                            staggerDurationBy: this.convertTimingProp("staggerDurationBy"),
                            staggerDelayBy: this.convertTimingProp("staggerDelayBy"),
                            appearAnimation: this.convertAnimationProp(t.appearAnimation, m),
                            enterAnimation: this.convertAnimationProp(t.enterAnimation, d),
                            leaveAnimation: this.convertAnimationProp(t.leaveAnimation, u),
                            delegated: {}
                        };
                        this.checkChildren(n.children);
                        var a = Object.keys(n),
                            i = function o(e) {
                                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                                    n = {};
                                return Object.keys(e).forEach(function(a) {
                                    -1 === t.indexOf(a) && (n[a] = e[a])
                                }), n
                            }(this.props, a);
                        return i.style = j({
                            position: "relative"
                        }, i.style), n.delegated = i, n
                    }, n.prototype.convertTimingProp = function e(t) {
                        var a = this.props[t],
                            i = "number" == typeof a ? a : parseInt(a, 10);
                        return isNaN(i) ? n.defaultProps[t] : i
                    }, n.prototype.convertAnimationProp = function e(t, n) {
                        switch (void 0 === t ? "undefined" : h(t)) {
                            case "boolean":
                                return n[t ? p : v];
                            case "string":
                                return -1 === Object.keys(n).indexOf(t) ? n[p] : n[t];
                            default:
                                return t
                        }
                    }, n.prototype.render = function t() {
                        return i.a.createElement(e, this.convertProps(this.props))
                    }, n
                }(a.Component), t.defaultProps = {
                    easing: "ease-in-out",
                    duration: 350,
                    delay: 0,
                    staggerDurationBy: 0,
                    staggerDelayBy: 0,
                    typeName: "div",
                    enterAnimation: p,
                    leaveAnimation: p,
                    disableAllAnimations: !1,
                    getPosition: function e(t) {
                        return t.getBoundingClientRect()
                    },
                    maintainContainerHeight: !1,
                    verticalAlignment: "top"
                }, n
            }

            function O(e) {
                var t = e.domNode,
                    n = e.styles;
                Object.keys(n).forEach(function(e) {
                    t.style.setProperty(k(e), n[e])
                })
            }
            var E = function e(t) {
                    var n = t.childDomNode,
                        a = {
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                            height: 0,
                            width: 0
                        },
                        i = t.childBoundingBox || a,
                        o = t.parentBoundingBox || a,
                        r = (0, t.getPosition)(n),
                        s = r.top - o.top,
                        l = r.left - o.left;
                    return [i.left - l, i.top - s]
                },
                I = function e(t, n) {
                    var a = n.delay,
                        i = n.duration,
                        o = n.staggerDurationBy,
                        r = n.staggerDelayBy,
                        s = n.easing;
                    return a += t * r, i += t * o, ["transform", "opacity"].map(function(e) {
                        return e + " " + i + "ms " + s + " " + a + "ms"
                    }).join(", ")
                },
                C = function F() {
                    var e = {
                        transition: "transitionend",
                        "-o-transition": "oTransitionEnd",
                        "-moz-transition": "transitionend",
                        "-webkit-transition": "webkitTransitionEnd"
                    };
                    if ("undefined" == typeof document) return "";
                    var t = document.createElement("fakeelement"),
                        n = b(function(e) {
                            return void 0 !== t.style.getPropertyValue(e)
                        }, Object.keys(e));
                    return n ? e[n] : ""
                }(),
                T = !C;

            function w(e) {
                return e.key || ""
            }

            function x(e) {
                return a.Children.toArray(e)
            }
            var P = N(function(e) {
                function t() {
                    var n, a;
                    _(this, t);
                    for (var i = arguments.length, o = Array(i), s = 0; s < i; s++) o[s] = arguments[s];
                    return n = a = y(this, e.call.apply(e, [this].concat(o))), a.state = {
                        children: x(a.props ? a.props.children : []).map(function(e) {
                            return j({}, e, {
                                element: e,
                                appearing: !0
                            })
                        })
                    }, a.childrenData = {}, a.parentData = {
                        domNode: null,
                        boundingBox: null
                    }, a.heightPlaceholderData = {
                        domNode: null
                    }, a.remainingAnimations = 0, a.childrenToAnimate = [], a.findDOMContainer = function() {
                        var e = r.a.findDOMNode(a),
                            t = e && e.parentNode;
                        t && t instanceof HTMLElement && ("static" === window.getComputedStyle(t).position && (t.style.position = "relative", l()), a.parentData.domNode = t)
                    }, a.runAnimation = function() {
                        var e = a.state.children.filter(a.doesChildNeedToBeAnimated),
                            t = e.map(function(e) {
                                return a.computeInitialStyles(e)
                            });
                        e.forEach(function(e, n) {
                            a.remainingAnimations += 1, a.childrenToAnimate.push(w(e)), a.animateChild(e, n, t[n])
                        }), "function" == typeof a.props.onStartAll && a.callChildrenHook(a.props.onStartAll)
                    }, a.doesChildNeedToBeAnimated = function(e) {
                        if (!w(e)) return !1;
                        var t = a.getChildData(w(e)),
                            n = t.domNode,
                            i = t.boundingBox,
                            o = a.parentData.boundingBox;
                        if (!n) return !1;
                        var r = a.props,
                            s = r.appearAnimation,
                            l = r.enterAnimation,
                            c = r.leaveAnimation,
                            d = r.getPosition,
                            u = e.appearing && s,
                            m = e.entering && l,
                            p = e.leaving && c;
                        if (u || m || p) return !0;
                        var v = E({
                                childDomNode: n,
                                childBoundingBox: i,
                                parentBoundingBox: o,
                                getPosition: d
                            }),
                            b = v[0],
                            f = v[1];
                        return 0 !== b || 0 !== f
                    }, y(a, n)
                }
                return S(t, e), t.prototype.componentDidMount = function e() {
                    null === this.props.typeName && this.findDOMContainer(), this.props.appearAnimation && !this.isAnimationDisabled(this.props) && (this.prepForAnimation(), this.runAnimation())
                }, t.prototype.componentWillReceiveProps = function e(t) {
                    this.updateBoundingBoxCaches();
                    var n = x(t.children);
                    this.setState({
                        children: this.isAnimationDisabled(t) ? n.map(function(e) {
                            return j({}, e, {
                                element: e
                            })
                        }) : this.calculateNextSetOfChildren(n)
                    })
                }, t.prototype.componentDidUpdate = function e(t) {
                    null === this.props.typeName && this.findDOMContainer(), ! function n(e, t) {
                        if (e === t) return !0;
                        var n = !f(e) || !f(t),
                            a = e.length !== t.length;
                        return !n && !a && function e(t, n) {
                            for (var a = 0; a < n.length; a++)
                                if (!t(n[a], a, n)) return !1;
                            return !0
                        }(function(e, n) {
                            return e === t[n]
                        }, e)
                    }(x(this.props.children).map(function(e) {
                        return e.key
                    }), x(t.children).map(function(e) {
                        return e.key
                    })) && !this.isAnimationDisabled(this.props) && (this.prepForAnimation(), this.runAnimation())
                }, t.prototype.calculateNextSetOfChildren = function e(t) {
                    var n = this,
                        a = t.map(function(e) {
                            var t = n.findChildByKey(e.key),
                                a = !t || t.leaving;
                            return j({}, e, {
                                element: e,
                                entering: a
                            })
                        }),
                        i = 0;
                    return this.state.children.forEach(function(e, o) {
                        if (!b(function(t) {
                                return t.key === w(e)
                            }, t) && n.props.leaveAnimation) {
                            var r = j({}, e, {
                                    leaving: !0
                                }),
                                s = o + i;
                            a.splice(s, 0, r), i += 1
                        }
                    }), a
                }, t.prototype.prepForAnimation = function e() {
                    var t = this,
                        n = this.props,
                        a = n.leaveAnimation,
                        i = n.maintainContainerHeight,
                        o = n.getPosition;
                    a && (this.state.children.filter(function(e) {
                        return e.leaving
                    }).forEach(function(e) {
                        var n = t.getChildData(w(e));
                        !t.isAnimationDisabled(t.props) && n.domNode && n.domNode.disabled && c(), n.boundingBox && function e(t, n) {
                            var a = t.domNode,
                                i = t.boundingBox;
                            if (a && i) {
                                var o = window.getComputedStyle(a),
                                    r = ["margin-top", "margin-left", "margin-right"].reduce(function(e, t) {
                                        var n, a = o.getPropertyValue(t);
                                        return j({}, e, ((n = {})[t] = Number(a.replace("px", "")), n))
                                    }, {});
                                O({
                                    domNode: a,
                                    styles: {
                                        position: "absolute",
                                        top: ("bottom" === n ? i.top - i.height : i.top) - r["margin-top"] + "px",
                                        left: i.left - r["margin-left"] + "px",
                                        right: i.right - r["margin-right"] + "px"
                                    }
                                })
                            }
                        }(n, t.props.verticalAlignment)
                    }), i && this.heightPlaceholderData.domNode && function e(t) {
                        var n = t.domNode,
                            a = t.parentData,
                            i = t.getPosition,
                            o = a.domNode,
                            r = a.boundingBox;
                        if (o && r) {
                            O({
                                domNode: n,
                                styles: {
                                    height: "0"
                                }
                            });
                            var s = r.height - i(o).height;
                            O({
                                domNode: n,
                                styles: {
                                    height: s > 0 ? s + "px" : "0"
                                }
                            })
                        }
                    }({
                        domNode: this.heightPlaceholderData.domNode,
                        parentData: this.parentData,
                        getPosition: o
                    })), this.state.children.forEach(function(e) {
                        var n = t.getChildData(w(e)).domNode;
                        n && (e.entering || e.leaving || O({
                            domNode: n,
                            styles: {
                                transition: ""
                            }
                        }))
                    })
                }, t.prototype.animateChild = function e(t, n, a) {
                    var i = this,
                        o = this.getChildData(w(t)).domNode;
                    o && (O({
                        domNode: o,
                        styles: a
                    }), this.props.onStart && this.props.onStart(t, o), requestAnimationFrame(function() {
                        requestAnimationFrame(function() {
                            var e = {
                                transition: I(n, i.props),
                                transform: "",
                                opacity: ""
                            };
                            t.appearing && i.props.appearAnimation ? e = j({}, e, i.props.appearAnimation.to) : t.entering && i.props.enterAnimation ? e = j({}, e, i.props.enterAnimation.to) : t.leaving && i.props.leaveAnimation && (e = j({}, e, i.props.leaveAnimation.to)), O({
                                domNode: o,
                                styles: e
                            })
                        })
                    }), this.bindTransitionEndHandler(t))
                }, t.prototype.bindTransitionEndHandler = function e(t) {
                    var n = this,
                        a = this.getChildData(w(t)).domNode;
                    a && a.addEventListener(C, function e(i) {
                        i.target === a && (a.style.transition = "", n.triggerFinishHooks(t, a), a.removeEventListener(C, e), t.leaving && n.removeChildData(w(t)))
                    })
                }, t.prototype.triggerFinishHooks = function e(t, n) {
                    var a = this;
                    if (this.props.onFinish && this.props.onFinish(t, n), this.remainingAnimations -= 1, 0 === this.remainingAnimations) {
                        var i = this.state.children.filter(function(e) {
                            return !e.leaving
                        }).map(function(e) {
                            return j({}, e, {
                                element: e.element,
                                appearing: !1,
                                entering: !1
                            })
                        });
                        this.setState({
                            children: i
                        }, function() {
                            "function" == typeof a.props.onFinishAll && a.callChildrenHook(a.props.onFinishAll), a.childrenToAnimate = []
                        }), this.heightPlaceholderData.domNode && (this.heightPlaceholderData.domNode.style.height = "0")
                    }
                }, t.prototype.callChildrenHook = function e(t) {
                    var n = this,
                        a = [],
                        i = [];
                    this.childrenToAnimate.forEach(function(e) {
                        var t = n.findChildByKey(e);
                        t && (a.push(t), n.hasChildData(e) && i.push(n.getChildData(e).domNode))
                    }), t(a, i)
                }, t.prototype.updateBoundingBoxCaches = function e() {
                    var t = this,
                        n = this.parentData.domNode;
                    if (n) {
                        this.parentData.boundingBox = this.props.getPosition(n);
                        var a = [];
                        this.state.children.forEach(function(e) {
                            var i = w(e);
                            if (i)
                                if (t.hasChildData(i)) {
                                    var o = t.getChildData(i);
                                    o.domNode && e ? a.push(function e(t) {
                                        var n = t.childDomNode,
                                            a = t.parentDomNode,
                                            i = t.getPosition,
                                            o = i(a),
                                            r = i(n),
                                            s = r.top,
                                            l = r.left,
                                            c = r.right,
                                            d = r.bottom,
                                            u = r.width,
                                            m = r.height;
                                        return {
                                            top: s - o.top,
                                            left: l - o.left,
                                            right: o.right - c,
                                            bottom: o.bottom - d,
                                            width: u,
                                            height: m
                                        }
                                    }({
                                        childDomNode: o.domNode,
                                        parentDomNode: n,
                                        getPosition: t.props.getPosition
                                    })) : a.push(null)
                                } else a.push(null);
                            else a.push(null)
                        }), this.state.children.forEach(function(e, n) {
                            var i = w(e),
                                o = a[n];
                            i && t.setChildData(i, {
                                boundingBox: o
                            })
                        })
                    }
                }, t.prototype.computeInitialStyles = function e(t) {
                    if (t.appearing) return this.props.appearAnimation ? this.props.appearAnimation.from : {};
                    if (t.entering) return this.props.enterAnimation ? j({
                        position: "",
                        top: "",
                        left: "",
                        right: "",
                        bottom: ""
                    }, this.props.enterAnimation.from) : {};
                    if (t.leaving) return this.props.leaveAnimation ? this.props.leaveAnimation.from : {};
                    var n = this.getChildData(w(t)),
                        a = n.domNode,
                        i = n.boundingBox,
                        o = this.parentData.boundingBox;
                    if (!a) return {};
                    var r = E({
                        childDomNode: a,
                        childBoundingBox: i,
                        parentBoundingBox: o,
                        getPosition: this.props.getPosition
                    });
                    return {
                        transform: "translate(" + r[0] + "px, " + r[1] + "px)"
                    }
                }, t.prototype.isAnimationDisabled = function e(t) {
                    return T || t.disableAllAnimations || 0 === t.duration && 0 === t.delay && 0 === t.staggerDurationBy && 0 === t.staggerDelayBy
                }, t.prototype.findChildByKey = function e(t) {
                    return b(function(e) {
                        return w(e) === t
                    }, this.state.children)
                }, t.prototype.hasChildData = function e(t) {
                    return Object.prototype.hasOwnProperty.call(this.childrenData, t)
                }, t.prototype.getChildData = function e(t) {
                    return this.hasChildData(t) ? this.childrenData[t] : {}
                }, t.prototype.setChildData = function e(t, n) {
                    this.childrenData[t] = j({}, this.getChildData(t), n)
                }, t.prototype.removeChildData = function e(t) {
                    delete this.childrenData[t], this.setState(function(e) {
                        return j({}, e, {
                            children: e.children.filter(function(e) {
                                return e.element.key !== t
                            })
                        })
                    })
                }, t.prototype.createHeightPlaceholder = function e() {
                    var t = this,
                        n = this.props.typeName,
                        i = "ul" === n || "ol" === n ? "li" : "div";
                    return Object(a.createElement)(i, {
                        key: "height-placeholder",
                        ref: function e(n) {
                            t.heightPlaceholderData.domNode = n
                        },
                        style: {
                            visibility: "hidden",
                            height: 0
                        }
                    })
                }, t.prototype.childrenWithRefs = function e() {
                    var t = this;
                    return this.state.children.map(function(e) {
                        return Object(a.cloneElement)(e.element, {
                            ref: function n(a) {
                                if (a) {
                                    var i = function e(t) {
                                        if ("undefined" == typeof HTMLElement) return null;
                                        if (t instanceof HTMLElement) return t;
                                        var n = Object(o.findDOMNode)(t);
                                        return n && n.nodeType === Node.TEXT_NODE ? null : n
                                    }(a);
                                    t.setChildData(w(e), {
                                        domNode: i
                                    })
                                }
                            }
                        })
                    })
                }, t.prototype.render = function e() {
                    var t = this,
                        n = this.props,
                        i = n.typeName,
                        o = n.delegated,
                        r = n.leaveAnimation,
                        s = n.maintainContainerHeight,
                        l = this.childrenWithRefs();
                    if (r && s && l.push(this.createHeightPlaceholder()), !i) return l;
                    var c = j({}, o, {
                        children: l,
                        ref: function e(n) {
                            t.parentData.domNode = n
                        }
                    });
                    return Object(a.createElement)(i, c)
                }, t
            }(a.Component));
            t.a = P
        },
        "./node_modules/react-redux/es/index.js": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./node_modules/react-redux/es/index.js")
        },
        "./node_modules/react/index.js": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./node_modules/react/index.js")
        },
        "./node_modules/webpack/buildin/global.js": function(e, t) {
            var n;
            n = function() {
                return this
            }();
            try {
                n = n || Function("return this")() || (0, eval)("this")
            } catch (e) {
                "object" == typeof window && (n = window)
            }
            e.exports = n
        },
        "./node_modules/webpack/buildin/module.js": function(e, t) {
            e.exports = function(e) {
                return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
                    enumerable: !0,
                    get: function() {
                        return e.l
                    }
                }), Object.defineProperty(e, "id", {
                    enumerable: !0,
                    get: function() {
                        return e.i
                    }
                }), e.webpackPolyfill = 1), e
            }
        },
        "./packages/common/api/api.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/api/api.jsx")
        },
        "./packages/common/classnames/classnames.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/classnames/classnames.jsx")
        },
        "./packages/common/decode/decode.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/decode/decode.jsx")
        },
        "./packages/common/features/features.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/features/features.jsx")
        },
        "./packages/common/global/global.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/global/global.jsx")
        },
        "./packages/common/i18n/i18n.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/i18n/i18n.jsx")
        },
        "./packages/common/infinite-loader/InfiniteLoader.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./packages/common/logging/logging.jsx"),
                m = n.n(u),
                p = n("./packages/common/throttle/throttle.jsx"),
                v = n.n(p),
                b = 8,
                f = function(e) {
                    function t() {
                        var e, n;
                        Object(a.a)(this, t);
                        for (var i = arguments.length, s = new Array(i), u = 0; u < i; u++) s[u] = arguments[u];
                        return n = Object(o.a)(this, (e = Object(r.a)(t)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(n)), "contentRef", d.createRef()), Object(c.a)(Object(l.a)(Object(l.a)(n)), "containerRef", d.createRef()), Object(c.a)(Object(l.a)(Object(l.a)(n)), "observer", void 0), Object(c.a)(Object(l.a)(Object(l.a)(n)), "numberOfLoadMores", b), Object(c.a)(Object(l.a)(Object(l.a)(n)), "infiniteScrollEnabled", !1), Object(c.a)(Object(l.a)(Object(l.a)(n)), "isLoading", !1), Object(c.a)(Object(l.a)(Object(l.a)(n)), "useWindow", function() {
                            return !n.containerRef.current
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "isContentVisible", function() {
                            if (!n.contentRef.current) return !1;
                            var e = n.contentRef.current.getBoundingClientRect(),
                                t = n.props.threshold;
                            return n.useWindow() ? window.innerHeight >= e.bottom - t : !(n.containerRef && !n.containerRef.current) && n.containerRef.current.getBoundingClientRect().bottom >= e.bottom - t
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "executeLoadMore", function() {
                            return n.props.loadMore().catch(function(e) {
                                m.a.error("infinite loader error: ", e)
                            }).then(function() {
                                return n.numberOfLoadMores -= 1, n.props.hasMore && n.isContentVisible() && n.numberOfLoadMores > 0 ? n.executeLoadMore() : (n.numberOfLoadMores < 0 && m.a.error("Attempted to load more than 10 times without scroll handler, do you have an infinite loop?"), n.isLoading = !1, Promise.resolve())
                            })
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "checkToLoadMore", function() {
                            n.props.hasMore && n.infiniteScrollEnabled && n.isContentVisible() && !n.isLoading && (n.numberOfLoadMores = b, n.isLoading = !0, n.executeLoadMore())
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "enableInfiniteScroll", function() {
                            n.infiniteScrollEnabled = !0, n.checkToLoadMore()
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleScroll", n.props.throttle ? v()(n.checkToLoadMore, n.props.throttle, !1) : n.checkToLoadMore), n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            this.useWindow() ? (window.addEventListener("scroll", this.handleScroll), window.addEventListener("resize", this.handleScroll)) : this.containerRef.current && (this.containerRef.current.addEventListener("scroll", this.handleScroll), this.containerRef.current.addEventListener("resize", this.handleScroll)), this.props.infiniteLoadOnMount && (this.infiniteScrollEnabled = !0, this.checkToLoadMore())
                        }
                    }, {
                        key: "componentWillUnmount",
                        value: function e() {
                            this.infiniteScrollEnabled = !1, this.useWindow() ? (window.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleScroll)) : this.containerRef.current && (this.containerRef.current.removeEventListener("scroll", this.handleScroll), this.containerRef.current.removeEventListener("resize", this.handleScroll))
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            return this.props.children(this.containerRef, this.contentRef, this.enableInfiniteScroll, this.infiniteScrollEnabled)
                        }
                    }]), t
                }(d.Component);
            Object(c.a)(f, "defaultProps", {
                throttle: 200
            }), t.a = f
        },
        "./packages/common/logging/logging.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/logging/logging.jsx")
        },
        "./packages/common/object-util/object-util.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/object-util/object-util.jsx")
        },
        "./packages/common/routing/routing.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/routing/routing.jsx")
        },
        "./packages/common/state/state.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/state/state.jsx")
        },
        "./packages/common/throttle/throttle.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/throttle/throttle.jsx")
        },
        "./packages/common/tracking/tracking.jsx": function(e, t, n) {
            e.exports = n("dll-reference @ta/common.global")("./packages/common/tracking/tracking.jsx")
        },
        "./packages/common/webview/NativeBridge.jsx": function(e, t, n) {
            "use strict";

            function a(e) {
                var t = "";
                if (null != e.tapCallback) {
                    var n = e.tapCallback,
                        a = "nativeInterop" + function i() {
                            function e() {
                                return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
                            }
                            return e() + e() + e() + e() + e() + e() + e() + e()
                        }();
                    window[a] = function() {
                        null != n && n()
                    }, t = a, e.tapFunction = t, e.tapCallback = null
                }
            }

            function i() {
                return "undefined" != typeof window && window.taBridgeContext ? (window.bridge || function e() {
                    var e, t, n;
                    window.bridge || (window.bridge = (e = [], t = 0, n = [], document.addEventListener("PacificDidReceiveNativeCallback", function(t) {
                        if (t.detail) {
                            var n = t.detail,
                                a = isNaN(parseInt(n.id)) ? -1 : parseInt(n.id); - 1 != a && (e[a] && e[a](n.parameters, n.error), delete e[a])
                        }
                    }, !1), document.addEventListener("PacificDidReceiveNativeBroadcast", function(e) {
                        if (e.detail) {
                            var t = e.detail,
                                a = t.name;
                            if (void 0 !== a && n[a]) {
                                var i = n[a];
                                if (i instanceof Array) {
                                    var o = t.parameters;
                                    i.forEach(function(e) {
                                        e(o)
                                    })
                                }
                            }
                        }
                    }, !1), {
                        post: function n(a, i, o, r, s) {
                            var l = t++;
                            e[l] = r, window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.pacific ? window.webkit.messageHandlers.pacific.postMessage({
                                action: a,
                                parameters: i,
                                uid: o,
                                callback: l,
                                print: s || 0
                            }) : window.pacific && window.pacific.postMessage(JSON.stringify({
                                action: a,
                                parameters: i,
                                uid: o,
                                callback: l,
                                print: s || 0
                            }))
                        },
                        on: function e(t, a) {
                            var i = n[t];
                            return i || (n[t] = i = []), i.push(a),
                                function() {
                                    i[indexOf(i, a)] = null
                                }
                        },
                        off: function e(t) {
                            delete n[t]
                        }
                    }))
                }(), window.taBridgeContext.uid) : null
            }

            function o(e, t) {
                if ("undefined" == typeof window || !window.taBridgeContext || !window.taBridgeContext.actions) return !1;
                var n = window.taBridgeContext.actions[e];
                return !(!n || !n.v) && t === n.v
            }

            function r(e, t, n) {
                i() && (e ? window.bridge.on(t, n) : window.bridge.off(t))
            }

            function s(e) {
                e.items.forEach(function(e, t) {
                    a(e)
                })
            }

            function l(e, t, n) {
                var a = i();
                return !(!a || !o(e, t) || (window.bridge.post(e, n || {}, a), 0))
            }

            function c() {
                l("hideSkeleton", 1, null)
            }

            function d(e) {
                ! function t(e) {
                    null != e.trailingMenuItems && e.trailingMenuItems.forEach(function(e, t) {
                        var n = e;
                        a(n), null != n.nestedMenu && s(n.nestedMenu)
                    })
                }(e.navigation), l("onNewOrUpdatedScreen", 1, e)
            }

            function u(e) {
                s(e), l("overflowMenu", 1, e)
            }

            function m() {
                o("map", 2) ? l("map", 2, null) : l("map", 1, null)
            }

            function p(e) {
                l("createTrip", 1, {
                    isPublic: e
                })
            }

            function v(e) {
                l("shareTrip", 1, e)
            }
            n.r(t), n.d(t, "isActionSupported", function() {
                return o
            }), n.d(t, "postToBridge", function() {
                return l
            }), n.d(t, "hideSkeleton", function() {
                return c
            }), n.d(t, "onNewOrUpdatedScreen", function() {
                return d
            }), n.d(t, "showNativeOverflowMenu", function() {
                return u
            }), n.d(t, "showNativeMap", function() {
                return m
            }), n.d(t, "showNativeCreateTrip", function() {
                return p
            }), n.d(t, "showNativeShareTrip", function() {
                return v
            }), n.d(t, "showSavesModal", function() {
                return b
            }), n.d(t, "showRegistration", function() {
                return f
            }), n.d(t, "close", function() {
                return k
            }), n.d(t, "startScreenTransition", function() {
                return g
            }), n.d(t, "onOverlayStateChange", function() {
                return h
            }), n.d(t, "onHeaderHeightChange", function() {
                return _
            }), n.d(t, "onShrinkMap", function() {
                return j
            }), n.d(t, "onNavigateToTripDetail", function() {
                return S
            }), n.d(t, "onHandleTripCollaboration", function() {
                return y
            }), n.d(t, "onFlushBatchTracking", function() {
                return N
            }), n.d(t, "isNativeWebview", function() {
                return O
            }), n.d(t, "getHeaderHeight", function() {
                return E
            }), n.d(t, "onTripsRefetch", function() {
                return I
            }), n.d(t, "onTripUpdate", function() {
                return C
            }), n.d(t, "onTripItemDelete", function() {
                return F
            }), n.d(t, "onRefetchTripsWithItems", function() {
                return T
            });
            var b = function e(t) {
                    o("presentSavesModal", 2) ? l("presentSavesModal", 2, t) : l("presentSavesModal", 1, {
                        itemId: t.id
                    })
                },
                f = function e(t) {
                    l("showReg", 1, {
                        dismissOnCancellation: t
                    })
                };

            function k() {
                l("close", 1, null)
            }

            function g() {
                l("startScreenTransition", 1, null)
            }

            function h(e) {
                l(e ? "overlayShown" : "overlayHidden", 1, null)
            }

            function _(e, t) {
                r(e, "updateHeaderHeight", t)
            }

            function j(e, t) {
                r(e, "shrinkMap", t)
            }

            function S(e, t) {
                r(e, "navigateToTripDetail", t)
            }

            function y(e, t) {
                r(e, "handleTripCollaboration", t)
            }

            function N(e, t) {
                r(e, "flushBatchTracking", t)
            }

            function O() {
                return null != i()
            }

            function E() {
                if ("undefined" != typeof window && void 0 !== window.localStorage && void 0 !== window.localStorage.headerHeight) {
                    var e = window.localStorage.headerHeight;
                    return "string" == typeof e && (e = parseInt(e, 10)), e
                }
                return 0
            }

            function I(e, t) {
                r(e, "refetchTrips", t)
            }

            function C(e) {
                l("tripUpdate", 1, e)
            }

            function F(e) {
                l("tripItemDelete", 1, e)
            }

            function T(e, t) {
                r(e, "refetchTripsWithItems", t)
            }
        },
        "./packages/events/keyboard-event-listener/KeyboardEventListener.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return d
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = function(e) {
                    function t(e) {
                        var n;
                        return Object(a.a)(this, t), n = Object(o.a)(this, Object(r.a)(t).call(this, e)), Object(c.a)(Object(l.a)(Object(l.a)(n)), "keyNames", void 0), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleEvent", function(e) {
                            var t = e.key;
                            t && -1 !== n.keyNames.indexOf(t) && n.props.callback(e)
                        }), n.keyNames = Array.isArray(e.keyName) ? e.keyName : [e.keyName], n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            window.addEventListener(this.props.eventType, this.handleEvent)
                        }
                    }, {
                        key: "componentWillUnmount",
                        value: function e() {
                            window.removeEventListener(this.props.eventType, this.handleEvent)
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            return null
                        }
                    }]), t
                }(n("./node_modules/react/index.js").Component);
            Object(c.a)(d, "defaultProps", {
                eventType: "keydown"
            })
        },
        "./packages/events/window-resize/WindowResize.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return p
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./packages/common/throttle/throttle.jsx"),
                m = n.n(u),
                p = function(e) {
                    function t() {
                        var e, n;
                        Object(a.a)(this, t);
                        for (var i = arguments.length, s = new Array(i), d = 0; d < i; d++) s[d] = arguments[d];
                        return n = Object(o.a)(this, (e = Object(r.a)(t)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleResize", m()(function() {
                            n.props.callback()
                        }, n.props.throttle || 0, n.props.useDebounce)), n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            window.addEventListener("resize", this.handleResize)
                        }
                    }, {
                        key: "componentWillUnmount",
                        value: function e() {
                            window.removeEventListener("resize", this.handleResize)
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            return null
                        }
                    }]), t
                }(d.Component);
            Object(c.a)(p, "defaultProps", {
                throttle: 200,
                useDebounce: !1
            })
        },
        "./packages/events/window-scroll/WindowScroll.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return p
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./packages/common/throttle/throttle.jsx"),
                m = n.n(u),
                p = function(e) {
                    function t() {
                        var e, n;
                        Object(a.a)(this, t);
                        for (var i = arguments.length, s = new Array(i), d = 0; d < i; d++) s[d] = arguments[d];
                        return n = Object(o.a)(this, (e = Object(r.a)(t)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleScroll", n.props.throttle ? m()(function() {
                            n.props.callback()
                        }, n.props.throttle, n.props.useDebounce) : n.props.callback), n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            window.addEventListener("scroll", this.handleScroll, this.props.useCapture), window.addEventListener("resize", this.handleScroll, this.props.useCapture)
                        }
                    }, {
                        key: "componentWillUnmount",
                        value: function e() {
                            this.disableListeners()
                        }
                    }, {
                        key: "disableListeners",
                        value: function e() {
                            window.removeEventListener("scroll", this.handleScroll, this.props.useCapture), window.removeEventListener("resize", this.handleScroll, this.props.useCapture)
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            return null
                        }
                    }]), t
                }(d.Component);
            Object(c.a)(p, "defaultProps", {
                throttle: 200,
                useDebounce: !1,
                useCapture: !1
            })
        },
        "./packages/public/content-uploader/link-uploader/LinkPostForm.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./node_modules/react-redux/es/index.js"),
                m = n("./packages/common/i18n/i18n.jsx"),
                p = n("@ta/common.typeahead"),
                v = n("@ta/input.text-area"),
                b = n("@ta/social.social-reference"),
                f = n("./packages/common/features/features.jsx"),
                k = {
                    formWrapper: "public-content-uploader-link-uploader-LinkPostForm__formWrapper--1_-B6",
                    commentsContainer: "public-content-uploader-link-uploader-LinkPostForm__commentsContainer--1sZa3",
                    tagsContainer: "public-content-uploader-link-uploader-LinkPostForm__tagsContainer--1xXZ5",
                    inputLabelTitle: "public-content-uploader-link-uploader-LinkPostForm__inputLabelTitle--89OhP",
                    inputSubLabel: "public-content-uploader-link-uploader-LinkPostForm__inputSubLabel--GQCxU",
                    commentInput: "public-content-uploader-link-uploader-LinkPostForm__commentInput--NUXng",
                    commentError: "public-content-uploader-link-uploader-LinkPostForm__commentError--bX4ru",
                    characterCountContainer: "public-content-uploader-link-uploader-LinkPostForm__characterCountContainer--Hcm7z",
                    characterCount: "public-content-uploader-link-uploader-LinkPostForm__characterCount--GGWF4",
                    error: "public-content-uploader-link-uploader-LinkPostForm__error--2mGij",
                    multiSelectInput: "public-content-uploader-link-uploader-LinkPostForm__multiSelectInput--1pGGj"
                },
                g = 500,
                h = function(e) {
                    function t(e) {
                        var n;
                        return Object(i.a)(this, t), n = Object(o.a)(this, Object(r.a)(t).call(this, e)), Object(c.a)(Object(l.a)(Object(l.a)(n)), "selectorNode", void 0), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleCommentChange", function(e) {
                            var t = e.currentTarget;
                            n.props.handleCommentChange(t.value), n.setState({
                                characterCount: t.value.length
                            })
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "handleHasResultsChanged", function(e) {
                            e && n.selectorNode.current && !n.props.isMobile && n.selectorNode.current.scrollIntoView()
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "locationSelectionChanged", function(e) {
                            n.props.handleLocationSelectionChange(e), n.setState({
                                selectedLocations: e
                            })
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "render", function() {
                            return d.createElement("div", {
                                className: k.formWrapper
                            }, d.createElement("div", {
                                className: "ui_label_group ".concat(k.commentsContainer)
                            }, d.createElement("div", {
                                className: k.inputLabelTitle
                            }, Object(m.localize)("link_uploader_commentlabel")), d.createElement("div", {
                                className: k.inputSubLabel
                            }, Object(m.localize)("link_uploader_commentdescription")), Object(f.featureIsEnabled)("social_at_reference_ugc_editor") ? d.createElement(b.ReferenceSelectorController, {
                                name: "comment",
                                onChange: n.handleCommentChange,
                                maxLength: g,
                                className: "ui_textarea ".concat(k.commentInput, " ").concat(n.props.commentError && n.props.commentError.length ? k.commentError : ""),
                                value: n.props.originalFormData ? n.props.originalFormData.comment : "",
                                shouldAutoScroll: n.props.isMobile
                            }) : d.createElement(v.TextArea, {
                                name: "comment",
                                onChange: n.handleCommentChange,
                                maxLength: g,
                                className: "ui_textarea ".concat(k.commentInput, " ").concat(n.props.commentError && n.props.commentError.length ? k.commentError : ""),
                                value: n.props.originalFormData ? n.props.originalFormData.comment : ""
                            }), d.createElement("div", {
                                className: k.characterCountContainer
                            }, n.props.commentError && d.createElement("div", {
                                className: k.error
                            }, n.props.commentError), d.createElement("div", {
                                className: k.characterCount
                            }, 0 === n.state.characterCount ? Object(m.localize)("post_video_500_max_characters") : Object(m.localize)("post_video_character_count", {
                                nCharacterCount: n.state.characterCount
                            })))), d.createElement("div", {
                                className: k.tagsContainer,
                                ref: n.selectorNode
                            }, d.createElement("div", {
                                className: k.inputLabelTitle
                            }, Object(m.localize)("link_uploader_locationlabel")), d.createElement("div", {
                                className: k.inputSubLabel
                            }, Object(m.localize)("link_uploader_locationdescription")), d.createElement("div", {
                                className: k.multiSelectInput
                            }, d.createElement(p.MultiLocationSelector, {
                                selectedLocations: n.state.selectedLocations,
                                selectionChanged: n.locationSelectionChanged,
                                hasResultsChanged: n.handleHasResultsChanged
                            }))))
                        }), n.selectorNode = d.createRef(), n.state = {
                            characterCount: 0,
                            selectedLocations: e.originalFormData ? e.originalFormData.selectedLocations : new Map
                        }, n
                    }
                    return Object(s.a)(t, e), t
                }(d.Component);
            t.a = Object(u.connect)(function(e, t) {
                return Object(a.a)({
                    isMobile: "MOBILE" === e.meta.device.viewportCategory
                }, t)
            })(h)
        },
        "./packages/public/content-uploader/link-uploader/LinkPostUploader.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                m = n("./node_modules/react/index.js"),
                p = n("./node_modules/react-redux/es/index.js"),
                v = n("./packages/common/classnames/classnames.jsx"),
                b = n.n(v),
                f = n("@ta/events.lifecycle"),
                k = n("./packages/common/i18n/i18n.jsx"),
                g = n("@ta/overlays.modal"),
                h = n("./packages/common/state/state.jsx"),
                _ = n("@ta/styleguide.loading"),
                j = n("./packages/common/tracking/tracking.jsx"),
                S = n.n(j),
                y = n("@ta/social.link-preview"),
                N = n("@ta/styleguide.button"),
                O = n.n(N),
                E = n("@ta/overlays.toast"),
                I = n("./packages/public/content-uploader/link-uploader/LinkPostForm.jsx"),
                C = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                F = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "GetLinkPreview"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "linkPostPreview"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "status"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "preview"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "description"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "urlDomain"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canonicalUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "updated"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "mediaKeys"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "media"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Photo"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "photoSizes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "url"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "width"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "height"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "LinkPreviewMedia"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: {
                                                                    kind: "Name",
                                                                    value: "linkPreviewId"
                                                                },
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [{
                                                                    kind: "Directive",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "static"
                                                                    },
                                                                    arguments: []
                                                                }]
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 515
                    }
                };
            F.loc.source = {
                body: "88dc44e96790"
            };
            var T = F,
                w = function e(t) {
                    var n = t.url,
                        a = t.handleSuccess,
                        i = t.handleError,
                        o = 0;
                    return m.createElement(C.Query, {
                        query: T,
                        variables: {
                            url: n
                        },
                        notifyOnNetworkStatusChange: !0
                    }, function(e) {
                        var t = e.loading,
                            n = e.data,
                            r = e.stopPolling,
                            s = e.startPolling,
                            l = e.networkStatus;
                        if (r(), t || 7 !== l) return null;
                        if (void 0 === n) {
                            var c = function e(t) {
                                return [500, 2e3][t] || -1
                            }(o);
                            return c > 0 ? (s(c), o += 1) : i(""), null
                        }
                        var d = n.linkPostPreview,
                            u = d.status,
                            m = d.preview;
                        switch (u) {
                            case "PROCESSING":
                                var p = function e(t) {
                                    return [200, 300, 700, 1500, 2500][t] || -1
                                }(o);
                                p > 0 ? (s(p), o += 1) : i(u);
                                break;
                            case "SUCCESS":
                                var v;
                                if (m.media && m.media[0]) switch (m.media[0].__typename) {
                                    case "Photo":
                                        v = m.media[0].photoSizes;
                                        break;
                                    case "LinkPreviewMedia":
                                        v = [{
                                            url: m.media[0].url,
                                            height: m.media[0].height,
                                            width: m.media[0].width
                                        }];
                                        break;
                                    default:
                                        v = void 0
                                }
                                var b = {
                                    id: m.id,
                                    title: m.title,
                                    description: m.description,
                                    url: m.canonicalUrl,
                                    urlDomain: m.urlDomain,
                                    mediaKeyId: m.mediaKeys.length ? m.mediaKeys[0].id : void 0,
                                    imgSource: v
                                };
                                a(b);
                                break;
                            default:
                                i(u)
                        }
                        return null
                    })
                },
                x = n("./packages/common/routing/routing.jsx"),
                P = function e() {
                    return m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostHeader__guidelinesContainer--2A9-m"
                    }, m.createElement("span", {
                        className: "public-content-uploader-link-uploader-LinkPostHeader__postLinkHeader--3vhov"
                    }, Object(k.localize)("link_uploader_header")), m.createElement("span", {
                        className: "public-content-uploader-link-uploader-LinkPostHeader__divider--1kkEu"
                    }, "|"), m.createElement(x.Link, {
                        target: "_blank",
                        href: "".concat(Object(k.localize)("mobile_help_center_url"), "/categories/200056887-Guidelines"),
                        className: "ui_link ".concat("public-content-uploader-link-uploader-LinkPostHeader__guidelinesLink--3CBca")
                    }, Object(k.localize)("link_uploader_guidelines")))
                },
                L = n("@ta/overlays.headers"),
                A = n("@ta/styleguide.icon"),
                R = function e() {
                    return m.createElement(L.TitleBar, {
                        displayType: "LEFT_ALIGN_GRAY"
                    }, m.createElement(A.Icon, {
                        name: "link",
                        className: "public-content-uploader-link-uploader-LinkPostModalHeader__icon--1mCU8"
                    }), m.createElement("span", {
                        className: "ui_header h3 ".concat("public-content-uploader-link-uploader-LinkPostModalHeader__headerText--2V6jF")
                    }, " ", Object(k.localize)("link_uploader_header")))
                },
                M = function e(t) {
                    return t.showMask ? m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostPreviewPanel__markOverlay--2xA4I",
                        onClick: t.maskOnClick
                    }, m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostPreviewPanel__content--1qnco"
                    }, t.children), m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostPreviewPanel__refresh--3HQE6"
                    }, m.createElement(A.Icon, {
                        name: "refresh"
                    }), m.createElement("span", {
                        className: "public-content-uploader-link-uploader-LinkPostPreviewPanel__refreshText--3qGa-"
                    }, Object(k.localize)("link_uploader_refresh")))) : t.children
                },
                D = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                z = n("@ta/social.common-popover"),
                B = n("./packages/common/features/features.jsx"),
                V = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "postLink"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "mediaKeyId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Long"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "comment"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "previewId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Long"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "locationIds"
                                }
                            },
                            type: {
                                kind: "ListType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "post"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "request"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "locationIds"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "locationIds"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "postRequest"
                                            },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [{
                                                    kind: "ObjectField",
                                                    name: {
                                                        kind: "Name",
                                                        value: "userId"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userId"
                                                        }
                                                    }
                                                }, {
                                                    kind: "ObjectField",
                                                    name: {
                                                        kind: "Name",
                                                        value: "mediaKeyId"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "mediaKeyId"
                                                        }
                                                    }
                                                }, {
                                                    kind: "ObjectField",
                                                    name: {
                                                        kind: "Name",
                                                        value: "comment"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "comment"
                                                        }
                                                    }
                                                }, {
                                                    kind: "ObjectField",
                                                    name: {
                                                        kind: "Name",
                                                        value: "previewId"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewId"
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 332
                    }
                };
            V.loc.source = {
                body: "81221f7a6260"
            };
            var U = V,
                W = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(u.a)(Object(d.a)(Object(d.a)(n)), "track", function(e, t, a) {
                            var i;
                            switch (n.props.page) {
                                case "Home":
                                    i = "home_content_uploaders";
                                    break;
                                case "Profile":
                                    i = "profile_content_uploaders";
                                    break;
                                default:
                                    i = "undefined"
                            }
                            var o = {
                                module: i,
                                action: e,
                                context: t,
                                value: a
                            };
                            Object.keys(o).forEach(function(e) {
                                return void 0 === o[e] && delete o[e]
                            }), S()(o)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "postOnClick", function(e) {
                            return function() {
                                if (!n.props.isDisabled) {
                                    if (n.track("post_click"), !n.props.postFormData.selectedLocations.size) return e(), void n.track("add_location_warning");
                                    n.doPost()
                                }
                            }
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "doPost", function() {
                            var e = {
                                previewId: n.props.linkPreview.id,
                                userId: n.props.userId,
                                mediaKeyId: n.props.linkPreview.mediaKeyId,
                                comment: n.props.postFormData.comment,
                                locationIds: Object(D.a)(n.props.postFormData.selectedLocations.keys())
                            };
                            n.props.postSubmissionCallback("uploading"), n.props.postApi(e, n.props.refetchQueries).then(function(e) {
                                n.props.postSubmissionCallback("success"), n.track("post_succeeded", e.data.post)
                            }).catch(function() {
                                n.props.postSubmissionCallback("error")
                            })
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this;
                            return m.createElement("div", {
                                className: b()("public-content-uploader-link-uploader-LinkPostSubmit__postButton--2sWid", Object(u.a)({}, "public-content-uploader-link-uploader-LinkPostSubmit__paddingForReference--2lSeG", Object(B.featureIsEnabled)("social_at_reference_ugc_editor")))
                            }, m.createElement(z.ConfirmationPopover, {
                                header: Object(k.localize)("post_video_didnt_tag_location"),
                                description: Object(k.localize)("post_video_tag_location_push_2"),
                                cancel: Object(k.localize)("link_uploader_locationwarning_addtagbutton"),
                                confirm: Object(k.localize)("link_uploader_postbutton_label"),
                                onConfirm: this.doPost,
                                onCancel: null,
                                above: !0,
                                alignEdge: "right",
                                shiftX: this.props.isMobile ? 0 : 24,
                                shiftY: this.props.isMobile ? 48 : 72,
                                fixed: !1
                            }, function(e, n) {
                                return m.createElement("span", {
                                    ref: e
                                }, m.createElement(O.a, {
                                    type: "primary",
                                    size: t.props.isMobile ? "fullwidth" : "default",
                                    disabled: t.props.isDisabled,
                                    onClick: t.postOnClick(n)
                                }, Object(k.localize)("link_uploader_postbutton_label")))
                            }))
                        }
                    }]), t
                }(m.Component),
                H = Object(C.graphql)(U, {
                    props: function e(t) {
                        var n = t.mutate;
                        return {
                            postApi: function e(t, a) {
                                return n({
                                    variables: t,
                                    refetchQueries: a
                                })
                            }
                        }
                    }
                })(W),
                q = Object(p.connect)(function(e) {
                    return {
                        page: e.route.page,
                        isMobile: "MOBILE" === e.meta.device.viewportCategory
                    }
                })(H),
                G = function e(t) {
                    return m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostSuccess__finishedPosting--2Ir10"
                    }, m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostSuccess__congrats--2p5VN"
                    }, Object(k.localize)("link_uploader_congrats_header")), m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostSuccess__linkPosted--1kOwG"
                    }, Object(k.localize)("link_uploader_congrats_description")), m.createElement("div", {
                        className: "public-content-uploader-link-uploader-LinkPostSuccess__postAnother--3cbJn"
                    }, m.createElement(O.a, {
                        type: "primary",
                        size: "fullwidth",
                        onClick: t.postAgainCallback
                    }, Object(k.localize)("link_uploader_congrats_postagainbutton"))), m.createElement("div", null, m.createElement("a", {
                        href: "/Profile"
                    }, m.createElement(O.a, {
                        type: "secondary",
                        size: "fullwidth"
                    }, Object(k.localize)("link_uploader_congrats_gotopost")))))
                },
                K = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "locationSelectionChanged", function(e) {
                            n.setState(function(t) {
                                return {
                                    postFormData: Object(i.a)({}, t.postFormData, {
                                        selectedLocations: e
                                    })
                                }
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "handleNextClicked", function() {
                            n.isNextButtonDisabled() || (n.setState({
                                errorMessage: void 0,
                                shouldGeneratePreview: !0,
                                isPreviewLoading: !0
                            }), n.track("next_click"))
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "handleRefreshClicked", function() {
                            n.setState({
                                errorMessage: void 0,
                                shouldGeneratePreview: !0,
                                isPreviewLoading: !0,
                                showRefreshOverlay: !1
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "handleUrlChange", function(e) {
                            n.setState({
                                inputUrl: e.target.value,
                                showRefreshOverlay: !0
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "linkPreviewSuccess", function(e) {
                            n.setState({
                                linkPreviewState: e,
                                initialPreviewDone: !0,
                                shouldGeneratePreview: !1,
                                isPreviewLoading: !1,
                                showRefreshOverlay: !1,
                                errorMessage: void 0
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "linkPreviewError", function(e) {
                            var t;
                            switch (e) {
                                case "BLACKLISTED":
                                    t = Object(k.localize)("link_inputfield_error_blacklist");
                                    break;
                                case "ERROR":
                                case "UNKNOWN":
                                case "MALFORMED":
                                default:
                                    t = Object(k.localize)("link_inputfield_error")
                            }
                            n.setState({
                                errorMessage: t,
                                shouldGeneratePreview: !1,
                                isPreviewLoading: !1,
                                initialPreviewDone: !0
                            }), "BLACKLISTED" === e && n.track("failed_moderation_error", n.state.inputUrl), "ERROR" !== e && "MALFORMED" !== e || n.track("invalid_url_error", n.state.inputUrl), "PROCESSING" === e && n.track("crawl_timeout_error", n.state.inputUrl)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "commentChanged", function(e) {
                            n.setState(function(t) {
                                return {
                                    postFormData: Object(i.a)({}, t.postFormData, {
                                        comment: e
                                    })
                                }
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "emptyState", function() {
                            var e = new Map;
                            if (n.props.locationId) {
                                var t = {
                                    type: "location_id",
                                    value: "".concat(n.props.locationId)
                                };
                                e.set("".concat(n.props.locationId), t)
                            }
                            return {
                                inputUrl: "",
                                isPreviewLoading: !1,
                                shouldGeneratePreview: !1,
                                initialPreviewDone: !1,
                                showRefreshOverlay: !1,
                                showLocationWarning: !1,
                                postStatus: null,
                                postFormData: {
                                    comment: "",
                                    selectedLocations: e
                                },
                                linkPreviewState: void 0
                            }
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "track", function(e, t, a) {
                            var i;
                            switch (n.props.page) {
                                case "Home":
                                    i = "home_content_uploaders";
                                    break;
                                case "Profile":
                                    i = "profile_content_uploaders";
                                    break;
                                default:
                                    i = "undefined"
                            }
                            var o = {
                                module: i,
                                action: e,
                                context: t,
                                value: a
                            };
                            Object.keys(o).forEach(function(e) {
                                return void 0 === o[e] && delete o[e]
                            }), S()(o)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "handleComponentOpened", function() {
                            n.setState({
                                postStatus: "ready"
                            }), n.track("post_link_click")
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "handleComponentClosed", function() {
                            "success" !== n.state.postStatus && n.track("exit_click")
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "postSubmissionCallback", function(e) {
                            if ("success" === e) {
                                var t = n.props.displaySuccessModal ? {
                                    postStatus: e
                                } : n.emptyState();
                                n.setState(t, function() {
                                    n.props.displaySuccessModal || (n.props.hideOverlay(), n.props.onSubmit && n.props.onSubmit(), n.props.launchToast({
                                        node: Object(k.localize)("success_repost_link")
                                    }))
                                })
                            } else n.setState({
                                postStatus: e
                            }), "error" === e && n.track("post_failed_error")
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "postAgain", function() {
                            return n.setState(n.emptyState())
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "nextEnterPressed", function(e) {
                            13 !== e.keyCode || n.isNextButtonDisabled() || n.handleNextClicked()
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "isNextButtonDisabled", function() {
                            return void 0 === n.state.inputUrl || 0 === n.state.inputUrl.length
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "isPostButtonDisabled", function() {
                            return n.state.isPreviewLoading || void 0 !== n.state.errorMessage
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "isPostSubmitted", function() {
                            return "success" === n.state.postStatus
                        }), n.state = n.emptyState(), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = !this.isPostSubmitted(),
                                n = this.state.initialPreviewDone || this.state.isPreviewLoading ? null : m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__button--3EHQV"
                                }, m.createElement(O.a, {
                                    type: "primary",
                                    disabled: this.isNextButtonDisabled(),
                                    onClick: this.handleNextClicked,
                                    size: this.props.isMobile ? "fullwidth" : "default"
                                }, Object(k.localize)("link_uploader_nextbutton"))),
                                a = !n && this.state.linkPreviewState && "uploading" !== this.state.postStatus ? m.createElement(q, {
                                    userId: this.props.loggedInUserId,
                                    linkPreview: this.state.linkPreviewState,
                                    postFormData: this.state.postFormData,
                                    isDisabled: this.isPostButtonDisabled(),
                                    postSubmissionCallback: this.postSubmissionCallback,
                                    refetchQueries: this.props.refetchQueries
                                }) : null,
                                i = "uploading" === this.state.postStatus ? m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__postButton--2t9Rp"
                                }, m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__loaderContainer--3jjxT"
                                }, m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__loaderCenter--1CcsZ"
                                }, m.createElement(_.LoadingBubbles, {
                                    color: "dark"
                                })))) : null,
                                o = this.state.isPreviewLoading ? m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__previewPlaceholder--gUQGJ"
                                }, m.createElement(_.LoadingBubbles, {
                                    size: "large",
                                    color: "light"
                                })) : null,
                                r = this.state.errorMessage ? m.createElement(M, {
                                    maskOnClick: this.handleRefreshClicked,
                                    showMask: this.state.showRefreshOverlay
                                }, m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__previewPlaceholder--gUQGJ"
                                }, m.createElement("div", {
                                    className: "public-content-uploader-link-uploader-LinkPostUploader__errorMessage--3ZbDq"
                                }, this.state.errorMessage))) : null,
                                s = r || !this.state.linkPreviewState || this.state.shouldGeneratePreview ? null : m.createElement(M, {
                                    maskOnClick: this.handleRefreshClicked,
                                    showMask: this.state.showRefreshOverlay
                                }, m.createElement(y.LinkPreview, {
                                    linkPreviewState: this.state.linkPreviewState
                                })),
                                l = this.state.shouldGeneratePreview ? m.createElement(w, {
                                    url: this.state.inputUrl,
                                    handleSuccess: this.linkPreviewSuccess,
                                    handleError: this.linkPreviewError
                                }) : null,
                                c = this.state.initialPreviewDone ? m.createElement(I.a, {
                                    handleLocationSelectionChange: this.locationSelectionChanged,
                                    handleCommentChange: this.commentChanged,
                                    originalFormData: {
                                        comment: this.state.postFormData.comment,
                                        selectedLocations: this.state.postFormData.selectedLocations
                                    }
                                }) : null;
                            return m.createElement(g.Modal, {
                                name: this.props.modalName,
                                header: this.isPostSubmitted() ? null : m.createElement(R, null)
                            }, m.createElement("div", {
                                className: b()(Object(u.a)({
                                    hidden: !t
                                }, "public-content-uploader-link-uploader-LinkPostUploader__uploading--1ePjz", "uploading" === this.state.postStatus))
                            }, m.createElement("div", {
                                className: "public-content-uploader-link-uploader-LinkPostUploader__editorWrapper--2fOwg"
                            }, m.createElement(P, null), m.createElement(m.Fragment, null, m.createElement("span", {
                                className: "public-content-uploader-link-uploader-LinkPostUploader__urlInputLabel--qzNIw"
                            }, Object(k.localize)("link_inputfield_label")), " ", Object(k.localize)("post_video_required_fields_text")), m.createElement(m.Fragment, null, m.createElement("input", {
                                name: "url",
                                type: "text",
                                value: this.state.inputUrl,
                                onChange: this.handleUrlChange,
                                onKeyUp: this.nextEnterPressed,
                                className: "ui_input_text ".concat(r ? "public-content-uploader-link-uploader-LinkPostUploader__urlInputError--1x5a8" : "public-content-uploader-link-uploader-LinkPostUploader__urlInput--3Gouz")
                            })), n, l, o, s, r), c, a, i), m.createElement("div", {
                                className: this.props.displaySuccessModal && this.isPostSubmitted() ? null : "hidden"
                            }, m.createElement(G, {
                                postAgainCallback: this.postAgain
                            })), m.createElement(f.MountListener, {
                                onComponentDidMount: this.handleComponentOpened,
                                onComponentWillUnmount: this.handleComponentClosed
                            }))
                        }
                    }]), t
                }(m.Component);
            Object(u.a)(K, "defaultProps", {
                displaySuccessModal: !0
            });
            var Q = Object(p.connect)(function(e, t) {
                return Object(i.a)({
                    page: e.route.page,
                    isMobile: "MOBILE" === e.meta.device.viewportCategory,
                    loggedInUserId: e.auth.loggedInUserId
                }, t)
            }, {
                hideOverlay: function e() {
                    return h.actions.overlays.showGlobalOverlay(null)
                }
            })(function e(t) {
                return m.createElement(E.Toaster, null, function(e) {
                    return m.createElement(K, Object(a.a)({
                        launchToast: e
                    }, t))
                })
            });
            t.a = Q
        },
        "./packages/public/share-cta/ShareCta.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/classnames/classnames.jsx"),
                o = n.n(i),
                r = n("./packages/common/features/features.jsx"),
                s = n("@ta/styleguide.icon"),
                l = n("./packages/common/i18n/i18n.jsx"),
                c = n("@ta/tracking.interactions"),
                d = n("./packages/public/share-cta/ShareTracker.jsx"),
                u = n("./packages/public/share-cta/SharePopover.jsx");
            n.d(t, "a", function() {
                return m
            }), n.d(t, "b", function() {
                return p
            });
            var m = function e(t) {
                var n = t.url,
                    i = t.itemType,
                    o = t.itemId,
                    r = t.styleAsSocialAction,
                    s = t.headerComponent,
                    l = t.onClick,
                    m = t.alignEdge;
                return a.createElement("div", null, a.createElement(u.b, {
                    url: n,
                    itemType: i,
                    itemId: o,
                    shiftX: 6,
                    shiftY: 4,
                    headerComponent: s,
                    alignEdge: m
                }, function(e, t) {
                    return a.createElement(d.a, {
                        itemType: i,
                        itemId: o,
                        url: n,
                        action: "share_button_click"
                    }, function() {
                        return a.createElement(c.InteractionLogger, null, function(n) {
                            return a.createElement(p, {
                                onClick: function e(a) {
                                    l && l(a), n(a, "share"), t()
                                },
                                target: e,
                                styleAsSocialAction: r
                            })
                        })
                    })
                }))
            };
            m.defaultProps = {
                styleAsSocialAction: !1,
                headerComponent: null,
                onClick: void 0
            };
            var p = function e(t) {
                var n = t.onClick,
                    i = t.target,
                    c = t.styleAsSocialAction;
                return a.createElement("div", {
                    onClick: n,
                    className: o()(c ? "public-share-cta-ShareCta__social_action--2yJtr" : "public-share-cta-ShareCta__cta--2Xq6G", Object(r.featureIsEnabled)("hr_dark_green_icons") ? "public-share-cta-ShareCta__dark_icons--3I87q" : "")
                }, a.createElement("span", {
                    ref: i
                }, a.createElement(s.Icon, {
                    name: "repost-fill",
                    className: c ? "public-share-cta-ShareCta__icon--1Bvb0" : "public-share-cta-ShareCta__cta_icon--3qgo_"
                }), a.createElement("span", {
                    className: c ? o()("ui_link", "public-share-cta-ShareCta__text--1tWKH", "socialCTA") : "public-share-cta-ShareCta__cta_text--38gVh"
                }, Object(l.localize)("link_share_share"), " ")))
            };
            p.defaultProps = {
                styleAsSocialAction: !1,
                target: null
            }
        },
        "./packages/public/share-cta/SharePopover.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./node_modules/react-redux/es/index.js"),
                r = n("./packages/common/features/features.jsx"),
                s = n("./packages/common/classnames/classnames.jsx"),
                l = n.n(s),
                c = n("@ta/overlays.popover"),
                d = n.n(c),
                u = n("./packages/public/share-cta/ShareTracker.jsx"),
                m = n("./packages/common/i18n/i18n.jsx"),
                p = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                v = n("@ta/styleguide.icon"),
                b = function e(t) {
                    var n, a, o, r = t.iconName,
                        s = t.localizedText,
                        c = t.onClickFunction,
                        d = t.imgCdnUrl,
                        u = t.size;
                    return i.createElement("li", {
                        onClick: c,
                        className: l()("ui_link", "public-share-cta-ListItem__listItem--3ISth", (n = {}, Object(p.a)(n, "public-share-cta-ListItem__small--37OPx", "small" === u), Object(p.a)(n, "public-share-cta-ListItem__large--LaLAA", "large" === u), n))
                    }, r.startsWith("/") ? i.createElement("img", {
                        src: "".concat(d).concat(r),
                        className: l()("public-share-cta-ListItem__img--xCvMj", (a = {}, Object(p.a)(a, "public-share-cta-ListItem__small--37OPx", "small" === u), Object(p.a)(a, "public-share-cta-ListItem__large--LaLAA", "large" === u), a))
                    }) : i.createElement(v.Icon, {
                        name: r,
                        className: l()("public-share-cta-ListItem__icon--YWVUF", (o = {}, Object(p.a)(o, "public-share-cta-ListItem__small--37OPx", "small" === u), Object(p.a)(o, "public-share-cta-ListItem__large--LaLAA", "large" === u), o))
                    }), i.createElement("span", null, s))
                };
            b.defaultProps = {
                onClickFunction: function e() {
                    return !1
                }
            };
            var f = Object(o.connect)(function(e) {
                    return {
                        imgCdnUrl: e.meta.imageCdnUrl
                    }
                })(b),
                k = function e(t) {
                    var n, a = t.url,
                        o = t.itemType,
                        r = t.size;
                    return n = "LinkPost" === o ? Object(m.localize)("share_sms_link") : "ReadTrip" === o ? Object(m.localize)("trips_share_email_subject") : "WriteTrip" === o ? Object(m.localize)("trips_collaborate_invite_email_subject") : Object(m.localize)("link_share_sms_checkthisout"), i.createElement(f, {
                        iconName: "text-message-fill",
                        localizedText: Object(m.localize)("link_share_option_sms"),
                        size: r,
                        onClickFunction: function e() {
                            return function e(t, n) {
                                var a = "".concat(n, " ").concat(t);
                                a.length > 140 && (a = t), window.location.href = "sms:?&body=".concat(encodeURIComponent(a))
                            }(a, n)
                        }
                    })
                },
                g = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                h = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                _ = n("./packages/trips/trip-util/trip-util.jsx"),
                j = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "PoiDetails"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "locationId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "locations"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "locationIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "locationId"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 95
                    }
                };
            j.loc.source = {
                body: "cd864acb4d54"
            };
            var S = j,
                y = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "ReviewDetails"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "reviewId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reviews"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reviewIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "reviewId"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 91
                    }
                };
            y.loc.source = {
                body: "ede4e30b387b"
            };
            var N = y,
                O = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "PhotoDetails"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "photoIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 78
                    }
                };
            O.loc.source = {
                body: "9a91e6db74b1"
            };
            var E = O,
                I = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "VideoDetails"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "videoIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 78
                    }
                };
            I.loc.source = {
                body: "2d20581296d0"
            };
            var C = I,
                F = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "TripDetails"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "trips"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tripIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "owner"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMe"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 109
                    }
                };
            F.loc.source = {
                body: "a926d0b00948"
            };
            var T = F,
                w = ["Restaurant_Review", "Attraction_Review", "MobileAttraction_Review", "AttractionProductDetail", "MobileAttractionProductDetail", "Hotel_Review", "MobileHotel_Review"],
                x = function e(t) {
                    var n = t.url,
                        a = t.subject,
                        o = t.firstSentence,
                        r = t.textBeforeLink,
                        s = t.textAfterLink,
                        l = t.size;
                    return i.createElement(f, {
                        iconName: "email-fill",
                        localizedText: Object(m.localize)("link_share_option_email"),
                        size: l,
                        onClickFunction: function e() {
                            return function e(t, n, a, i, o) {
                                var r = encodeURIComponent(t),
                                    s = encodeURIComponent(i),
                                    l = encodeURIComponent(o),
                                    c = encodeURIComponent(n || Object(m.localize)("share_email_subject")),
                                    d = a || Object(m.localize)("link_share_sms_checkthisout"),
                                    u = "".concat(d, "%0D%0A%0D%0A").concat(s ? "".concat(s, "%0D%0A") : "").concat(r, "%0D%0A").concat(l ? "".concat(l, "%0D%0A") : "", "%0D%0A").concat(Object(m.localize)("ib_share_booking_download_app"), "%0D%0A").concat(Object(m.localize)("app_download_url"));
                                window.location.href = "mailto:".concat("", "?subject=").concat(c, "&body=").concat(u)
                            }(n, a, o, r, s)
                        }
                    })
                };
            x.defaultProps = {
                firstSentence: "",
                subject: "",
                textBeforeLink: "",
                textAfterLink: ""
            };
            var P = function e(t) {
                    if (w.indexOf(t.itemType) > -1) return i.createElement(h.Query, {
                        query: S,
                        variables: {
                            locationId: t.itemId
                        }
                    }, function(e) {
                        var n = e.loading,
                            a = e.data;
                        if (n) return i.createElement(x, t);
                        var o = a.locations[0] && a.locations[0].name || "";
                        return i.createElement(x, Object(g.a)({}, t, {
                            subject: Object(m.localize)("link_share_email_subject", {
                                0: o
                            }),
                            firstSentence: Object(m.localize)("mobile_here_is_a_place_i_found_8e0"),
                            textBeforeLink: o
                        }))
                    });
                    if ("Review" === t.itemType) return i.createElement(h.Query, {
                        query: N,
                        variables: {
                            reviewId: t.itemId
                        }
                    }, function(e) {
                        var n = e.loading,
                            a = e.data;
                        return n ? i.createElement(x, t) : i.createElement(x, Object(g.a)({}, t, {
                            firstSentence: Object(m.localize)("share_email_reviews"),
                            textBeforeLink: a.reviews[0] && a.reviews[0].title || ""
                        }))
                    });
                    if ("Photo" === t.itemType) return i.createElement(h.Query, {
                        query: E,
                        variables: {
                            id: t.itemId
                        }
                    }, function(e) {
                        var n = e.loading,
                            a = e.data;
                        return n ? i.createElement(x, t) : i.createElement(x, Object(g.a)({}, t, {
                            firstSentence: Object(m.localize)("share_email_photos"),
                            textBeforeLink: a.photos[0] && a.photos[0].caption || ""
                        }))
                    });
                    if ("Video" === t.itemType) return i.createElement(h.Query, {
                        query: C,
                        variables: {
                            id: t.itemId
                        }
                    }, function(e) {
                        var n = e.loading,
                            a = e.data;
                        return n ? i.createElement(x, t) : i.createElement(x, Object(g.a)({}, t, {
                            firstSentence: Object(m.localize)("share_email_videos"),
                            textBeforeLink: a.videos[0] && a.videos[0].caption || ""
                        }))
                    });
                    if ("LinkPost" === t.itemType) return i.createElement(x, Object(g.a)({}, t, {
                        subject: Object(m.localize)("share_email_link_subject"),
                        firstSentence: Object(m.localize)("share_email_link"),
                        textAfterLink: Object(m.localize)("share_email_link_attribution")
                    }));
                    if ("ForumPost" === t.itemType) return i.createElement(x, Object(g.a)({}, t, {
                        firstSentence: Object(m.localize)("share_email_forumtopic")
                    }));
                    if ("ForumResponse" === t.itemType) return i.createElement(x, Object(g.a)({}, t, {
                        firstSentence: Object(m.localize)("share_email_forumreply")
                    }));
                    if ("WriteTrip" === t.itemType || "ReadTrip" === t.itemType) {
                        var n = "WriteTrip" === t.itemType;
                        return i.createElement(h.Query, {
                            query: T,
                            variables: {
                                id: t.itemId
                            }
                        }, function(e) {
                            var a = e.loading,
                                o = e.data,
                                r = t;
                            if (!a && o) {
                                var s = o.trips && o.trips.find(function(e) {
                                        return e.id === t.itemId
                                    }),
                                    l = {
                                        tripName: s && s.title || ""
                                    },
                                    c = Object(_.l)(s);
                                r = Object.assign({}, t, {
                                    firstSentence: Object(m.localize)("trips_share_email_hey"),
                                    subject: Object(m.localize)("trips_share_email_subject"),
                                    textBeforeLink: Object(m.localize)("trips_share_email_body_v2", l)
                                }), n ? (r.subject = Object(m.localize)("trips_collaborate_invite_email_subject"), r.textBeforeLink = c ? Object(m.localize)("trips_collaborate_invite_email_body_v2", l) : Object(m.localize)("trips_collaborate_invite_email_body_collaborator_version", l)) : c || (r.subject = Object(m.localize)("trips_share_email_subject"), r.textBeforeLink = Object(m.localize)("trips_email_share_collaborator_version", l))
                            }
                            return i.createElement(x, r)
                        })
                    }
                    return i.createElement(x, t)
                },
                L = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                A = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                R = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                M = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                D = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                z = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                B = n("@ta/overlays.managers"),
                V = {
                    copy: function e(t) {
                        var n, a = !1,
                            i = document.body,
                            o = document.getSelection();
                        try {
                            if (i && o) {
                                var r = document.createRange();
                                (n = document.createElement("span")).textContent = t, i.appendChild(n), r.selectNode(n), o.removeAllRanges(), o.addRange(r), a = document.execCommand("copy")
                            }
                        } finally {
                            o && o.removeAllRanges(), n && i && i.removeChild(n)
                        }
                        return a
                    }
                },
                U = function(e) {
                    function t() {
                        var e, n;
                        Object(L.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), o = 0; o < a; o++) i[o] = arguments[o];
                        return n = Object(R.a)(this, (e = Object(M.a)(t)).call.apply(e, [this].concat(i))), Object(p.a)(Object(z.a)(Object(z.a)(n)), "state", {
                            copied: !1
                        }), Object(p.a)(Object(z.a)(Object(z.a)(n)), "copyAndClose", function(e, t) {
                            var a = V.copy(e);
                            return a && (n.setState({
                                copied: !0
                            }), setTimeout(function() {
                                return t()
                            }, 3e3)), a
                        }), n
                    }
                    return Object(D.a)(t, e), Object(A.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this;
                            return i.createElement(B.Closer, null, function(e) {
                                return i.createElement(f, {
                                    iconName: "link",
                                    size: t.props.size,
                                    localizedText: t.state.copied ? Object(m.localize)("link_share_link_copied") : Object(m.localize)("link_share_option_clipboard"),
                                    onClickFunction: t.state.copied ? void 0 : function() {
                                        return t.copyAndClose(t.props.url, e)
                                    }
                                })
                            })
                        }
                    }]), t
                }(i.Component);
            n.d(t, "b", function() {
                return H
            }), n.d(t, "a", function() {
                return W
            });
            var W = Object(o.connect)(function(e, t) {
                    return Object(a.a)({}, t, {
                        url: t.url.startsWith("/") ? e.meta.baseUrl + t.url : t.url,
                        viewportCategory: e.meta.device.viewportCategory
                    })
                })(function e(t) {
                    var n = t.url,
                        a = t.itemType,
                        o = t.itemId,
                        s = t.viewportCategory,
                        c = t.headerComponent;
                    return i.createElement("div", {
                        className: l()("public-share-cta-SharePopover__container--2A2cD", Object(r.featureIsEnabled)("hr_dark_green_icons") ? "public-share-cta-SharePopover__dark_icons--3q5Bk" : "")
                    }, c, "MOBILE" === s && i.createElement(u.a, {
                        action: "share_select",
                        itemType: a,
                        itemId: o,
                        url: n,
                        type: "sms"
                    }, function(e) {
                        return i.createElement(k, {
                            url: e,
                            itemType: a,
                            size: "small"
                        })
                    }), i.createElement(u.a, {
                        url: n,
                        itemType: a,
                        itemId: o,
                        action: "share_select",
                        type: "email"
                    }, function(e) {
                        return i.createElement(P, {
                            url: e,
                            itemType: a,
                            itemId: Number(o),
                            size: "small"
                        })
                    }), i.createElement(u.a, {
                        action: "share_select",
                        itemType: a,
                        itemId: o,
                        url: n,
                        type: "clipboard"
                    }, function(e) {
                        return i.createElement(U, {
                            url: e,
                            size: "small"
                        })
                    }))
                }),
                H = function e(t) {
                    var n = t.fixed,
                        a = t.url,
                        o = t.itemType,
                        r = t.itemId,
                        s = t.shiftX,
                        l = t.shiftY,
                        c = t.children,
                        u = t.headerComponent,
                        m = t.alignEdge;
                    return i.createElement(d.a, {
                        local: !0,
                        closeButton: !1,
                        fixed: n,
                        below: !0,
                        alignEdge: m,
                        shiftX: s,
                        shiftY: l,
                        shiftArrow: s,
                        arrowType: "small",
                        contents: function e() {
                            return i.createElement(W, {
                                url: a,
                                itemType: o,
                                itemId: r,
                                headerComponent: u
                            })
                        }
                    }, c)
                };
            H.defaultProps = {
                fixed: !1,
                shiftX: 0,
                shiftY: 0,
                headerComponent: null,
                alignEdge: "right"
            }
        },
        "./packages/public/share-cta/ShareTracker.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./node_modules/react-redux/es/index.js"),
                o = n("./packages/common/tracking/tracking.jsx"),
                r = {
                    sms: 19907,
                    email: 55593,
                    clipboard: 19905
                },
                s = function e(t) {
                    var n = t.url,
                        i = t.itemType,
                        s = t.itemId,
                        l = t.action,
                        c = t.type,
                        d = t.children,
                        u = "".concat(i, "|").concat(s, "|").concat(n);
                    return a.createElement(o.ClickTracker, {
                        useSpan: !0,
                        module: "ShareCta",
                        action: l,
                        context: u,
                        once: !1,
                        value: c ? r[c] : void 0
                    }, d(c ? function e(t) {
                        if ("LinkPost" === i) return n;
                        var a = -1 !== n.indexOf("?"),
                            o = -1 !== n.indexOf("#"),
                            r = "".concat(a ? "&" : "?", "m=").concat(t);
                        return o ? n.replace("#", "".concat(r, "#")) : "".concat(n).concat(r)
                    }(r[c]) : n))
                };
            s.defaultProps = {
                type: null
            }, t.a = Object(i.connect)(function(e, t) {
                return {
                    url: t.url.startsWith("/") ? e.meta.baseUrl + t.url : t.url
                }
            })(s)
        },
        "./packages/search/tracking/SearchRecordTracker.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("./packages/common/tracking/tracking.jsx"),
                p = function(e) {
                    function t() {
                        var e, n;
                        Object(i.a)(this, t);
                        for (var a = arguments.length, o = new Array(a), l = 0; l < a; l++) o[l] = arguments[l];
                        return n = Object(r.a)(this, (e = Object(s.a)(t)).call.apply(e, [this].concat(o))), Object(d.a)(Object(c.a)(Object(c.a)(n)), "state", {
                            clicked: !1
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "getSearchRecordPayload", function(e) {
                            return new URLSearchParams(JSON.parse(JSON.stringify(e)))
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "click", function() {
                            n.state.clicked || (n.sendSearchRecordRequest(), n.setState({
                                clicked: !0
                            }))
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "sendSearchRecordRequest", function() {
                            n.props.url && n.props.searchRecordData && fetch(n.props.url, {
                                method: "POST",
                                body: n.getSearchRecordPayload(n.props.searchRecordData),
                                credentials: "same-origin"
                            })
                        }), n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "render",
                        value: function e() {
                            return u.createElement("span", {
                                onClick: this.click
                            }, u.createElement(m.ClickTracker, Object(a.a)({}, this.props, {
                                forceAjax: !0
                            }), this.props.children))
                        }
                    }]), t
                }(u.Component);
            Object(d.a)(p, "defaultProps", {
                once: !0,
                url: "/SearchRecord"
            }), t.a = p
        },
        "./packages/social/actions/BoostAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                p = n("./node_modules/react-redux/es/index.js"),
                v = n("./packages/common/i18n/i18n.jsx"),
                b = n("@ta/styleguide.icon"),
                f = n("@ta/social.feed"),
                k = n("./packages/common/classnames/classnames.jsx"),
                g = n.n(k),
                h = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "AddBoost"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectType"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SocialObjectTypeInput"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "addBoost"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "socialObject"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectType"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectType"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectId"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectId"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 152
                    }
                };
            h.loc.source = {
                body: "768041708b2e"
            };
            var _ = h,
                j = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "DeleteBoost"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectType"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SocialObjectTypeInput"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "deleteBoost"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "socialObject"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectType"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectType"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectId"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectId"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 158
                    }
                };
            j.loc.source = {
                body: "74f8ce5e608d"
            };
            var S = j,
                y = n("./packages/social/actions/SocialAction.less"),
                N = function(e) {
                    function t() {
                        var e, n;
                        Object(i.a)(this, t);
                        for (var a = arguments.length, o = new Array(a), l = 0; l < a; l++) o[l] = arguments[l];
                        return n = Object(r.a)(this, (e = Object(s.a)(t)).call.apply(e, [this].concat(o))), Object(d.a)(Object(c.a)(Object(c.a)(n)), "memberGeneratedAction", function() {
                            return n.isActive() ? n.props.unboost({
                                socialObjectRef: n.props.socialObjectRef,
                                __typename: n.props.typename,
                                socialStatistics: n.props.socialStatistics
                            }) : n.props.boost({
                                socialObjectRef: n.props.socialObjectRef,
                                __typename: n.props.typename,
                                socialStatistics: n.props.socialStatistics
                            })
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "isActive", function() {
                            return n.props.socialStatistics && n.props.socialStatistics.isBoosted
                        }), n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "render",
                        value: function e() {
                            return u.createElement("span", {
                                className: g()(y.a.social_action, Object(d.a)({}, y.a.active, this.isActive())),
                                onClick: this.memberGeneratedAction
                            }, u.createElement(b.Icon, {
                                name: "instant",
                                className: y.a.icon
                            }), u.createElement("span", {
                                className: "ui_link ".concat(y.a.text, " socialCTA")
                            }, this.isActive() ? Object(v.localize)("boosted_social") : Object(v.localize)("boost_social")))
                        }
                    }]), t
                }(u.Component),
                O = Object(m.compose)(Object(p.connect)(function(e) {
                    return {
                        loggedInUserId: e.auth.loggedInUserId
                    }
                }), Object(m.graphql)(_, {
                    props: function e(t) {
                        var n = t.mutate;
                        return {
                            boost: function e(t) {
                                var i = t.socialObjectRef,
                                    o = t.socialStatistics,
                                    r = t.__typename;
                                return n({
                                    variables: {
                                        objectType: i.type,
                                        objectId: i.id
                                    },
                                    update: function e(t) {
                                        var n, s = (o || {}).boostCount,
                                            l = void 0 === s ? 0 : s,
                                            c = "LinkPost" === i.type ? "postId" : "Repost" === i.type ? "repostId" : "id";
                                        t.writeFragment({
                                            id: "".concat(r, ":").concat(i.id),
                                            fragment: f.FeedObjectStatisticFieldsFragment,
                                            fragmentName: "FeedObjectStatisticFields",
                                            data: (n = {
                                                __typename: r
                                            }, Object(d.a)(n, c, i.id), Object(d.a)(n, "socialStatistics", Object(a.a)({}, o, {
                                                isBoosted: !0,
                                                boostCount: l + 1,
                                                __typename: "SocialStatistics"
                                            })), n)
                                        })
                                    }
                                })
                            }
                        }
                    }
                }), Object(m.graphql)(S, {
                    props: function e(t) {
                        var n = t.mutate;
                        return {
                            unboost: function e(t) {
                                var i = t.socialObjectRef,
                                    o = t.socialStatistics,
                                    r = t.__typename;
                                return n({
                                    variables: {
                                        objectType: i.type,
                                        objectId: i.id
                                    },
                                    update: function e(t) {
                                        var n, s = (o || {}).boostCount,
                                            l = void 0 === s ? 1 : s,
                                            c = "LinkPost" === i.type ? "postId" : "Repost" === i.type ? "repostId" : "id";
                                        t.writeFragment({
                                            id: "".concat(r, ":").concat(i.id),
                                            fragment: f.FeedObjectStatisticFieldsFragment,
                                            fragmentName: "FeedObjectStatisticFields",
                                            data: (n = {
                                                __typename: r
                                            }, Object(d.a)(n, c, i.id), Object(d.a)(n, "socialStatistics", Object(a.a)({}, o, {
                                                isBoosted: !1,
                                                boostCount: l - 1,
                                                __typename: "SocialStatistics"
                                            })), n)
                                        })
                                    }
                                })
                            }
                        }
                    }
                }))(N);
            t.a = O
        },
        "./packages/social/actions/DisabledSocialAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./node_modules/react-redux/es/index.js"),
                m = n("./packages/common/i18n/i18n.jsx"),
                p = n("@ta/overlays.popover"),
                v = n.n(p),
                b = n("@ta/styleguide.icon"),
                f = n("./packages/common/tracking/tracking.jsx"),
                k = n("@ta/tracking.interactions"),
                g = n("./packages/social/actions/SocialAction.less"),
                h = function(e) {
                    function t(e) {
                        var n;
                        return Object(a.a)(this, t), n = Object(o.a)(this, Object(r.a)(t).call(this, e)), Object(c.a)(Object(l.a)(Object(l.a)(n)), "setTracking", function(e, t) {
                            n.state.tracked || (Object(f.trackClick)(e, {
                                module: "".concat(t, "Action_Disabled"),
                                action: "CLICK"
                            }), n.setState({
                                tracked: !0
                            }))
                        }), n.state = {
                            tracked: !1
                        }, n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t, n, a, i = this;
                            switch (this.props.actionType) {
                                case "Save":
                                    t = "bookmark-fill", n = Object(m.localize)("social_Save"), a = "save";
                                    break;
                                case "Share":
                                    t = "repost-fill", n = Object(m.localize)("link_share_share"), a = "share"
                            }
                            var o = "MOBILE" === this.props.viewportCategory,
                                r = o ? "right" : "left",
                                s = o ? 12 : -28,
                                l = o ? 8 : 12;
                            return d.createElement(v.a, {
                                above: !0,
                                alignEdge: r,
                                shiftX: s,
                                shiftY: -8,
                                shiftArrow: l,
                                arrowType: "small",
                                contents: function e() {
                                    return d.createElement("span", {
                                        className: "social-actions-DisabledSocialAction__body_text--3ZAdS"
                                    }, Object(m.localize)("social_Coming_soon"))
                                },
                                local: !0
                            }, function(e, o) {
                                return d.createElement(k.InteractionLogger, null, function(r) {
                                    return d.createElement("span", {
                                        className: g.a.social_action,
                                        ref: e,
                                        onClick: function e(t) {
                                            r(t, a), o(), i.setTracking(t, n)
                                        }
                                    }, d.createElement(b.Icon, {
                                        name: t,
                                        className: g.a.icon
                                    }), d.createElement("span", {
                                        className: "ui_link ".concat(g.a.text, " socialCTA")
                                    }, n))
                                })
                            })
                        }
                    }]), t
                }(d.Component);
            t.a = Object(u.connect)(function(e) {
                return {
                    viewportCategory: e.meta.device.viewportCategory
                }
            })(h)
        },
        "./packages/social/actions/LikeAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                m = n("./node_modules/react/index.js"),
                p = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                v = n("./node_modules/react-redux/es/index.js"),
                b = n("./packages/common/features/features.jsx"),
                f = n("./packages/common/i18n/i18n.jsx"),
                k = n("@ta/styleguide.icon"),
                g = n("@ta/overlays.toast"),
                h = n("@ta/social.feed"),
                _ = n("@ta/social.login-gate"),
                j = n("@ta/tracking.interactions"),
                S = n("@ta/social.blocks"),
                y = n("@ta/common.webview"),
                N = n("@ta/social.onboarding-state"),
                O = n("./packages/common/global/global.jsx"),
                E = n("./packages/social/actions/SocialAction.less"),
                I = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "AddLike"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectType"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SocialObjectTypeInput"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "addLike"
                                },
                                name: {
                                    kind: "Name",
                                    value: "addLikeV2"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "socialObject"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectType"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectType"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectId"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectId"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "statusType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 182
                    }
                };
            I.loc.source = {
                body: "3a19c224fff8"
            };
            var C = I,
                F = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "DeleteLike"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "objectType"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SocialObjectTypeInput"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "deleteLike"
                                },
                                name: {
                                    kind: "Name",
                                    value: "deleteLikeV2"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "socialObject"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectType"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectType"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "objectId"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "objectId"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "statusType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 191
                    }
                };
            F.loc.source = {
                body: "fd777476a1ee"
            };
            var T = F,
                w = new Set(["Review", "Photo", "Video"]),
                x = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, r = new Array(a), c = 0; c < a; c++) r[c] = arguments[c];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(r))), Object(u.a)(Object(d.a)(Object(d.a)(n)), "addLike", function(e) {
                            var t = n.props.item;
                            return w.has(t.__typename) && n.legacyVote(), n.props.addLike(Object(i.a)({}, e, {
                                __typename: t.__typename,
                                socialStatistics: t.socialStatistics,
                                updateFragment: n.props.updateFragment,
                                updateFragmentName: n.props.updateFragmentName
                            }))
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "legacyVote", function() {
                            var e, t, a = n.props.item;
                            "Review" === a.__typename ? e = "/RateUserReview?src=".concat(encodeURIComponent(a.id), "&geo=").concat(encodeURIComponent(a.location.parent.parentGeoId), "&uid=").concat(encodeURIComponent(a.userId), "&rateValue=1&token=").concat(encodeURIComponent(n.props.csrfToken)) : (t = "Video" === a.__typename ? a.orderedLocations.length > 0 && a.orderedLocations[0] ? a.orderedLocations[0].locationId : "" : a.location.locationId, e = "/VideoController?a=vt&ff=".concat(encodeURIComponent(a.id), "&vote=5&detail=").concat(encodeURIComponent(t), "&token=").concat(encodeURIComponent(n.props.csrfToken))), fetch(e, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                credentials: "same-origin"
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "isActive", function() {
                            return n.props.item && n.props.item.socialStatistics && n.props.item.socialStatistics.isLiked
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "memberGeneratedAction", function() {
                            var e = n.props.socialObject ? n.props.socialObject : {
                                objectType: n.props.item.__typename.toUpperCase(),
                                objectId: n.props.item.id
                            };
                            return n.isActive() ? n.props.deleteLike(Object(i.a)({}, e, {
                                __typename: n.props.item.__typename,
                                socialStatistics: n.props.item.socialStatistics,
                                updateFragment: n.props.updateFragment,
                                updateFragmentName: n.props.updateFragmentName
                            })).then(function(e) {
                                return e.data.deleteLike
                            }) : n.addLike(e).then(function(e) {
                                return e.data.addLike
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "afterActionComplete", function(e) {
                            var t = e.statusType;
                            "NO_PERMISSION" === t ? n.props.launchToast({
                                node: m.createElement(S.NoPermissionToast, null)
                            }) : "OK" === t && n.props.setFireOnboarding(!1, "LIKE_ACTION")
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props.item.__typename,
                                a = this.props.item.id,
                                i = "Review" === n ? Object(f.localize)("social_Helpful") : Object(f.localize)("social_Like"),
                                o = m.createElement(_.SocialLoginGate, {
                                    pid: 40469
                                }, function(e) {
                                    var o = t.isActive() ? "unhelpful" : "helpful";
                                    return m.createElement(j.InteractionLogger, null, function(r) {
                                        return m.createElement("span", {
                                            className: "".concat(E.a.social_action, " ").concat(t.isActive() ? E.a.active : ""),
                                            onClick: function i(s) {
                                                t.props.onClick && t.props.onClick(), r(s, o), y.NativeBridge.isNativeWebview() && y.NativeBridge.isActionSupported("like", 1) ? a && n && y.NativeBridge.postToBridge("like", 1, {
                                                    objectId: a,
                                                    type: n,
                                                    undo: t.isActive()
                                                }) : e().then(t.memberGeneratedAction).then(t.afterActionComplete)
                                            }
                                        }, m.createElement(k.Icon, {
                                            name: "thumbs-up-fill",
                                            className: E.a.icon
                                        }), m.createElement("span", {
                                            className: "ui_link ".concat(E.a.text)
                                        }, i))
                                    })
                                });
                            return m.createElement(m.Fragment, null, Object(b.featureIsEnabled)("social_likes_enabled") ? o : null)
                        }
                    }]), t
                }(m.Component);
            Object(u.a)(x, "defaultProps", {
                updateFragment: h.FeedObjectStatisticFieldsFragment,
                updateFragmentName: "FeedObjectStatisticFields",
                onClick: void 0,
                attemptOnboarding: !0
            });
            var P = Object(p.compose)(Object(v.connect)(function(e, t) {
                return Object(i.a)({
                    loggedInUserId: e.auth.loggedInUserId,
                    csrfToken: e.auth.csrfToken
                }, t)
            }, {
                setFireOnboarding: N.ACTIONS.setShouldFire
            }), Object(p.graphql)(C, {
                props: function e(t) {
                    var n = t.mutate;
                    return {
                        addLike: function e(t) {
                            var a = t.objectType,
                                o = t.objectId,
                                r = t.__typename,
                                s = t.socialStatistics,
                                l = t.updateFragment,
                                c = t.updateFragmentName,
                                d = Object(O.getObjectIdField)(r);
                            return n({
                                variables: {
                                    objectType: a,
                                    objectId: o
                                },
                                refetchQueries: [{
                                    query: h.LikersFeedQuery,
                                    variables: {
                                        objectType: a,
                                        objectId: o,
                                        limit: 20
                                    }
                                }],
                                update: function e(t, n) {
                                    var a, m, p = n.data;
                                    if ("OK" === (null == p ? void 0 : null === (a = p.addLike) || void 0 === a ? void 0 : a.statusType)) {
                                        var v = (s || {}).likeCount,
                                            b = void 0 === v ? 0 : v;
                                        t.writeFragment({
                                            id: "".concat(r, ":").concat(o),
                                            fragment: l,
                                            fragmentName: c,
                                            data: (m = {
                                                __typename: r
                                            }, Object(u.a)(m, d, o), Object(u.a)(m, "socialStatistics", Object(i.a)({}, s, {
                                                isLiked: !0,
                                                likeCount: b + 1,
                                                __typename: "SocialStatistics"
                                            })), m)
                                        })
                                    }
                                }
                            })
                        }
                    }
                }
            }), Object(p.graphql)(T, {
                props: function e(t) {
                    var n = t.mutate;
                    return {
                        deleteLike: function e(t) {
                            var a = t.objectType,
                                o = t.objectId,
                                r = t.__typename,
                                s = t.socialStatistics,
                                l = t.updateFragment,
                                c = t.updateFragmentName,
                                d = Object(O.getObjectIdField)(r);
                            return n({
                                variables: {
                                    objectType: a,
                                    objectId: o
                                },
                                refetchQueries: [{
                                    query: h.LikersFeedQuery,
                                    variables: {
                                        objectType: a,
                                        objectId: o,
                                        limit: 20
                                    }
                                }],
                                update: function e(t, n) {
                                    var a, m, p = n.data;
                                    if ("OK" === (null == p ? void 0 : null === (a = p.deleteLike) || void 0 === a ? void 0 : a.statusType)) {
                                        var v = (s || {}).likeCount,
                                            b = void 0 === v ? 1 : v;
                                        t.writeFragment({
                                            id: "".concat(r, ":").concat(o),
                                            fragment: l,
                                            fragmentName: c,
                                            data: (m = {}, Object(u.a)(m, d, o), Object(u.a)(m, "__typename", r), Object(u.a)(m, "socialStatistics", Object(i.a)({}, s, {
                                                isLiked: !1,
                                                likeCount: b - 1,
                                                __typename: "SocialStatistics"
                                            })), m)
                                        })
                                    }
                                }
                            })
                        }
                    }
                }
            }))(function e(t) {
                return m.createElement(g.Toaster, null, function(e) {
                    return m.createElement(x, Object(a.a)({}, t, {
                        launchToast: e
                    }))
                })
            });
            t.a = P
        },
        "./packages/social/actions/NestedSocialAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = function e(t) {
                    var n = t.children,
                        o = t.padRight;
                    return i.createElement("span", {
                        className: r()("social-actions-NestedSocialAction__nested_social_action--2mhpU", Object(a.a)({}, "social-actions-NestedSocialAction__pad_right--3zjLW", o))
                    }, n)
                };
            s.defaultProps = {
                padRight: !1
            }, t.a = s
        },
        "./packages/social/actions/SaveAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/trips/trip-flow-selector/QueriedTripFlowSelector.jsx"),
                o = n("./packages/trips/bookmark-icon/BookmarkIcon.jsx"),
                r = n("./packages/social/actions/SocialAction.less"),
                s = function e(t) {
                    var n = t.object,
                        s = t.displayStyle,
                        l = t.onClick,
                        c = t.preventInteractionPropagation;
                    return a.createElement("div", {
                        className: r.a.social_action
                    }, a.createElement(i.a, {
                        object: n,
                        preventInteractionPropagation: c
                    }, function(e, t) {
                        return a.createElement(o.a, {
                            active: t,
                            bookmarkStyle: "flat",
                            bookmarkSize: "18",
                            lineHeight: 20,
                            onClick: function t() {
                                l && l(), e()
                            }
                        }, function(e) {
                            return s.includes("text") ? e : ""
                        })
                    }))
                };
            s.defaultProps = {
                onClick: void 0,
                preventInteractionPropagation: !1
            }, t.a = s
        },
        "./packages/social/actions/SocialAction.less": function(e, t, n) {
            "use strict";
            t.a = {
                social_action: "social-actions-SocialAction__social_action--1RrZ-",
                icon: "social-actions-SocialAction__icon--2WCF0",
                text: "social-actions-SocialAction__text--1yJuk",
                active: "social-actions-SocialAction__active--2o63F"
            }
        },
        "./packages/social/actions/SocialActionBar.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/classnames/classnames.jsx"),
                o = n.n(i),
                r = function e(t) {
                    var n = t.className,
                        i = t.children;
                    return a.createElement("div", {
                        className: o()("social-actions-SocialActionBar__social_action_bar--2_j8Y", n)
                    }, i)
                };
            r.defaultProps = {
                className: ""
            }, t.a = r
        },
        "./packages/social/actions/UntagAction.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                p = n("./packages/common/logging/logging.jsx"),
                v = n.n(p),
                b = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "UntagUserReference"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "untagCurrentUserReference"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "objectId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "objectType"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        }
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 124
                    }
                };
            b.loc.source = {
                body: "7a2d11450ede"
            };
            var f = b,
                k = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "UpdateSocialReferences"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "idInt"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "idLong"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Long"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updatePhoto"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updateVideo"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updateRepost"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updateLinkPost"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updateTrip"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "updateTripComment"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesPhoto"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updatePhoto"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesVideo"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updateVideo"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesRepost"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updateRepost"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesLinkPost"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updateLinkPost"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesTrip"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updateTrip"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "GetUpdatedReferencesTripComment"
                                },
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "updateTripComment"
                                            }
                                        }
                                    }]
                                }]
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "socialReferences"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SocialReferences"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userReferences"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "length"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "offset"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesPhoto"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "photoIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "idInt"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesVideo"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "videoIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "idInt"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesRepost"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reposts"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "repostIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "idLong"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "repostId"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "static"
                                            },
                                            arguments: []
                                        }]
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "comment"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesLinkPost"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "linkPosts"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "linkPostIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "idLong"
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "postId"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "static"
                                            },
                                            arguments: []
                                        }]
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "comment"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesTrip"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "trip"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tripId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "idInt"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "GetUpdatedReferencesTripComment"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Query"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tripItem"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "itemId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "idLong"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "comments"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "body"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "socialReferences"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "socialReferences"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 1761
                    }
                };
            k.loc.source = {
                body: "43fa07df4d1a"
            };
            var g = k;
            n.d(t, "a", function() {
                return _
            });
            var h = {
                    Repost: "repostId",
                    LinkPost: "postId"
                },
                _ = function e(t, n) {
                    return t && n && t.socialReferences && t.socialReferences.userReferences && t.socialReferences.userReferences.find(function(e) {
                        return e.userId === n
                    })
                },
                j = function(e) {
                    function t() {
                        var e, n;
                        Object(i.a)(this, t);
                        for (var a = arguments.length, o = new Array(a), l = 0; l < a; l++) o[l] = arguments[l];
                        return n = Object(r.a)(this, (e = Object(s.a)(t)).call.apply(e, [this].concat(o))), Object(d.a)(Object(c.a)(Object(c.a)(n)), "getId", function(e) {
                            return h[e.__typename] ? e[h[e.__typename]] : e.id
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "getType", function(e) {
                            return "TripComment" === e.__typename ? "COMMENT" : e.__typename.toUpperCase()
                        }), n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this;
                            return u.createElement(m.ApolloConsumer, null, function(e) {
                                return t.props.children(function(n) {
                                    var i = {
                                        updatePhoto: "Photo" === n.__typename,
                                        updateVideo: "Video" === n.__typename,
                                        updateRepost: "Repost" === n.__typename,
                                        updateLinkPost: "LinkPost" === n.__typename,
                                        updateTrip: "Trip" === n.__typename,
                                        updateTripComment: "TripComment" === n.__typename
                                    };
                                    i && e.mutate({
                                        mutation: f,
                                        variables: {
                                            id: t.getId(n),
                                            type: t.getType(n)
                                        }
                                    }).then(function() {
                                        return e.query({
                                            query: g,
                                            variables: Object(a.a)({
                                                idInt: t.getId(n),
                                                idLong: t.getId(n)
                                            }, i)
                                        })
                                    }).then(function() {
                                        t.forceUpdate()
                                    }).catch(function(e) {
                                        return v.a.error("Untag User Reference failed. Reason: ".concat(e))
                                    })
                                })
                            })
                        }
                    }]), t
                }(u.Component);
            t.b = j
        },
        "./packages/social/cards/ProfileCardResponsive.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./node_modules/react-redux/es/index.js"),
                o = n("./packages/social/cards/profile-narrow/ProfileCardNarrow.jsx"),
                r = n("./packages/social/cards/profile-wide/ProfileCardWide.jsx"),
                s = function e(t) {
                    return "MOBILE" === t.device ? a.createElement(o.a, {
                        profile: t.profile,
                        memberInfo: t.memberInfo
                    }) : a.createElement(r.a, {
                        profile: t.profile,
                        memberInfo: t.memberInfo
                    })
                };
            s.defaultProps = {
                memberInfo: void 0
            }, t.a = Object(i.connect)(function(e) {
                return {
                    device: e.meta.device.viewportCategory
                }
            })(s)
        },
        "./packages/social/cards/profile-narrow/ProfileCardNarrow.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./node_modules/react-redux/es/index.js"),
                r = n("@ta/social.member-common"),
                s = n("./packages/common/routing/routing.jsx"),
                l = n("@ta/social.follow"),
                c = n.n(l),
                d = n("./packages/search/tracking/SearchRecordTracker.jsx"),
                u = n("@ta/styleguide.avatar"),
                m = function e(t) {
                    var n = t.profile,
                        a = t.memberInfo;
                    return i.createElement("div", {
                        className: "social-cards-profile-narrow-IdentitySection__identity_wrap--10o6W"
                    }, i.createElement("div", {
                        className: "social-cards-profile-narrow-IdentitySection__identity_block--eQkEB"
                    }, i.createElement("div", {
                        className: "social-cards-profile-narrow-IdentitySection__avatar_wrap--E9n8F"
                    }, i.createElement(u.Avatar, {
                        photo: n.avatar,
                        withBorder: !0
                    })), i.createElement("div", {
                        className: "social-cards-profile-narrow-IdentitySection__member_name_wrap--2dr7j"
                    }, i.createElement(r.MemberName, {
                        profile: n,
                        memberInfo: a,
                        displayNameClassName: "social-cards-profile-narrow-IdentitySection__display_name--3i2d0",
                        addProfileLink: !1,
                        singleLine: !0
                    }))))
                };
            m.defaultProps = {
                memberInfo: void 0
            };
            var p = m,
                v = function e(t) {
                    t.stopPropagation(), t.preventDefault()
                },
                b = function e(t) {
                    var n = t.profile,
                        o = t.trackType,
                        r = t.trackPayload;
                    switch (o) {
                        case "search":
                            var s = {
                                module: "Search_Results",
                                action: n.isFollowing ? "unfollow_click" : "follow_click",
                                context: "user_id=".concat(n.userId)
                            };
                            return i.createElement(d.a, Object(a.a)({
                                once: !1,
                                searchRecordData: r
                            }, s), i.createElement(c.a, {
                                profile: n,
                                displayType: "button+icon",
                                size: "small",
                                onClick: function e(t) {
                                    return v(t)
                                }
                            }));
                        default:
                            return i.createElement(c.a, {
                                profile: n,
                                displayType: "button+icon",
                                size: "small",
                                onClick: function e(t) {
                                    return v(t)
                                }
                            })
                    }
                },
                f = function e(t) {
                    var n, a;
                    return i.createElement(s.Link, {
                        href: null === (n = t.profile) || void 0 === n ? void 0 : null === (a = n.route) || void 0 === a ? void 0 : a.url,
                        target: t.linkNewTabDT && "MOBILE" !== t.device ? "_blank" : "_self",
                        className: t.fullHeight ? "social-cards-profile-narrow-ProfileCardNarrow__flex_columns--MAyyA" : ""
                    }, i.createElement("div", {
                        className: "".concat("social-cards-profile-narrow-ProfileCardNarrow__profile_wrap--3brH_", " ").concat(t.fullHeight ? "social-cards-profile-narrow-ProfileCardNarrow__full_height--lR9QS" : "")
                    }, i.createElement(p, {
                        profile: t.profile,
                        memberInfo: t.memberInfo
                    }), i.createElement("div", {
                        className: "social-cards-profile-narrow-ProfileCardNarrow__profile_stats_block--DYAGo"
                    }, i.createElement(r.MemberStatsBasic, {
                        profile: t.profile
                    })), t.memberInfo && t.memberInfo.infoWithMember && i.createElement(r.MemberReasonWhy, {
                        type: t.memberInfo.suggestedFolloweeType,
                        reason: t.memberInfo.infoWithMember.reason,
                        className: "social-cards-profile-narrow-ProfileCardNarrow__reason_why--b7jE6",
                        singleLine: !0
                    }), i.createElement("div", {
                        className: "social-cards-profile-narrow-ProfileCardNarrow__profile_follow_block--1yE6V"
                    }, !t.profile.isMe && i.createElement(b, {
                        profile: t.profile,
                        trackType: t.trackType,
                        trackPayload: t.trackPayload
                    }))))
                };
            f.defaultProps = {
                fullHeight: !1,
                linkNewTabDT: !1,
                trackType: "",
                trackPayload: {},
                memberInfo: void 0
            }, t.a = Object(o.connect)(function(e) {
                return {
                    device: e.meta.device.viewportCategory
                }
            })(f)
        },
        "./packages/social/cards/profile-wide/ProfileCardWide.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("@ta/styleguide.avatar"),
                o = n("@ta/social.member-common"),
                r = n("@ta/social.follow"),
                s = n.n(r),
                l = n("./packages/common/routing/routing.jsx"),
                c = function e(t) {
                    var n, r = t.profile,
                        c = t.memberInfo,
                        d = t.onFollow,
                        u = t.addProfileLink,
                        m = t.showFacebookIcon,
                        p = a.createElement("div", {
                            className: "ui_card section ".concat("social-cards-profile-wide-ProfileCardWide__card--UEavE")
                        }, a.createElement("div", {
                            className: "social-cards-profile-wide-ProfileCardWide__avatar--2hw5s"
                        }, a.createElement(i.Avatar, {
                            photo: r.avatar,
                            size: "large",
                            withBorder: !0
                        })), a.createElement("div", {
                            className: "social-cards-profile-wide-ProfileCardWide__info--3X3EI"
                        }, a.createElement("div", {
                            className: "social-cards-profile-wide-ProfileCardWide__member_name_container--3dYop"
                        }, a.createElement(o.MemberName, {
                            profile: r,
                            memberInfo: c,
                            addProfileLink: !1,
                            socialConnection: m ? "FACEBOOK" : ""
                        })), a.createElement("div", {
                            className: "social-cards-profile-wide-ProfileCardWide__member_stats_container--1jjM1"
                        }, a.createElement(o.MemberStatsBasic, {
                            profile: r
                        })), r.bio && a.createElement("div", {
                            className: "".concat("social-cards-profile-wide-ProfileCardWide__bio_container--xx95E", " ").concat("social-cards-profile-wide-ProfileCardWide__bio--24oC6")
                        }, r.bio), c && c.infoWithMember && a.createElement(o.MemberReasonWhy, {
                            type: c.suggestedFolloweeType,
                            reason: c.infoWithMember.reason,
                            className: "social-cards-profile-wide-ProfileCardWide__reason_why--2lIJ5",
                            singleLine: !0
                        })), !r.isMe && a.createElement("div", {
                            className: "social-cards-profile-wide-ProfileCardWide__follow--2Mazt"
                        }, a.createElement(s.a, {
                            profile: r,
                            size: "small",
                            displayType: "button+icon",
                            onClick: function e(t) {
                                return function e(t) {
                                    t.stopPropagation(), t.preventDefault()
                                }(t)
                            },
                            onToggleFollow: d
                        })));
                    return u ? a.createElement(l.Link, {
                        href: null == r ? void 0 : null === (n = r.route) || void 0 === n ? void 0 : n.url
                    }, p) : p
                };
            c.defaultProps = {
                memberInfo: void 0,
                onFollow: void 0,
                addProfileLink: !0,
                showFacebookIcon: !1
            }, t.a = c
        },
        "./packages/social/feed-ui/SocialActivityFeed.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                d = n("./node_modules/react/index.js"),
                u = n("@ta/social.tabs"),
                m = n("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),
                p = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                v = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                b = n("./node_modules/react-redux/es/index.js"),
                f = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                k = n("./node_modules/fast-deep-equal/index.js"),
                g = n.n(k),
                h = n("./packages/common/global/global.jsx"),
                _ = n("@ta/social.content-removal"),
                j = n("@ta/social.show-more"),
                S = n("./packages/common/infinite-loader/InfiniteLoader.jsx"),
                y = n("./node_modules/react-flip-move/dist/react-flip-move.es.js"),
                N = n("./node_modules/lodash/omit.js"),
                O = n.n(N),
                E = n("./packages/common/logging/logging.jsx"),
                I = n.n(E),
                C = n("@ta/media.common"),
                F = n("./packages/common/routing/routing.jsx"),
                T = n("./packages/common/features/features.jsx"),
                w = n("@ta/common.localstorage"),
                x = n.n(w),
                P = n("@ta/social.skeletons"),
                L = n("@ta/tracking.interactions"),
                A = n("@ta/social.feed"),
                R = n("./packages/social/actions/UntagAction.jsx"),
                M = n("./packages/common/classnames/classnames.jsx"),
                D = n.n(M),
                z = n("./packages/common/i18n/i18n.jsx"),
                B = "social-sections-forums-ForumsListLayout__cell--29qmz",
                V = Object(b.connect)(function(e) {
                    return {
                        device: e.meta.device.viewportCategory
                    }
                })(function e(t) {
                    var n = t.children,
                        a = t.device;
                    return d.createElement("div", {
                        className: "social-sections-forums-ForumsListLayout__layout--kqCMA"
                    }, "MOBILE" !== a && d.createElement("div", {
                        className: "social-sections-forums-ForumsListLayout__header--30AJn"
                    }, d.createElement("div", {
                        className: "social-sections-forums-ForumsListLayout__row--3oSM3"
                    }, d.createElement("span", {
                        className: D()(B, "social-sections-forums-ForumsListLayout__date--3RMOJ")
                    }, Object(z.localize)("content_11228")), d.createElement("span", {
                        className: D()(B, "social-sections-forums-ForumsListLayout__type--1XXWI")
                    }, Object(z.localize)("mw_Type")), d.createElement("span", {
                        className: D()(B, "social-sections-forums-ForumsListLayout__forum--1DbA_")
                    }, Object(z.localize)("common_Forum")), d.createElement("span", {
                        className: D()(B, "social-sections-forums-ForumsListLayout__topic--2IBQh")
                    }, Object(z.localize)("mc_forum_topic_c8c")))), d.createElement("div", {
                        className: "social-sections-forums-ForumsListLayout__content--300Gq"
                    }, n))
                }),
                U = n("./packages/common/object-util/object-util.jsx"),
                W = n("./packages/events/window-resize/WindowResize.jsx"),
                H = n("./packages/events/window-scroll/WindowScroll.jsx"),
                q = n("@ta/common.error-handling"),
                G = function e(t) {
                    return t.items && t.items.length > 0 ? t.items[0].object : null
                },
                K = function e(t) {
                    return t && t.userProfile ? t.userProfile.isFollowing : null
                },
                Q = [function(e) {
                    var t, n = G(e);
                    return ["MediaBatch" === (null == n ? void 0 : n.__typename) ? null == n ? void 0 : n.media : null, (null == n ? void 0 : n.socialStatistics) || null, (null == n ? void 0 : null === (t = n.socialReferences) || void 0 === t ? void 0 : t.userReferences) || null]
                }, function(e) {
                    return K(G(e))
                }, function(e) {
                    if ("REPOST" !== e.type) return null;
                    var t = G(e),
                        n = t && t.socialReferences && t.socialReferences.userReferences;
                    return t && t.repostedObject ? [K(t.repostedObject), t.repostedObject.socialStatistics, n] : t && t.socialReferences
                }, function(e) {
                    return "PROFILE_LIST" !== e.type ? null : e.items.map(function(e) {
                        return e.object.isFollowing
                    })
                }, function(e) {
                    if ("VIDEO" !== e.type && "LINK_POST" !== e.type && "PHOTO" !== e.type) return null;
                    var t = G(e);
                    if (!t) return null;
                    var n = t.orderedLocations;
                    n || (n = null != t.tags ? t.tags.orderedLocations : t.location ? [t.location] : null);
                    var a = n ? n.map(function(e) {
                            return e.locationId
                        }) : null,
                        i = t.comment;
                    return i || (i = t.caption), [a, i, t && t.socialReferences && t.socialReferences.userReferences]
                }, function(e) {
                    if (!e.actor) return null;
                    if (!e.actor.blockStatus) return null;
                    var t = e.actor.blockStatus;
                    return [t.isBlocking, t.isBlockingYou]
                }],
                Y = function(e) {
                    function t() {
                        return Object(o.a)(this, t), Object(s.a)(this, Object(l.a)(t).apply(this, arguments))
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "shouldComponentUpdate",
                        value: function e(t) {
                            return function e(t, n) {
                                return ! function e(t, n) {
                                    return Q.every(function(e) {
                                        return g()(e(t), e(n))
                                    })
                                }(t, n)
                            }(t.section, this.props.section)
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this.props.section.items && this.props.section.items[0] && this.props.section.items[0].reasonFor;
                            return d.createElement(q.ErrorBoundary, null, d.createElement("div", {
                                "data-feed-reason": t
                            }, this.props.children()))
                        }
                    }]), t
                }(d.Component),
                X = n("./packages/social/sections/ReviewSection.jsx"),
                J = n("./packages/social/sections/PhotoSection.jsx"),
                Z = n("./packages/social/sections/ManagedMediaBatchSection.jsx"),
                $ = n("./packages/social/sections/VideoSection.jsx"),
                ee = n("@ta/social.dates"),
                te = n("./packages/social/sections/forums/forum-post-url.jsx"),
                ne = Object(b.connect)(function(e) {
                    return {
                        device: e.meta.device.viewportCategory,
                        language: e.i18n.language
                    }
                })(function e(t) {
                    var n = t.post,
                        a = t.device,
                        i = t.language,
                        o = n.object.id === n.object.parentId,
                        r = Object(te.a)(n.object, i),
                        s = n.object.forum.route.url,
                        l = Object(ee.getDateInBrowserTimezone)(n.object.publishedDate),
                        c = o ? n.object.topicTitle : Object(z.localize)("common_Re_topic_title", {
                            0: n.object.topicTitle
                        });
                    if (!n.object) return null;
                    var u = d.createElement(L.InteractionLogger, null, function(e) {
                            return d.createElement(d.Fragment, null, l && d.createElement("span", {
                                className: D()(B, "social-sections-forums-ForumsListLayout__date--3RMOJ")
                            }, z.globalize.formatDate("date_medium", l)), d.createElement("span", {
                                className: D()(B, "social-sections-forums-ForumsListLayout__type--1XXWI")
                            }, o ? Object(z.localize)("mc_forum_topic_c8c") : Object(z.localize)("common_Reply")), d.createElement("span", {
                                className: D()(B, "social-sections-forums-ForumsListLayout__forum--1DbA_")
                            }, d.createElement(F.Link, {
                                key: "forum_".concat(n.object.id),
                                className: "ui_link",
                                href: s,
                                title: n.object.forumName,
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                }
                            }, n.object.forumName)), d.createElement("span", {
                                className: D()(B, "social-sections-forums-ForumsListLayout__topic--2IBQh")
                            }, d.createElement(F.Link, {
                                key: "topic_".concat(n.object.id),
                                className: "ui_link",
                                href: r,
                                title: c,
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                }
                            }, c)))
                        }),
                        m = d.createElement("div", {
                            className: "social-sections-forums-ForumsListSection__cell--2m6kM"
                        }, l && d.createElement("div", {
                            className: "social-sections-forums-ForumsListSection__date_topic--Dglo7"
                        }, z.globalize.formatDate("date_medium", l), ", ", n.object.forumName), d.createElement("div", {
                            className: "social-sections-forums-ForumsListSection__title--1vEki"
                        }, d.createElement(L.InteractionLogger, null, function(e) {
                            return d.createElement(F.Link, {
                                key: "topic_".concat(n.object.id),
                                className: "ui_link",
                                href: r,
                                title: c,
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                }
                            }, c)
                        })));
                    return d.createElement("div", {
                        className: "social-sections-forums-ForumsListLayout__row--3oSM3"
                    }, "MOBILE" !== a ? d.createElement(d.Fragment, null, u) : d.createElement(d.Fragment, null, m))
                }),
                ae = n("./packages/social/sections/forums/ForumPostSection.jsx"),
                ie = n("./packages/social/sections/LinkPostSection.jsx"),
                oe = n("./packages/social/sections/TripSection.jsx"),
                re = n("./packages/social/sections/RepostSection.jsx"),
                se = n("@ta/common.text"),
                le = n("@ta/styleguide.icon"),
                ce = n("common/Radio"),
                de = n.n(ce),
                ue = n("@ta/media.image"),
                me = function e(t) {
                    var n = t.photos,
                        a = t.id,
                        i = t.locationId,
                        o = t.totalCount;
                    return n.length < 4 ? null : d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", {
                            className: "social-sections-geoOverviewExtraParts-GeoOverviewPhotos__photosWrap--MPcVI"
                        }, n.map(function(t, n) {
                            var r = 3 === n;
                            if (n < 4) {
                                var s = r ? -1 : t.id;
                                return d.createElement("div", {
                                    key: t.id,
                                    className: "social-sections-geoOverviewExtraParts-GeoOverviewPhotos__photoItem--1fffH",
                                    style: {
                                        flexBasis: "calc(".concat(50, "% - 2px)")
                                    },
                                    onClick: function n(o) {
                                        e(o, "linkedPhotoClick", {
                                                mediaId: t.id
                                            }),
                                            function r(e, t, n, a) {
                                                var i = {
                                                    detail: e,
                                                    geo: t,
                                                    albumViewMode: "grid",
                                                    updateType: "full",
                                                    albumId: n,
                                                    filter: 7
                                                };
                                                a > 0 && (i.ff = a, i.baseMediaId = a, i.albumViewMode = "hero"), de()("responsive-photoviewer").emit("load", i)
                                            }(i, i, a, s)
                                    }
                                }, d.createElement(ue.ResponsiveImage, {
                                    sources: t.photoSizes,
                                    height: "100%",
                                    width: "100%"
                                }), r ? function e(t) {
                                    return d.createElement("div", {
                                        className: "social-sections-geoOverviewExtraParts-GeoOverviewPhotos__shadowOver--dXrj7"
                                    }, d.createElement("div", {
                                        className: "social-sections-geoOverviewExtraParts-GeoOverviewPhotos__countText--1oMI3"
                                    }, "+ ", z.globalize.formatNumber("integer", t)))
                                }(o) : null)
                            }
                            return null
                        }))
                    })
                },
                pe = function e(t) {
                    var n = t.overview;
                    if (!n || !n.object) return null;
                    var o = n.object.geo && n.object.geo.albums && n.object.geo.albums.length > 0 ? n.object.geo.albums[0] : null,
                        r = n.object.geo && n.object.geo.dmoPlacementInfo && n.object.geo.dmoPlacementInfo.album ? n.object.geo.dmoPlacementInfo.album.photos : null;
                    return d.createElement("div", {
                        className: "".concat("social-sections-GeoOverviewSection__section--n7hF8", " ui_card")
                    }, d.createElement("div", {
                        className: "social-sections-GeoOverviewSection__header--zogLR"
                    }, d.createElement("span", {
                        className: "ui_header h2"
                    }, function e(t) {
                        return t && t.additionalNames && t.additionalNames.longParentAbbreviated ? Object(z.localize)("about_geo", {
                            sGeo: t.additionalNames.longParentAbbreviated
                        }) : Object(z.localize)("hr_tabs_overview_tab_fffff660")
                    }(n.object.geo))), n.object.geoOverview && d.createElement(d.Fragment, null, d.createElement("div", {
                        className: "".concat("social-sections-GeoOverviewSection__container--3_uMq", " ui_container")
                    }, d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement(u.TabActiveContext.Consumer, null, function(t) {
                            return d.createElement(se.ReadMore, {
                                numLinesToShow: 4,
                                collapsible: !0,
                                ctaNewline: !0,
                                collapsed: !t || t.isActive,
                                cta: d.createElement(d.Fragment, null, d.createElement("span", {
                                    className: "social-sections-GeoOverviewSection__ellipsis--1zeRK"
                                }), d.createElement("div", {
                                    className: "social-sections-GeoOverviewSection__readMore--3U3Ht",
                                    onClick: function t(n) {
                                        return e(n, "feedClick")
                                    }
                                }, d.createElement("span", null, Object(z.localize)("tavrs_common_show_more")), d.createElement(le.Icon, {
                                    name: "caret-down",
                                    className: "social-sections-GeoOverviewSection__icon--36rU9"
                                }))),
                                ctaCollapse: d.createElement("div", {
                                    className: "social-sections-GeoOverviewSection__readMore--3U3Ht"
                                }, d.createElement("span", null, Object(z.localize)("tavrs_common_show_less")), d.createElement(le.Icon, {
                                    name: "caret-up",
                                    className: "social-sections-GeoOverviewSection__icon--36rU9"
                                })),
                                key: n.object.id
                            }, d.createElement("span", null, Object(z.unescaped)(n.object.geoOverview)))
                        })
                    }))), o ? d.createElement(me, Object(a.a)({}, o, {
                        photos: [].concat(Object(i.a)(r || []), Object(i.a)(o.photos || []))
                    })) : null)
                },
                ve = n("@ta/social.suggested-followees"),
                be = n("@ta/social.scroll"),
                fe = n("./packages/social/sections/ReasonForCrust.jsx"),
                ke = {
                    shelf: "social-shelves-Shelf__shelf--17ExC",
                    carousel: "social-shelves-Shelf__carousel--uEpXn",
                    modalIsOpen: "social-shelves-Shelf__modalIsOpen--TD__F",
                    relative: "social-shelves-Shelf__relative--2Qopd",
                    shelf_items: "social-shelves-Shelf__shelf_items--PpOyQ",
                    shelf_item: "social-shelves-Shelf__shelf_item--1WY9_",
                    shelf_items_for_geo: "social-shelves-Shelf__shelf_items_for_geo--HJ6B-",
                    shelf_items_for_ugc: "social-shelves-Shelf__shelf_items_for_ugc--1CT4d",
                    header_wrap_for_geo: "social-shelves-Shelf__header_wrap_for_geo--1hzet",
                    header_subtitle: "social-shelves-Shelf__header_subtitle--1YE42",
                    see_all_for_geo: "social-shelves-Shelf__see_all_for_geo--2mxjs"
                },
                ge = n("./packages/styleguide/bubble-rating/BubbleRatingWithReviewCount.jsx"),
                he = n("./packages/trips/trip-flow-selector/QueriedTripFlowSelector.jsx"),
                _e = n("./packages/trips/bookmark-icon/BookmarkIcon.jsx"),
                je = n("@ta/social.place-type"),
                Se = function e(t) {
                    var n = t.location,
                        a = t.geoShelfPhotoClassName;
                    return d.createElement("div", {
                        className: "social-sections-locationSection-LocationSectionPhotoWrap__photo_wrap--2hQYV"
                    }, d.createElement("div", {
                        className: "" !== a ? a : "social-sections-locationSection-LocationSectionPhotoWrap__photo--37rKd"
                    }, d.createElement(ue.ResponsiveImage, {
                        sources: n.thumbnail.photoSizes,
                        width: "100%",
                        height: "100%",
                        borderRadius: "2px"
                    })))
                };
            Se.defaultProps = {
                geoShelfPhotoClassName: ""
            };
            var ye = Se,
                Ne = {
                    "": '<span class="'.concat("social-shelves-ShelfLocationSection__hit--1_1qU", '">'),
                    "": "</span>",
                    "\n": "<br>",
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#39;"
                },
                Oe = function e(t) {
                    var n = t.location,
                        a = t.title,
                        i = t.defaultSnippet,
                        o = n.thumbnail,
                        r = function e(t) {
                            var n;
                            t && t.url && I.a.warn("ShelfLocationSection using location.url instead of location.route.url!");
                            var a = (null == t ? void 0 : null === (n = t.route) || void 0 === n ? void 0 : n.url) || (null == t ? void 0 : t.url);
                            return t.isGeo && Object(T.featureIsEnabled)("ml_home_tourism_about_tab") ? "".concat(a, "?tab=tourism") : a
                        }(n);
                    return n.isGeo ? d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", {
                            className: "ui_shelf_item_container ui_geo_shelf_item ".concat("social-shelves-ShelfLocationSection__section--3UzGn", " ")
                        }, d.createElement(F.Link, {
                            href: r,
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            },
                            className: "ui_poi_thumbnail"
                        }, o ? d.createElement(ye, {
                            location: n,
                            geoShelfPhotoClassName: "social-shelves-ShelfLocationSection__shelfForPhoto--kU2eq"
                        }) : d.createElement("span", {
                            className: "social-shelves-ShelfLocationSection__shelfForPhoto--kU2eq"
                        }, d.createElement(je.NoPhotoAvailableByPlaceType, {
                            location: n
                        }))), d.createElement(F.Link, {
                            href: r,
                            className: "item poi_name ui_link",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-ShelfLocationSection__name--3K2zJ"
                        }, n.name)))
                    }) : d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", {
                            className: "social-shelves-ShelfLocationSection__section--3UzGn"
                        }, d.createElement("div", {
                            className: "social-shelves-ShelfLocationSection__save_to_trip_cta--2ZJFa"
                        }, d.createElement(he.a, {
                            object: n
                        }, function(t, a) {
                            return d.createElement(_e.a, {
                                active: a,
                                bookmarkStyle: "stacked",
                                onClick: function a(i) {
                                    e(i, "save", {
                                        locationId: n.id
                                    }), t()
                                }
                            })
                        })), d.createElement(d.Fragment, null, d.createElement(F.Link, {
                            href: r,
                            className: "ui_poi_thumbnail",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, o ? d.createElement(ye, {
                            location: n,
                            geoShelfPhotoClassName: "social-shelves-ShelfLocationSection__shelfForPhoto--kU2eq"
                        }) : d.createElement("span", {
                            className: "social-shelves-ShelfLocationSection__shelfForPhoto--kU2eq"
                        }, " ", d.createElement(je.NoPhotoAvailableByPlaceType, {
                            location: n
                        }))), d.createElement(F.Link, {
                            href: r,
                            className: "item poi_name ui_link",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-ShelfLocationSection__name--3K2zJ"
                        }, n.name)), n.reviewSummary && 0 !== n.reviewSummary.count && "NEIGHBORHOOD_TIER_1" !== n.placeType && d.createElement(F.Link, {
                            href: r,
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "ui_shelf_poi_bubble_rating"
                        }, d.createElement(ge.a, {
                            numReviews: n.reviewSummary.count,
                            rating: n.reviewSummary.rating,
                            fontSize: 12
                        })))), null === n.distanceFromScopedLocationString || "" === n.distanceFromScopedLocationString ? d.createElement("div", {
                            className: "social-shelves-ShelfLocationSection__subheader--1e6mG"
                        }, " ", n.geoName) : d.createElement("div", {
                            className: "social-shelves-ShelfLocationSection__subheader--1e6mG"
                        }, d.createElement("span", {
                            className: "ui_icon map-pin ".concat("social-shelves-ShelfLocationSection__green_map_pin--2YL5Y")
                        }), d.createElement("span", {
                            dangerouslySetInnerHTML: {
                                __html: n.distanceFromScopedLocationString
                            }
                        }), " "), a && d.createElement("div", {
                            className: "social-shelves-ShelfLocationSection__subheader--1e6mG"
                        }, Object(z.unescaped)(a)), i && d.createElement(F.Link, {
                            className: "".concat("social-shelves-ShelfLocationSection__snippet--1at6u", " ui_link"),
                            href: i.url,
                            onClick: function t(n) {
                                return e(n, "linkedSnippetClick")
                            }
                        }, "“", Object(z.unescaped)(function e(t) {
                            return (t || "").replace(/[&<>"'\n\u0086\u0087]|&#?[0-9a-zA-Z]+;/g, function(e) {
                                return Ne[e] || e
                            })
                        }(i.text)), "”"))
                    })
                };
            Oe.defaultProps = {
                title: void 0,
                defaultSnippet: void 0
            };
            var Ee = Oe,
                Ie = function e(t) {
                    var n = t.cruiseSearchInfo,
                        a = n.thumbnail,
                        i = n && n.route && n.route.url ? n.route.url : "#";
                    return d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", {
                            className: "social-shelves-ShelfCruiseSearchSection__section--3DZoE"
                        }, d.createElement(d.Fragment, null, d.createElement(F.Link, {
                            href: i,
                            className: "ui_poi_thumbnail",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, a ? d.createElement("div", {
                            className: "social-shelves-ShelfCruiseSearchSection__photo_wrap--376dT"
                        }, d.createElement("div", {
                            className: "social-shelves-ShelfCruiseSearchSection__shelfForPhoto--3pISY"
                        }, d.createElement(ue.ResponsiveImage, {
                            sources: n.thumbnail.photoSizes,
                            width: "100%",
                            height: "100%",
                            borderRadius: "2px"
                        }))) : d.createElement("span", {
                            className: "social-shelves-ShelfCruiseSearchSection__shelfForPhoto--3pISY"
                        }, " ", d.createElement("div", {
                            className: "social-shelves-ShelfCruiseSearchSection__no_photo_available--1-3QJ"
                        }, d.createElement(le.Icon, {
                            name: "cruises",
                            className: "social-shelves-ShelfCruiseSearchSection__icon--2fBY5"
                        })))), d.createElement(F.Link, {
                            href: i,
                            className: "item poi_name ui_link",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-ShelfCruiseSearchSection__name--P-rg6"
                        }, n.locationName)), d.createElement(F.Link, {
                            href: i,
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        })))
                    })
                },
                Ce = n("./packages/trips/trip-avatars/TripAvatars.jsx"),
                Fe = function e(t) {
                    var n = t.member,
                        a = t.locations,
                        i = t.taggedPoisLinkTo,
                        o = t.onClick;
                    return d.createElement(d.Fragment, null, a && a.length > 2 && a[0].name && d.createElement(F.Link, {
                        to: i,
                        onClick: o
                    }, d.createElement("div", {
                        className: "social-shelves-UGCShelfItemInfo__tagged_pois_container--1-_c-"
                    }, d.createElement("span", {
                        className: "social-shelves-UGCShelfItemInfo__tagged_pois--2lQWO"
                    }, Object(z.unescaped)(Object(z.localize)("trips_home_featuring_count_v2", {
                        0: a.length
                    }))))), d.createElement("div", {
                        className: "social-shelves-UGCShelfItemInfo__name_likes_container--3Fwbi"
                    }, d.createElement(L.InteractionLogger, null, function(e) {
                        var t;
                        return d.createElement(F.Link, {
                            href: null == n ? void 0 : null === (t = n.route) || void 0 === t ? void 0 : t.url,
                            onClick: function t(a) {
                                return e(a, "userClick", {
                                    userId: n.id
                                })
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-UGCShelfItemInfo__display_name_container--2hqpk"
                        }, d.createElement("span", {
                            className: D()("social-shelves-UGCShelfItemInfo__display_name--1_UYz", Object(v.a)({}, "".concat("social-shelves-UGCShelfItemInfo__verified--1XYYk", " verified"), n.isVerified))
                        }, n.displayName)))
                    })))
                };
            Fe.defaultProps = {
                onClick: void 0
            };
            var Te = Fe,
                we = function e(t) {
                    return {
                        page: "Trips",
                        tripId: t.id,
                        tripTitle: "PUBLIC" === t.status ? t.title : void 0
                    }
                },
                xe = function e(t) {
                    var n = t.children,
                        a = t.trip;
                    return d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement(F.Link, {
                            to: we(a),
                            onClick: function t(n) {
                                e(n, "feedClick"), n.stopPropagation()
                            }
                        }, n)
                    })
                },
                Pe = function e(t) {
                    var n = t.trip,
                        a = d.createElement(Ce.a, {
                            trip: n,
                            avatarSize: "default"
                        });
                    return d.createElement("div", {
                        className: "ui_card ".concat("social-shelves-ShelfTripSection__trip_section--33PRO")
                    }, d.createElement("div", {
                        className: "social-shelves-ShelfTripSection__trip_photo_container--T7mt-"
                    }, d.createElement(xe, {
                        trip: n
                    }, function e(t) {
                        var n = t && t.photo && t.photo.photoSizes;
                        return n ? d.createElement(ue.ResponsiveImage, {
                            sources: n,
                            width: "100%",
                            height: "".concat(150, "px")
                        }) : d.createElement("div", {
                            className: "social-shelves-ShelfTripSection__placeholder--2RjcD",
                            style: {
                                width: "100%",
                                height: 150
                            }
                        }, d.createElement(le.Icon, {
                            name: "suitcase"
                        }))
                    }(n)), d.createElement("div", {
                        className: "social-shelves-ShelfTripSection__avatar--3A10K"
                    }, a)), d.createElement("div", {
                        className: "social-shelves-ShelfTripSection__trip_details_container--1i-qx"
                    }, d.createElement(xe, {
                        trip: n
                    }, d.createElement("div", {
                        className: "social-shelves-ShelfTripSection__trip_title_container--1Hj_0"
                    }, n.title)), d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement(Te, {
                            member: n.owner,
                            locations: n.orderedLocations,
                            taggedPoisLinkTo: we(n),
                            onClick: function t(n) {
                                e(n, "feedClick")
                            }
                        })
                    })))
                },
                Le = n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),
                Ae = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                Re = n("@ta/platform.import"),
                Me = n("@ta/overlays.headers"),
                De = n("./packages/social/sections/VideoSidebar.jsx"),
                ze = Object(Re.deferredImport)("@ta/media.video-player", "VideoPlayer"),
                Be = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(v.a)(Object(p.a)(Object(p.a)(n)), "onCloseModal", function() {
                            n.videoPlayer && n.videoPlayer.current.pauseVideo(), n.props.updateModalState(!1)
                        }), Object(v.a)(Object(p.a)(Object(p.a)(n)), "onOpenModal", function() {
                            n.videoPlayer && n.videoPlayer.current.playVideo(), n.props.updateModalState(!0)
                        }), Object(v.a)(Object(p.a)(Object(p.a)(n)), "contentNode", void 0), Object(v.a)(Object(p.a)(Object(p.a)(n)), "videoPlayer", void 0), n.contentNode = d.createRef(), n.videoPlayer = d.createRef(), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t, n = this,
                                a = this.props,
                                i = a.video,
                                o = a.isOpen,
                                r = a.route,
                                s = a.uniqueKey,
                                l = i.object,
                                c = l.locations ? l.locations.length : 0,
                                u = "ui_link ".concat("social-shelves-ShelfVideoSection__display_name--1IWB3", " ").concat(l.userProfile.isVerified ? "social-shelves-ShelfVideoSection__verified--2Jmf_" : "");
                            c > 0 && (t = 1 === c ? l.locations[0].name : Object(z.unescaped)(Object(z.localize)("social_name_and_n_other_places", {
                                sLocationName: l.locations[0].name,
                                sClass: "social-shelves-ShelfVideoSection__poi_text_and--fVq8w",
                                nCount: z.globalize.formatNumber("integer", c - 1)
                            })));
                            var m = l.sources[0].duration,
                                p = Math.floor(m / 6e4),
                                v = Math.floor(m / 1e3) - 60 * p,
                                b = v < 10 ? "".concat(p, ":0").concat(v) : "".concat(p, ":").concat(v),
                                f = Object(C.getVideoTrackingModule)(r);
                            return d.createElement(L.InteractionLogger, null, function(e) {
                                var a, c;
                                return d.createElement(d.Fragment, null, d.createElement("div", {
                                    key: "vw_".concat(l.id),
                                    className: "".concat("social-shelves-ShelfVideoSection__video_wrap--p3sDP", " ").concat(o ? "social-shelves-ShelfVideoSection__modalView--3VHR3" : "social-shelves-ShelfVideoSection__inlineView--2_CDW"),
                                    ref: n.contentNode
                                }, d.createElement("div", {
                                    className: "".concat("social-shelves-ShelfVideoSection__video--3hsHE", " ").concat(o ? "ui_columns" : "")
                                }, o && d.createElement("div", {
                                    className: "".concat("social-shelves-ShelfVideoSection__header--1oC7D", " ui_column is-4 is-offset-8 is-3-widescreen is-offset-9-widescreen is-12-mobile")
                                }, d.createElement(Me.BrandedHeader, {
                                    branding: "TA_GREEN"
                                })), d.createElement("div", {
                                    className: o ? "".concat("social-shelves-ShelfVideoSection__video_wrap--p3sDP", " ui_column is-8 is-9-widescreen is-12-mobile") : ""
                                }, d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__section_wrap--2prAf"
                                }, d.createElement(ze, {
                                    key: "player_".concat(l.id),
                                    source: l.sources[0].url,
                                    width: "100%",
                                    height: o ? "100%" : "149px",
                                    preload: "auto",
                                    trackingModule: f,
                                    mediaId: l.id,
                                    autoplayWhenVisible: !1,
                                    ref: n.videoPlayer,
                                    poster: l.posterSizes[0].url,
                                    muted: !1
                                }))), o && d.createElement(De.a, {
                                    video: i,
                                    actor: l.userProfile,
                                    deleteObject: n.props.deleteObject,
                                    onClose: n.onCloseModal
                                })), d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__duration--2iLnh"
                                }, b), !o && d.createElement(F.Link, {
                                    className: "social-shelves-ShelfVideoSection__video_mask--2K2Yc",
                                    to: Object(Ae.a)({}, r, {
                                        modal: "VideoShelf_".concat(s, "_").concat(l.id)
                                    }),
                                    onClick: function t(a) {
                                        e(a, "feedClick"), n.onOpenModal()
                                    }
                                })), d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__below_video--7_rlk"
                                }, l.caption && d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__caption_wrap--1F2Ny"
                                }, !o && d.createElement(F.Link, {
                                    to: Object(Ae.a)({}, r, {
                                        modal: "VideoShelf_".concat(s, "_").concat(l.id)
                                    }),
                                    className: "social-shelves-ShelfVideoSection__caption--3b4wr",
                                    onClick: function t(a) {
                                        e(a, "feedClick"), n.onOpenModal()
                                    }
                                }, d.createElement(se.Abbreviate, {
                                    text: l.caption,
                                    max: 50
                                }))), d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__poi_text--2UbyC"
                                }, t), d.createElement("div", {
                                    className: "social-shelves-ShelfVideoSection__display_name_wrapper--psau2"
                                }, d.createElement(F.Link, {
                                    className: u,
                                    href: null === (a = l.userProfile) || void 0 === a ? void 0 : null === (c = a.route) || void 0 === c ? void 0 : c.url,
                                    onClick: function t(n) {
                                        return e(n, "userClick", {
                                            userId: l.userProfile.userId
                                        })
                                    }
                                }, l.userProfile.displayName))))
                            })
                        }
                    }]), t
                }(d.Component),
                Ve = function e(t) {
                    return d.createElement(F.RouteConsumer, null, function(e) {
                        var n = e.route,
                            i = n.modal,
                            o = Object(Le.a)(n, ["modal"]),
                            r = e.navigate;
                        return t.video.object && d.createElement("div", {
                            className: "social-shelves-ShelfVideoSection__video_border--2_U9t"
                        }, d.createElement(Be, Object(a.a)({
                            navigate: r,
                            route: o,
                            isOpen: i && i === "VideoShelf_".concat(t.uniqueKey, "_").concat(t.video.object.id)
                        }, t)))
                    })
                };
            Ve.defaultProps = {
                deleteObject: null
            };
            var Ue = Ve,
                We = function e(t) {
                    var n = t.dmoShelfItem,
                        a = t.geoShelfPhotoClassName;
                    return d.createElement("div", {
                        className: "social-sections-dmoSection-DmoSectionPhotoWrap__photo_wrap--2XdmE"
                    }, d.createElement("div", {
                        className: "" !== a ? a : "social-sections-dmoSection-DmoSectionPhotoWrap__photo--3_k6-"
                    }, d.createElement(ue.ResponsiveImage, {
                        sources: n.photo.photoSizes,
                        width: "100%",
                        height: "100%",
                        borderRadius: "2px"
                    })))
                };
            We.defaultProps = {
                geoShelfPhotoClassName: ""
            };
            var He = We,
                qe = function e(t) {
                    var n;
                    switch (t.dmoShelfItem.linkText) {
                        case "View Event":
                        case "View Article":
                        case "View Collection":
                            n = "globe-world";
                            break;
                        default:
                            n = ""
                    }
                    return d.createElement("div", {
                        className: "social-sections-dmoSection-NoDmoPhotoAvailable__no_photo_available--1tF3X"
                    }, d.createElement(le.Icon, {
                        name: n,
                        className: "social-sections-dmoSection-NoDmoPhotoAvailable__icon--LUvLn"
                    }))
                },
                Ge = function e(t) {
                    var n = t.dmoShelfItem,
                        a = n.photo,
                        i = function e(t) {
                            var n;
                            return t && t.url && I.a.warn("ShelfDmoSection using location.url instead of location.route.url!"), (null == t ? void 0 : null === (n = t.route) || void 0 === n ? void 0 : n.url) || (null == t ? void 0 : t.url)
                        }(n);
                    return d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", {
                            className: "ui_shelf_item_container ui_geo_shelf_item ".concat("social-shelves-ShelfDmoSection__section--2WR5v", " ")
                        }, d.createElement(F.Link, {
                            href: i,
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            },
                            className: "ui_poi_thumbnail"
                        }, a ? d.createElement(He, {
                            dmoShelfItem: n,
                            geoShelfPhotoClassName: "social-shelves-ShelfDmoSection__shelfForPhoto--2eizV"
                        }) : d.createElement("span", {
                            className: "social-shelves-ShelfDmoSection__shelfForPhoto--2eizV"
                        }, d.createElement(qe, {
                            dmoShelfItem: n
                        }))), d.createElement(F.Link, {
                            href: i,
                            className: "item poi_name ui_link",
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-ShelfDmoSection__name--1brTy"
                        }, n.title)))
                    })
                },
                Ke = function e(t) {
                    var n = t.filterItem,
                        a = n.url,
                        i = n.thumbnail,
                        o = n.title,
                        r = n.count;
                    return d.createElement(L.InteractionLogger, null, function(e) {
                        return d.createElement("div", null, d.createElement(F.Link, {
                            href: a,
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            },
                            className: "ui_poi_thumbnail"
                        }, d.createElement("div", {
                            className: "social-shelves-ShelfFilterSection__photo_wrap--15sWP"
                        }, d.createElement(ue.ResponsiveImage, {
                            sources: i.photoSizes,
                            width: "100%",
                            height: "100%"
                        }))), d.createElement(F.Link, {
                            href: a,
                            className: "item poi_name ui_link ".concat("social-shelves-ShelfFilterSection__text--2ZGQC"),
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, d.createElement("span", {
                            className: "social-shelves-ShelfFilterSection__name--weO1a"
                        }, Object(z.localize)("hotels.type_and_count", {
                            0: o,
                            1: z.globalize.formatNumber("integer", r)
                        }))))
                    })
                },
                Qe = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(v.a)(Object(p.a)(Object(p.a)(n)), "state", {
                            displayPrice: 0
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            var t = this,
                                n = this.props,
                                a = n.topDestShelfInfo,
                                i = n.currency;
                            if (a && !(a.price <= 0)) {
                                var o = new URLSearchParams({
                                    price: a.price,
                                    fromCurrency: a.currency,
                                    toCurrency: i
                                });
                                fetch("/data/1.0/currency/convertCurrency?".concat(o.toString()), {
                                    method: "GET",
                                    credentials: "same-origin"
                                }).then(function(e) {
                                    if (e.ok) return e;
                                    throw Error(e.statusText)
                                }).then(function(e) {
                                    return e.json()
                                }).then(function(e) {
                                    var n = "USD" === i || "CAD" === i ? Math.ceil(e) : Math.round(e);
                                    t.setState({
                                        displayPrice: n
                                    })
                                }).catch(function(e) {
                                    I.a.error("Error converting currency in flights destination shelf: ".concat(e.message))
                                })
                            }
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props.topDestShelfInfo,
                                a = n.thumbnail,
                                i = n && n.route && n.route.url ? n.route.url : "#";
                            return d.createElement(L.InteractionLogger, null, function(e) {
                                return d.createElement("div", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__section--1Xy4H"
                                }, d.createElement(d.Fragment, null, d.createElement(F.Link, {
                                    href: i,
                                    className: "ui_poi_thumbnail",
                                    onClick: function t(n) {
                                        return e(n, "feedClick")
                                    }
                                }, a ? d.createElement("div", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__photo_wrap--1U2N0"
                                }, d.createElement("div", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__shelfForPhoto--35HVZ"
                                }, d.createElement(ue.ResponsiveImage, {
                                    sources: n.thumbnail.photoSizes,
                                    width: "100%",
                                    height: "100%",
                                    borderRadius: "2px"
                                }))) : d.createElement("span", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__shelfForPhoto--35HVZ"
                                }, " ", d.createElement("div", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__no_photo_available--3lXsE"
                                }, d.createElement(le.Icon, {
                                    name: "flights",
                                    className: "social-shelves-ShelfFlightsTopDestSection__icon--1_mAw"
                                })))), d.createElement(F.Link, {
                                    href: i,
                                    className: "item poi_name ui_link",
                                    onClick: function t(n) {
                                        return e(n, "feedClick")
                                    }
                                }, d.createElement("span", {
                                    className: "social-shelves-ShelfFlightsTopDestSection__name--2h6d4"
                                }, n.locationName), t.state.displayPrice > 0 && d.createElement("span", {
                                    className: "".concat("social-shelves-ShelfFlightsTopDestSection__name--2h6d4", " ").concat("social-shelves-ShelfFlightsTopDestSection__price--3JDKb")
                                }, Object(z.localize)("from_price_fffff32b", {
                                    0: z.globalize.formatCurrencyInteger(t.state.displayPrice)
                                }))), d.createElement(F.Link, {
                                    href: i,
                                    onClick: function t(n) {
                                        return e(n, "feedClick")
                                    }
                                })))
                            })
                        }
                    }]), t
                }(d.PureComponent),
                Ye = Object(b.connect)(function(e, t) {
                    return Object(Ae.a)({}, t, {
                        currency: e.i18n.currencyCode
                    })
                })(Qe),
                Xe = function e(t) {
                    var n = t.item,
                        a = t.updateModalState,
                        i = t.shelfKey,
                        o = n.object;
                    if (!o || !o.__typename) return null;
                    var r, s = "shelfKey";
                    switch (i && (s = i), o.__typename) {
                        case "LocationInformation":
                            r = d.createElement(Ee, {
                                location: o,
                                title: n.title,
                                defaultSnippet: n.defaultSnippet
                            });
                            break;
                        case "CruiseInfoCruiseSearchInfo":
                            r = d.createElement(Ie, {
                                cruiseSearchInfo: o
                            });
                            break;
                        case "Trip":
                            r = d.createElement(Pe, {
                                trip: o
                            });
                            break;
                        case "DmoShelfItem":
                            r = d.createElement(Ge, {
                                dmoShelfItem: o
                            });
                            break;
                        case "LocationFilterShelf":
                            r = d.createElement(Ke, {
                                filterItem: o
                            });
                            break;
                        case "Video":
                            r = d.createElement(Ue, {
                                video: n,
                                updateModalState: a,
                                uniqueKey: s
                            });
                            break;
                        case "TopDestShelfInfo":
                            r = d.createElement(Ye, {
                                topDestShelfInfo: o
                            });
                            break;
                        default:
                            return I.a.error("Unknown Social component: ".concat(o.__typename)), null
                    }
                    return n.id ? d.createElement(L.ItemIdContext.Provider, {
                        value: {
                            itemId: n.id
                        }
                    }, d.createElement(d.Fragment, null, r)) : d.createElement(d.Fragment, null, r)
                };
            Xe.defaultProps = {
                member: void 0,
                shelfKey: void 0
            };
            var Je = Xe,
                Ze = function e(t) {
                    var n = t.title,
                        a = t.subtitle,
                        i = t.url,
                        o = t.onClick,
                        r = t.geoShelfHeader,
                        s = t.geoShelfSubtitle,
                        l = t.geoShelfSeeAll;
                    return i ? d.createElement("div", {
                        className: "" === r ? "social-shelves-ShelfHeader__header_wrap--2X7h3" : r
                    }, d.createElement("div", null, d.createElement(F.Link, {
                        href: i,
                        className: "ui_link ui_header h2 ".concat("" === r ? "" : "ui_geo_shelf_header_h2"),
                        onClick: o
                    }, n), a ? d.createElement(F.Link, {
                        href: i,
                        className: "ui_link ".concat("" === s ? "social-shelves-ShelfHeader__subtitle--mRpJg" : s),
                        onClick: o
                    }, a) : ""), d.createElement(F.Link, {
                        href: i,
                        className: "ui_link ".concat("" === l ? "social-shelves-ShelfHeader__see_all--Df75E" : l),
                        onClick: o
                    }, Object(z.localize)("social_see_more"), " ")) : d.createElement("div", {
                        className: "" === r ? "social-shelves-ShelfHeader__header_wrap--2X7h3" : r
                    }, d.createElement("span", {
                        className: "ui_header h2 ".concat("" === r ? "" : "ui_geo_shelf_header_h2")
                    }, n))
                };
            Ze.defaultProps = {
                onClick: void 0
            };
            var $e = Ze,
                et = function e(t) {
                    return "LOCATION_LIST" === t || "LOCATION_FILTERS" === t || "VIDEOS" === t || "TRIPS" === t || "DMO_INFO" === t || "CRUISE_SEARCH_ITEM_LIST" === t || "FLIGHTS_DESTINATION_ITEM_LIST" === t ? ke.header_wrap_for_geo : ""
                },
                tt = function e(t) {
                    return "DMO_INFO" === t ? ke.header_subtitle : ""
                },
                nt = function e(t) {
                    return "LOCATION_LIST" === t || "LOCATION_FILTERS" === t || "VIDEOS" === t || "TRIPS" === t || "DMO_INFO" === t || "CRUISE_SEARCH_ITEM_LIST" === t ? ke.see_all_for_geo : ""
                },
                at = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(v.a)(Object(p.a)(Object(p.a)(n)), "state", {
                            hasTrackedScroll: !1,
                            isMounted: !1,
                            modalIsOpen: !1
                        }), Object(v.a)(Object(p.a)(Object(p.a)(n)), "updateModalState", function(e) {
                            n.setState({
                                modalIsOpen: e
                            })
                        }), Object(v.a)(Object(p.a)(Object(p.a)(n)), "renderItem", function(e, t, a, i) {
                            var o, r, s = e.object;
                            if (!s) return null;
                            if ("Video" === s.__typename) o = s.id, r = "is-4 is-6-desktop is-8-mobile";
                            else if ("Trip" === s.__typename) o = s.id, r = "is-6-desktop";
                            else {
                                var l;
                                o = s.locationId || (null === (l = s.route) || void 0 === l ? void 0 : l.url) || s.url || s.name, r = "is-4"
                            }
                            var c = e.id ? e.id : o,
                                u = "".concat(o, ":").concat(i);
                            return d.createElement("div", {
                                key: u,
                                ref: t(u),
                                className: D()("ui_column", r, ke.shelf_item)
                            }, d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: c
                                }
                            }, d.createElement(Je, {
                                item: e,
                                member: a,
                                updateModalState: n.updateModalState,
                                shelfKey: n.props.shelfKey
                            })))
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            this.setState({
                                isMounted: !0
                            })
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t, n = this,
                                a = this.props,
                                i = a.shelf,
                                o = a.member,
                                r = (i.items || []).filter(function(e) {
                                    return !(!e || !e.object)
                                }).slice(0, this.props.maxShelfItems);
                            if (r.length < this.props.minShelfItems) return null;
                            if (function e(t) {
                                    return "LOCATION_LIST" === t || "LOCATION_FILTERS" === t || "DMO_ITEM" === t
                                }(i.type) && function e(t) {
                                    return !t || 0 === t.length
                                }(i.title)) return I.a.error("Shelf missing title, shelfId: ".concat(i.id, ", shelfType: ").concat(i.type || "")), null;
                            t = "LOCATION_LIST" === i.type || "LOCATION_FILTERS" === i.type || "DMO_INFO" === i.type || "CRUISE_SEARCH_ITEM_LIST" === i.type || "FLIGHTS_DESTINATION_ITEM_LIST" === i.type ? ke.shelf_items_for_geo : "VIDEOS" === i.type || "TRIPS" === i.type ? ke.shelf_items_for_ugc : ke.shelf_items;
                            var s = {
                                left: 0,
                                top: 0,
                                bottom: 0,
                                right: 100
                            };
                            return d.createElement(L.InteractionLogger, null, function(e) {
                                return d.createElement("div", {
                                    className: "".concat(ke.shelf, " ui_card")
                                }, d.createElement(fe.a, {
                                    section: i
                                }), d.createElement($e, {
                                    title: i.title,
                                    subtitle: i.subtitle,
                                    url: i.url,
                                    geoShelfHeader: et(i.type),
                                    geoShelfSubtitle: tt(i.type),
                                    geoShelfSeeAll: nt(i.type),
                                    onClick: function t(n) {
                                        return e(n, "seeAll")
                                    }
                                }), d.createElement("div", {
                                    className: "".concat(ke.relative, " ").concat(t, " ui_container")
                                }, d.createElement(u.TabActiveContext.Consumer, null, function(t) {
                                    return d.createElement(be.ScrollAffordance, {
                                        className: "ui_columns ".concat(ke.carousel, " ").concat(n.state.modalIsOpen ? ke.modalIsOpen : ""),
                                        top: !1,
                                        bottom: !1,
                                        onScroll: n.state.hasTrackedScroll ? void 0 : function(t) {
                                            n.setState({
                                                hasTrackedScroll: !0
                                            }), e(t, "shelfScroll")
                                        },
                                        threshold: 100,
                                        minDistance: 50,
                                        snapToEdge: s,
                                        shift: {
                                            right: {
                                                top: -24
                                            },
                                            left: {
                                                top: -24
                                            }
                                        },
                                        isActive: !t || t.isActive
                                    }, function(e) {
                                        return r.slice(0, n.state.isMounted ? void 0 : 3).map(function(t, a) {
                                            return n.renderItem(t, e, o, a)
                                        })
                                    })
                                })))
                            })
                        }
                    }]), t
                }(d.Component);
            Object(v.a)(at, "defaultProps", {
                minShelfItems: 3,
                maxShelfItems: 8,
                member: void 0,
                shelfKey: "",
                reasonFor: void 0
            });
            var it = at,
                ot = n("@ta/social.engagement-card"),
                rt = function e(t) {
                    var n, a, i, o = t.mixerPlacement,
                        r = t.puid,
                        s = t.locationId,
                        l = t.viewportCategory,
                        c = t.member,
                        u = t.section,
                        m = t.actor,
                        p = t.propsItem,
                        v = t.deleteObjectFunc,
                        b = t.loggedInMemberAuthorization,
                        f = t.untagObjectFunc,
                        k = t.loggedInUserId,
                        g = p.object,
                        _ = function e() {
                            v(g.__typename, Object(h.getObjectId)(g))
                        },
                        j = function e() {
                            return f(g)
                        };
                    switch (p.object.__typename) {
                        case "Review":
                            i = "HOLD" !== (null === (n = p.object) || void 0 === n ? void 0 : n.reviewStatus) && d.createElement(X.a, {
                                key: p.object.id,
                                review: p,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                section: u,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                viewportCategory: l,
                                layout: "FULL"
                            });
                            break;
                        case "Photo":
                            i = d.createElement(J.c, {
                                key: p.object.id,
                                photo: p,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l,
                                layout: "FULL"
                            });
                            break;
                        case "MediaBatch":
                            var S = p.object.media.filter(Boolean);
                            S.length > 0 && (i = d.createElement(Z.a, {
                                metadata: p.object,
                                photos: S,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                layout: "FULL"
                            }));
                            break;
                        case "Video":
                            i = d.createElement($.c, {
                                key: p.object.id,
                                video: p,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            });
                            break;
                        case "ForumPost":
                            i = d.createElement(F.RouteConsumer, null, function(e) {
                                var t = e.route;
                                return d.createElement(d.Fragment, null, "forum" === t.tab ? d.createElement(ne, {
                                    key: p.object.id,
                                    post: p
                                }) : d.createElement(ae.a, {
                                    key: p.object.id,
                                    post: p,
                                    isSingleObject: !0,
                                    member: c,
                                    actor: m,
                                    deleteObject: _,
                                    loggedInMemberAuthorization: b
                                }))
                            });
                            break;
                        case "LinkPost":
                            i = d.createElement(ie.a, {
                                key: p.object.postId,
                                post: p,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            });
                            break;
                        case "Trip":
                            if ("TRIPS" === u.type) break;
                            if ("PUBLIC" !== p.object.tripStatus || !Object(T.featureIsEnabled)("trips_2018_home_profile")) {
                                i = d.createElement("span", null);
                                break
                            }
                            i = d.createElement(oe.a, {
                                key: p.object.id,
                                trip: p,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                isSingleObject: !0
                            });
                            break;
                        case "Repost":
                            i = d.createElement(re.a, {
                                key: p.object.repostId,
                                repost: p,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            })
                    }
                    if (!i) switch (u.type) {
                        case "BRAND_MESSAGING":
                            break;
                        case "ENGAGEMENT":
                            u.items[0] && u.items[0].id && (i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(ot.EngagementCard, {
                                title: u.items[0].object.title,
                                cardType: u.items[0].id,
                                description: u.items[0].object.body,
                                actionText: u.items[0].object.actionText
                            })));
                            break;
                        case "LOCATION_FILTERS":
                        case "LOCATION_LIST":
                        case "CRUISE_SEARCH_ITEM_LIST":
                        case "FLIGHTS_DESTINATION_ITEM_LIST":
                            i = d.createElement(it, {
                                minListItems: "MOBILE" === l ? 0 : 3,
                                maxListItems: "MOBILE" === l ? 1 / 0 : 3,
                                shelf: u,
                                locationId: s,
                                mixerPlacement: o,
                                puid: r,
                                key: u.id
                            });
                            break;
                        case "PHOTO":
                            i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(J.c, {
                                photo: u.items[0],
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l,
                                layout: "FULL"
                            }));
                            break;
                        case "MediaBatch":
                            u.items.filter(Boolean).length > 0 && (i = d.createElement(Z.a, {
                                metadata: u.metadata,
                                photos: u.items,
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                untagObject: j,
                                loggedInMemberAuthorization: b,
                                layout: "FULL"
                            }));
                            break;
                        case "REVIEW":
                            i = "HOLD" !== (null === (a = u.items[0].object) || void 0 === a ? void 0 : a.reviewStatus) && d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(X.a, {
                                review: u.items[0],
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                section: u,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                viewportCategory: l,
                                layout: "FULL"
                            }));
                            break;
                        case "VIDEOS":
                            i = d.createElement(it, {
                                minListItems: "MOBILE" === l ? 0 : 3,
                                maxListItems: "MOBILE" === l ? 20 : 3,
                                shelf: u,
                                locationId: s,
                                mixerPlacement: o,
                                puid: r,
                                member: c,
                                key: u.id,
                                shelfKey: u.id,
                                viewportCategory: l
                            });
                            break;
                        case "VIDEO":
                            i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement($.c, {
                                video: u.items[0],
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            }));
                            break;
                        case "LINK_POST":
                            i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(ie.a, {
                                post: u.items[0],
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            }));
                            break;
                        case "REPOST":
                            i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(re.a, {
                                repost: u.items[0],
                                isSingleObject: !0,
                                member: c,
                                actor: m,
                                deleteObject: _,
                                loggedInMemberAuthorization: b,
                                untagObject: j,
                                loggedInUserId: k,
                                viewportCategory: l
                            }));
                            break;
                        case "PROFILE_LIST":
                            u.items.length > 2 ? i = d.createElement(ve.FollowShelf, {
                                isSingleObject: !0,
                                suggestedFollowees: u.items,
                                title: u.title,
                                shelfId: u.id
                            }) : I.a.error("got a PROFILE_LIST type with not enough profiles");
                            break;
                        case "DMO_INFO":
                            i = d.createElement(it, {
                                minListItems: "MOBILE" === l ? 0 : 3,
                                maxListItems: "MOBILE" === l ? 20 : 3,
                                shelf: u,
                                locationId: s,
                                mixerPlacement: o,
                                puid: r,
                                member: c,
                                key: u.id,
                                shelfKey: u.id,
                                reasonFor: "SPONSORED"
                            });
                            break;
                        case "TRIPS":
                            i = d.createElement(it, {
                                minListItems: "MOBILE" === l ? 0 : 3,
                                maxListItems: "MOBILE" === l ? 20 : 3,
                                shelf: u,
                                locationId: s,
                                mixerPlacement: o,
                                puid: r,
                                member: c,
                                key: u.id,
                                shelfKey: u.id
                            });
                            break;
                        case "TRIP":
                            if (u.items[0] && u.items[0].object && "PUBLIC" !== u.items[0].object.tripStatus) {
                                I.a.error("Got a ".concat(u.items[0].object.tripStatus, " trip with id ").concat(u.items[0].object.id, " when trying to create TripSection."));
                                break
                            }
                            i = d.createElement(L.ItemIdContext.Provider, {
                                value: {
                                    itemId: u.items[0].id
                                }
                            }, d.createElement(oe.a, {
                                trip: u.items[0],
                                member: c,
                                actor: m,
                                deleteObject: _,
                                untagObject: j,
                                loggedInUserId: k,
                                isSingleObject: !0,
                                loggedInMemberAuthorization: b
                            }));
                            break;
                        case "GEO_OVERVIEW":
                            i = d.createElement(pe, {
                                overview: u.items[0]
                            });
                            break;
                        default:
                            I.a.warn("unimplemented section type: ".concat(u.type))
                    }
                    return d.createElement(q.ErrorBoundary, null, i || null)
                };
            rt.defaultProps = {
                loggedInMemberAuthorization: void 0
            };
            var st = rt,
                lt = {
                    namespace: "mixer"
                },
                ct = function(e) {
                    function t() {
                        return Object(o.a)(this, t), Object(s.a)(this, Object(l.a)(t).apply(this, arguments))
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            var t = this.props.callback;
                            t && t()
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            return this.props.children
                        }
                    }]), t
                }(d.Component),
                dt = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(v.a)(Object(p.a)(Object(p.a)(n)), "replacedUrlToRestoreOnPop", void 0), Object(v.a)(Object(p.a)(Object(p.a)(n)), "allSectionRefs", {}), Object(v.a)(Object(p.a)(Object(p.a)(n)), "lastVisibleSectionId", void 0), Object(v.a)(Object(p.a)(Object(p.a)(n)), "checkPopState", function(e) {
                            e.state && e.state.fid && n.replacedUrlToRestoreOnPop && window.history.replaceState(null, "", n.replacedUrlToRestoreOnPop)
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            this.scrollToLastVisibleSection(), window.addEventListener("popstate", this.checkPopState)
                        }
                    }, {
                        key: "componentDidUpdate",
                        value: function e() {
                            this.lastVisibleSectionId && this.fixupHistoryWithImpressionId(void 0)
                        }
                    }, {
                        key: "componentWillUnmount",
                        value: function e() {
                            window.removeEventListener("popstate", this.checkPopState)
                        }
                    }, {
                        key: "scrollToLastVisibleSection",
                        value: function e() {
                            this.props && this.props.feedIdToRestore && this.props.socialFeed && this.props.socialFeed.scrollToSectionId && this.props.socialFeed.scrollToSectionId in this.allSectionRefs && (window.history.scrollRestoration && (window.history.scrollRestoration = "manual"), this.allSectionRefs[this.props.socialFeed.scrollToSectionId].current.scrollIntoView(!1))
                        }
                    }, {
                        key: "constructRouteFromCurrentLocation",
                        value: function e() {
                            var t = "/" === window.location.pathname ? "" : window.location.pathname;
                            return Object(F.parseUrl)("".concat(t, "/").concat(window.location.search)) || {
                                page: "Home"
                            }
                        }
                    }, {
                        key: "fixupHistoryWithImpressionId",
                        value: function e(t) {
                            if (Object(T.featureIsEnabled)("social_allow_feed_restore") && this.props.socialFeed && this.props.isActive) {
                                var n = this.constructRouteFromCurrentLocation();
                                if (n.fid && n.fid === this.props.socialFeed.impressionId) return;
                                n.fid = this.props.socialFeed.impressionId;
                                var a = Object(F.buildUrl)(n);
                                if (a && window.location.pathname && -1 === a.indexOf(window.location.pathname)) return;
                                window.history.replaceState(n, "", a), this.replacedUrlToRestoreOnPop || (this.replacedUrlToRestoreOnPop = window.location.href)
                            }
                        }
                    }, {
                        key: "checkForLastVisibleSectionChange",
                        value: function e(t, n) {
                            var a, i, o = window.innerHeight;
                            Object.entries(this.allSectionRefs).forEach(function(e) {
                                var t = Object(m.a)(e, 2),
                                    n = t[0],
                                    r = t[1];
                                if (r) {
                                    var s = r;
                                    s.current && s.current.getBoundingClientRect().top + 60 <= o && (!a || a.current.getBoundingClientRect().top < s.current.getBoundingClientRect().top) && (a = s, i = n)
                                }
                            }), i && i !== this.lastVisibleSectionId && (n && (this.lastVisibleSectionId = i, this.fixupHistoryWithImpressionId(n)), function e(t) {
                                var n = t.split("_");
                                if (n && n.length > 1) {
                                    var a = parseInt(n[n.length - 1], 10),
                                        i = x.a.get("maxTASocialScroll");
                                    a && (!i || a > i) && x.a.set("maxTASocialScroll", a)
                                }
                            }(i), t({
                                fetchPolicy: "no-cache",
                                variables: {
                                    allowedTypes: this.props.allowedTypes,
                                    locationId: this.props.locationId || 0,
                                    owner: this.props.userId,
                                    placement: this.props.mixerPlacement,
                                    puid: this.props.puid,
                                    sessionType: this.props.sessionType,
                                    sectionId: i
                                }
                            }))
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = [d.createElement(C.VideoPlayerProvider, {
                                    key: .1
                                }, d.createElement(_.DeleteAction, null, function(e) {
                                    return d.createElement(R.b, null, function(n) {
                                        return d.createElement(y.a, {
                                            staggerDurationBy: "30",
                                            duration: 400,
                                            enterAnimation: "none",
                                            leaveAnimation: "none"
                                        }, t.props.socialFeed.sections.map(function(a, i) {
                                            return function e(n, a, i, o) {
                                                var r = n.actor;
                                                return n.items.filter(function(e, t) {
                                                    return 0 === t
                                                }).filter(function(e) {
                                                    return !t.props.card || "".concat(e.object.__typename, "_").concat(function e(t) {
                                                        switch (t.object.__typename) {
                                                            case "LinkPost":
                                                                return t.object.postId;
                                                            case "Repost":
                                                                return t.object.repostId;
                                                            default:
                                                                return t.object.id
                                                        }
                                                    }(e)) !== t.props.card
                                                }).filter(function(e) {
                                                    var n = Object(h.getObjectId)(e.object),
                                                        a = e.object.__typename;
                                                    return !t.props.suppressedContent.some(function(e) {
                                                        return g()(e, [a, n])
                                                    })
                                                }).map(function(e) {
                                                    var s = t.allSectionRefs[n.id] || d.createRef();
                                                    t.allSectionRefs[n.id] = s;
                                                    var l = e.id || e.object.id || e.object.postId || e.object.repostId || a;
                                                    return d.createElement(Y, {
                                                        section: n,
                                                        key: l
                                                    }, function() {
                                                        return d.createElement("div", {
                                                            ref: s
                                                        }, d.createElement(L.FeedSectionIdContext.Provider, {
                                                            value: n.id
                                                        }, d.createElement(L.ItemIdContext.Provider, {
                                                            value: {
                                                                itemId: l
                                                            }
                                                        }, st({
                                                            mixerPlacement: t.props.mixerPlacement,
                                                            puid: t.props.puid,
                                                            locationId: t.props.locationId,
                                                            viewportCategory: t.props.viewportCategory,
                                                            member: t.props.member,
                                                            section: n,
                                                            actor: r,
                                                            propsItem: e,
                                                            sectionId: n.id,
                                                            deleteObjectFunc: i,
                                                            loggedInMemberAuthorization: t.props.loggedInMemberAuthorization,
                                                            untagObjectFunc: o,
                                                            loggedInUserId: t.props.loggedInUserId
                                                        }))))
                                                    })
                                                })
                                            }(a, i, e, n)
                                        }))
                                    })
                                }))];
                            return d.createElement(F.RouteConsumer, null, function(e) {
                                var a = e.route,
                                    i = e.navigate;
                                return d.createElement(d.Fragment, null, d.createElement(f.Mutation, {
                                    mutation: A.SetSocialFeedPosition
                                }, function(e) {
                                    var o = function n() {
                                        return t.checkForLastVisibleSectionChange(e, i)
                                    };
                                    return d.createElement(d.Fragment, null, d.createElement(H.a, {
                                        callback: o,
                                        throttle: 1e3
                                    }), d.createElement(W.a, {
                                        callback: o,
                                        throttle: 1e3
                                    }), d.createElement(ct, {
                                        callback: function n() {
                                            return t.checkForLastVisibleSectionChange(e, null)
                                        }
                                    }, "forum" === a.tab ? d.createElement(V, null, n) : d.createElement(d.Fragment, null, n)))
                                }))
                            })
                        }
                    }]), t
                }(d.Component),
                ut = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(v.a)(Object(p.a)(Object(p.a)(n)), "state", {
                            showingTopSkeletons: !1,
                            showingBottomSkeletons: n.shouldStartWithfiniteScroll()
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "shouldComponentUpdate",
                        value: function e(t, n) {
                            for (var a = ["allowedTypes"], i = ["refetch", "fetchMore", "updateFeed", "feedIdToRestore", "fid", "member"].concat(a), o = !Object(U.shallowEquals)(O()(t, i), O()(this.props, i)), r = !1, s = 0; s < a.length; s++) r = r || !g()(this.props[a[s]], t[a[s]]);
                            var l = !Object(U.shallowEquals)(this.state, n);
                            return o || l || r
                        }
                    }, {
                        key: "componentDidUpdate",
                        value: function e(t) {
                            var n = t.newContentSubmittedTimestamp ? t.newContentSubmittedTimestamp.getTime() : 0;
                            (this.props.newContentSubmittedTimestamp ? this.props.newContentSubmittedTimestamp.getTime() : 0) > n && (this.props.refetch({
                                reset: !0
                            }), window.scrollTo(0, 0))
                        }
                    }, {
                        key: "shouldStartWithfiniteScroll",
                        value: function e() {
                            return !!this.props.feedIdToRestore && this.props.socialFeed && this.props.socialFeed.hasPrevious
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this;
                            return void 0 === this.props.socialFeed ? null : d.createElement(L.TrackingNamespaceContext.Provider, {
                                value: lt
                            }, d.createElement(S.a, {
                                hasMore: this.props.socialFeed.hasMore,
                                loadMore: function e() {
                                    return t.props.updateFeed(!1)
                                },
                                throttle: 50,
                                threshold: 3e3,
                                infiniteLoadOnMount: this.shouldStartWithfiniteScroll()
                            }, function(e, n, i) {
                                return d.createElement("div", {
                                    id: "content",
                                    ref: n
                                }, d.createElement(L.InteractionLogger, null, function(e) {
                                    return d.createElement(j.ShowMore, {
                                        onClick: function n(a) {
                                            t.setState({
                                                showingTopSkeletons: !0
                                            }), e(a, "showMore", {
                                                mixerImpressionId: t.props.socialFeed ? t.props.socialFeed.impressionId : ""
                                            }), t.props.updateFeed(!0, function() {
                                                return t.setState({
                                                    showingTopSkeletons: !1
                                                })
                                            })
                                        },
                                        hasMore: !!t.props.socialFeed && t.props.socialFeed.hasPrevious,
                                        showButton: !t.state.showingTopSkeletons,
                                        goingBackwards: !0
                                    }, d.createElement(P.FeedLoadingSkeleton, {
                                        numSections: 1
                                    }))
                                }), d.createElement(F.RouteConsumer, null, function(e) {
                                    var n = e.route.card;
                                    return d.createElement(dt, Object(a.a)({}, t.props, {
                                        card: n,
                                        error: t.props.error,
                                        member: t.props.member
                                    }))
                                }), d.createElement(L.InteractionLogger, null, function(e) {
                                    return d.createElement(j.ShowMore, {
                                        onClick: function n(a) {
                                            t.state.showingBottomSkeletons ? I.a.error("Skeletons were visible, yet the button got clicked?!  We may be missing a feed update.") : t.setState({
                                                showingBottomSkeletons: !0
                                            }), e(a, "showMore", {
                                                mixerImpressionId: t.props.socialFeed.impressionId
                                            }), i()
                                        },
                                        hasMore: t.props.socialFeed.hasMore,
                                        showButton: !t.state.showingBottomSkeletons
                                    }, d.createElement(P.FeedLoadingSkeleton, {
                                        numSections: 1
                                    }))
                                }))
                            }))
                        }
                    }]), t
                }(d.Component),
                mt = Object(b.connect)(function(e) {
                    return {
                        loggedInUserId: e.auth.loggedInUserId,
                        suppressedContent: Object(_.getState)(e).suppressedContent
                    }
                })(ut),
                pt = function(e) {
                    function t() {
                        return Object(o.a)(this, t), Object(s.a)(this, Object(l.a)(t).apply(this, arguments))
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = function e(n, a) {
                                    return t.props.fetchMore({
                                        variables: {
                                            reset: !1,
                                            restoreFromFeedId: void 0,
                                            goBackwards: n
                                        },
                                        updateQuery: function e(t, o) {
                                            var r, s = o.fetchMoreResult;
                                            return s ? (s.socialFeed.feedWasReset ? (r = s.socialFeed.sections, window.scrollTo(0, 0)) : r = n ? [].concat(Object(i.a)(s.socialFeed.sections), Object(i.a)(t.socialFeed.sections)) : [].concat(Object(i.a)(t.socialFeed.sections), Object(i.a)(s.socialFeed.sections)), a && a(), Object.assign({}, t, {
                                                socialFeed: {
                                                    sections: r,
                                                    reset: s.socialFeed.feedWasReset,
                                                    hasMore: s.socialFeed.hasMore,
                                                    hasPrevious: s.socialFeed.hasPrevious,
                                                    impressionId: s.socialFeed.impressionId,
                                                    __typename: t.socialFeed.__typename
                                                }
                                            })) : t
                                        }
                                    })
                                };
                            return d.createElement(u.TabActiveContext.Consumer, null, function(e) {
                                return d.createElement(mt, Object(a.a)({}, t.props, {
                                    updateFeed: n,
                                    reset: t.props.socialFeed && t.props.socialFeed.feedWasReset,
                                    socialFeed: t.props.socialFeed,
                                    refetch: t.props.refetch,
                                    error: t.props.error,
                                    locationId: t.props.locationId,
                                    isActive: !e || e.isActive
                                }))
                            })
                        }
                    }]), t
                }(d.Component);
            t.a = pt
        },
        "./packages/social/feed/MemberProfile.fragment.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/social/feed/feedFragments/ContributionCount.fragment.gql"),
                i = n("./roots/social/profile/ProfileBasicFields.fragment.gql"),
                o = n("./packages/social/feed/feedFragments/HometownFields.fragment.gql"),
                r = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "MemberForProfile"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MemberProfile"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ProfileBasicFields"
                                },
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "avatar"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hometown"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "HometownFields"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followerCount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followeeCount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "website"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bio"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "memberCreated"
                                },
                                name: {
                                    kind: "Name",
                                    value: "created"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }]
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ContributionCount"
                                },
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "coverPhoto"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "memberType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isBrand"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isDestinationExpert"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isDestinationMarketer"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isInfluencer"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isTAStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "expertForums"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "generalForumIds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geoForumLocationIds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "forums"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "forumId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "locationId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 822
                    }
                };
            r.loc.source = {
                body: "148b8a66ca34"
            };
            var s = {};

            function l(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !s[t] && (s[t] = !0, !0)
                })
            }
            r.definitions = r.definitions.concat(l(a.a.definitions)), r.definitions = r.definitions.concat(l(i.a.definitions)), r.definitions = r.definitions.concat(l(o.a.definitions)), t.a = r
        },
        "./packages/social/feed/feedFragments/ContributionCount.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "ContributionCount"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MemberProfile"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "contributionCounts"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sumAllUgc"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sumReview"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sumMedia"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "repost"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "forumPost"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "linkPost"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "photo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "video"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "trip"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "helpfulVote"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 199
                }
            };
            a.loc.source = {
                body: "c9b676b76824"
            }, t.a = a
        },
        "./packages/social/feed/feedFragments/FollowerDetails.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "FollowerDetails"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MemberProfile"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isFollowing"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "followerCount"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 76
                }
            };
            a.loc.source = {
                body: "ee5c68efb2fb"
            }, t.a = a
        },
        "./packages/social/feed/feedFragments/HometownFields.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "HometownFields"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MemberLocation"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "locationId"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "fallbackString"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "location"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "locationId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "additionalNames"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "long"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "parent"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "locationId"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 203
                }
            };
            a.loc.source = {
                body: "cd3d893a1d20"
            }, t.a = a
        },
        "./packages/social/feed/feedFragments/PhotoSizes.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "PhotoSizes"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "PhotoSize"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "width"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "height"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isHorizontal"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 75
                }
            };
            a.loc.source = {
                body: "d458b47a8b35"
            }, t.a = a
        },
        "./packages/social/feed/feedFragments/SocialStatisticsFields.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "SocialStatisticsFields"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SocialStatistics"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "followCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isFollowing"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isLiked"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isBoosted"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "boostCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "likeCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isReposted"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "repostCount"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 158
                }
            };
            a.loc.source = {
                body: "1115c73b9fd0"
            }, t.a = a
        },
        "./packages/social/feed/feedFragments/UserProfileFields.fragment.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/social/feed/feedFragments/HometownFields.fragment.gql"),
                i = n("./packages/social/feed/feedFragments/PhotoSizes.fragment.gql"),
                o = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "UserProfileFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "MemberProfile"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "userId"
                                },
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isMe"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isVerified"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "username"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "avatar"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "PhotoSizes"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hometown"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "HometownFields"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "expertForums"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "generalForumIds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "geoForumLocationIds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 382
                    }
                };
            o.loc.source = {
                body: "461e06e3c80b"
            };
            var r = {};

            function s(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            o.definitions = o.definitions.concat(s(a.a.definitions)), o.definitions = o.definitions.concat(s(i.a.definitions)), t.a = o
        },
        "./packages/social/member/DestinationExpertInfo.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                u = n("./node_modules/react/index.js"),
                m = n("./packages/common/i18n/i18n.jsx"),
                p = n("./packages/common/routing/routing.jsx"),
                v = n("@ta/tracking.interactions"),
                b = function e(t) {
                    if (t && (t.locationId || 0 === t.locationId)) {
                        var n = 0 === t.locationId ? t.forumId : t.locationId;
                        return n = 0 === t.locationId ? "/ShowForum-g1-i".concat(t.forumId) : "/ShowForum-g".concat(t.locationId), u.createElement(p.Link, {
                            key: t.forumId,
                            className: "ui_link",
                            href: n
                        }, t.name)
                    }
                    return null
                },
                f = function e(t) {
                    return t.reduce(function(e, t) {
                        return 0 === e.length ? [t] : [].concat(Object(d.a)(e), [", ", t])
                    }, [])
                },
                k = function(e) {
                    function t() {
                        var e, n;
                        Object(a.a)(this, t);
                        for (var i = arguments.length, s = new Array(i), d = 0; d < i; d++) s[d] = arguments[d];
                        return n = Object(o.a)(this, (e = Object(r.a)(t)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(n)), "state", {
                            showingExpandedList: !1
                        }), n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props.expertForums;
                            if (n && null != n.forums && null != n.forums[0]) {
                                var a = n.forums.filter(function(e) {
                                    return null !== e
                                }).map(b).filter(function(e) {
                                    return null != e
                                });
                                return u.createElement("div", {
                                    className: "social-member-DestinationExpertInfo__block--1nwgj"
                                }, u.createElement("div", {
                                    className: "social-member-DestinationExpertInfo__list_title--3Wy5V"
                                }, Object(m.localize)("social_destination_expert_for")), u.createElement(v.InteractionLogger, null, function(e) {
                                    return u.createElement("div", {
                                        className: "social-member-DestinationExpertInfo__list_links--2bS1w",
                                        onClick: function t(n) {
                                            return e(n, "profileFieldClick", {
                                                action: "DESTINATION_EXPERT_POI_CLICK"
                                            })
                                        }
                                    }, t.state.showingExpandedList ? f(a) : f(a.slice(0, 5)))
                                }), !this.state.showingExpandedList && a.length > 5 && u.createElement("span", {
                                    onClick: function e() {
                                        t.setState({
                                            showingExpandedList: !0
                                        })
                                    },
                                    className: "social-member-DestinationExpertInfo__see_more--3mLVt"
                                }, Object(m.localize)("trips_see_more_CTA")))
                            }
                            return null
                        }
                    }]), t
                }(u.Component);
            t.a = k
        },
        "./packages/social/member/MemberBio.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = function e(t) {
                    var n = t.bio,
                        o = t.truncateLength,
                        s = t.className,
                        l = t.smallText;
                    return n ? i.createElement("div", {
                        className: r()("social-member-MemberBio__member_info--1J8Qa", s, Object(a.a)({}, "social-member-MemberBio__small_text--2wbSn", l))
                    }, n.length > o ? "".concat(n.substring(0, o).trim(), "...") : n) : null
                };
            s.defaultProps = {
                truncateLength: 1 / 0,
                className: "",
                smallText: !1
            }, t.a = s
        },
        "./packages/social/member/MemberDisplayName.jsx": function(e, t, n) {
            "use strict";
            var a = n("./packages/common/i18n/i18n.jsx");
            t.a = function(e) {
                return e && e.displayName ? e.displayName : Object(a.localize)("native_login_user_review_anonymous")
            }
        },
        "./packages/social/member/MemberLink.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("@ta/tracking.interactions"),
                o = n("@ta/social.links");
            t.a = function e(t) {
                var n = t.website;
                return n ? a.createElement(i.InteractionLogger, null, function(e) {
                    return a.createElement("div", {
                        className: "social-member-MemberInfo__member_info--S4DCO",
                        onClick: function t(n) {
                            return e(n, "profileFieldClick", {
                                action: "WEBSITE_CLICK"
                            })
                        }
                    }, a.createElement(o.WebsiteLink, {
                        uri: n
                    }))
                }) : null
            }
        },
        "./packages/social/member/MemberStats.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/i18n/i18n.jsx"),
                o = n("@ta/overlays.modal"),
                r = n("@ta/overlays.headers"),
                s = n("./packages/common/infinite-loader/InfiniteLoader.jsx"),
                l = n("@ta/tracking.interactions"),
                c = n("@ta/social.follow-feed"),
                d = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                u = n("./packages/common/routing/routing.jsx"),
                m = n("@ta/styleguide.icon"),
                p = n("@ta/styleguide.loading"),
                v = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "SumAllLikesQuery"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "username"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "memberProfiles"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "username"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: {
                                            kind: "Name",
                                            value: "userId"
                                        },
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "static"
                                            },
                                            arguments: []
                                        }]
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "contributionCounts"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sumAllLikes"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 407
                    }
                };
            v.loc.source = {
                body: "300941d31176"
            };
            var b = v,
                f = "social-member-MemberContributionsList__item--xWx8b",
                k = "social-member-MemberContributionsList__link--tRQU5",
                g = "social-member-MemberContributionsList__icon--28vFi",
                h = function e(t) {
                    var n = t.profile;
                    return a.createElement(a.Fragment, null, function e() {
                        return a.createElement(d.Query, {
                            query: b,
                            variables: {
                                username: n.username
                            }
                        }, function(e) {
                            var t, o, r, s = e.loading,
                                c = e.data;
                            if (s) return a.createElement(p.LoadingSpinner, null);
                            var d = null == c ? void 0 : null === (t = c.memberProfiles) || void 0 === t ? void 0 : null === (o = t[0]) || void 0 === o ? void 0 : null === (r = o.contributionCounts) || void 0 === r ? void 0 : r.sumAllLikes;
                            return a.createElement("ul", {
                                className: "social-member-MemberContributionsList__list--3FPXh"
                            }, n.contributionCounts.trip > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "trips"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "TRIPS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "suitcase-fill",
                                    className: g
                                }), " ", Object(i.localize)("n_Trips_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.trip)
                                }))
                            })), n.contributionCounts.video > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "videos"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "VIDEOS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "video-fill",
                                    className: g
                                }), " ", Object(i.localize)("n_videos_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.video)
                                }))
                            })), n.contributionCounts.photo > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "photos"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "PHOTOS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "camera-fill",
                                    className: g
                                }), " ", Object(i.localize)("n_photos_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.photo)
                                }))
                            })), n.contributionCounts.sumReview > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "reviews"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "REVIEWS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "pencil-paper",
                                    className: g
                                }), " ", Object(i.localize)("n_reviews_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.sumReview)
                                }))
                            })), n.contributionCounts.linkPost > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "linkPost"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "LINKS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "link",
                                    className: g
                                }), " ", Object(i.localize)("n_links_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.linkPost)
                                }))
                            })), n.contributionCounts.forumPost > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(l.InteractionLogger, null, function(e) {
                                return a.createElement(u.Link, {
                                    to: {
                                        page: "Profile",
                                        username: n.username,
                                        tab: "forum"
                                    },
                                    className: k,
                                    onClick: function t(n) {
                                        return e(n, "contributionTypeClick", {
                                            contributionTypeName: "FORUMS"
                                        })
                                    }
                                }, a.createElement(m.Icon, {
                                    name: "forums",
                                    className: g
                                }), " ", Object(i.localize)("n_forum_posts_plural", {
                                    0: i.globalize.formatNumber("integer", n.contributionCounts.forumPost)
                                }))
                            })), n.contributionCounts.repost > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(m.Icon, {
                                name: "repost",
                                className: g
                            }), " ", Object(i.localize)("n_reposts_plural", {
                                0: i.globalize.formatNumber("integer", n.contributionCounts.repost)
                            })), d && d > 0 && a.createElement("li", {
                                className: f
                            }, a.createElement(m.Icon, {
                                name: "thumbs-up-fill",
                                className: "".concat(g, " ").concat("social-member-MemberContributionsList__inactive--3qoVJ")
                            }), " ", Object(i.localize)("n_helpful_votes_and_likes_plural", {
                                0: i.globalize.formatNumber("integer", d)
                            })))
                        })
                    }())
                },
                _ = function e(t) {
                    var n = t.profile,
                        s = n.contributionCounts && null !== n.contributionCounts.sumAllUgc ? i.globalize.formatNumber("integer", n.contributionCounts.sumAllUgc) : null,
                        l = s ? Object(i.localize)("n_contributions_plural", {
                            0: s
                        }) : "";
                    return a.createElement(o.DeprecatedRoutedModal, {
                        name: "contributions",
                        isFullBleed: !0,
                        header: a.createElement(r.TitleBar, {
                            displayType: "LEFT_ALIGN_GRAY"
                        }, l)
                    }, a.createElement("div", {
                        className: "social-member-MemberContributionsListModal__contributions--17TkV"
                    }, a.createElement(h, {
                        profile: n
                    })))
                },
                j = function e(t) {
                    var n = t.profile,
                        d = t.isNarrow,
                        u = null !== n.followerCount ? i.globalize.formatNumber("integer", n.followerCount) : null,
                        m = null !== n.followeeCount ? i.globalize.formatNumber("integer", n.followeeCount) : null,
                        p = u ? Object(i.localize)("social_nCount_followers2", {
                            0: u
                        }) : "",
                        v = m ? Object(i.localize)("social_nCount_following2", {
                            0: m
                        }) : "",
                        b = function e(t) {
                            return a.createElement(o.DeprecatedRoutedModal, {
                                name: t ? "followers" : "following",
                                isFullBleed: !0,
                                bodyScroll: !1,
                                header: a.createElement(r.TitleBar, {
                                    displayType: "LEFT_ALIGN_GRAY"
                                }, t ? p : v)
                            }, a.createElement(c.FollowerFolloweeFeedDataProvider, {
                                userId: n.userId,
                                isFollowersList: t
                            }, function(e, i, o, r, d, u) {
                                return a.createElement(s.a, {
                                    loadMore: e,
                                    threshold: 550,
                                    throttle: 50,
                                    hasMore: o,
                                    infiniteLoadOnMount: !0
                                }, function(e, o) {
                                    return a.createElement("div", {
                                        className: "social-member-MemberStats__follower_followee_list--bzm3I",
                                        ref: e
                                    }, a.createElement(l.FollowPlacementContext.Provider, {
                                        value: {
                                            placement: t ? "FOLLOWERS_MODAL" : "FOLLOWING_MODAL"
                                        }
                                    }, a.createElement(c.FollowerFolloweeFeed, {
                                        followerFollowees: i,
                                        userId: n.userId,
                                        contentRef: o,
                                        error: d,
                                        loading: r,
                                        refetch: u
                                    })))
                                })
                            }))
                        },
                        f = n.contributionCounts && null !== n.contributionCounts.sumAllUgc ? a.createElement("div", {
                            className: "social-member-MemberStats__stat_item--1GM9b"
                        }, a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_title--1L5-g"
                        }, Object(i.localize)("social_memberstats_contributions"), " "), a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_count--14i7c"
                        }, n.contributionCounts.sumAllUgc > 0 ? a.createElement(l.InteractionLogger, null, function(e) {
                            return a.createElement(o.DeprecatedModalLink, {
                                name: "contributions",
                                username: n.username,
                                href: null,
                                className: "social-member-MemberStats__link--HqVwd",
                                onClick: function t(n) {
                                    return e(n, "contributionsClick")
                                }
                            }, i.globalize.formatNumber("integer", n.contributionCounts.sumAllUgc))
                        }) : a.createElement(a.Fragment, null, i.globalize.formatNumber("integer", n.contributionCounts.sumAllUgc)))) : null,
                        k = null !== u ? a.createElement("div", {
                            className: "social-member-MemberStats__stat_item--1GM9b"
                        }, a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_title--1L5-g"
                        }, Object(i.localize)("social_memberstats_followers"), " "), a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_count--14i7c"
                        }, 0 === n.followerCount ? u : a.createElement(l.InteractionLogger, null, function(e) {
                            return a.createElement(o.DeprecatedModalLink, {
                                name: "followers",
                                username: n.username,
                                href: null,
                                className: "social-member-MemberStats__link--HqVwd",
                                onClick: function t(n) {
                                    return e(n, "followersClick")
                                }
                            }, u)
                        }))) : null,
                        g = d || null === m ? null : a.createElement("div", {
                            className: "social-member-MemberStats__stat_item--1GM9b"
                        }, a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_title--1L5-g"
                        }, Object(i.localize)("social_Following"), " "), a.createElement("span", {
                            className: "social-member-MemberStats__stat_item_count--14i7c"
                        }, 0 === n.followeeCount ? m : a.createElement(l.InteractionLogger, null, function(e) {
                            return a.createElement(o.DeprecatedModalLink, {
                                name: "following",
                                username: n.username,
                                href: null,
                                className: "social-member-MemberStats__link--HqVwd",
                                onClick: function t(n) {
                                    return e(n, "followingClick")
                                }
                            }, m)
                        })));
                    return a.createElement("div", {
                        className: "".concat("social-member-MemberStats__member_stats--1W9tJ", " ").concat(d ? "social-member-MemberStats__narrow--19fb9" : "")
                    }, a.createElement("div", {
                        className: "social-member-MemberStats__together--9Bl5-"
                    }, f, k, g), function e() {
                        return a.createElement(_, {
                            profile: n
                        })
                    }(), b(!0), b(!1))
                };
            j.defaultProps = {
                isNarrow: !1
            }, t.a = j
        },
        "./packages/social/sections/CardSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = (n("@ta/social.member-event"), n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js")),
                l = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                m = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                p = n("./node_modules/react-flip-move/dist/react-flip-move.es.js"),
                v = n("@ta/social.tabs"),
                b = n("@ta/social.scroll"),
                f = n("@ta/social.poi"),
                k = n("@ta/tracking.interactions"),
                g = function(e) {
                    function t() {
                        var e, n;
                        Object(s.a)(this, t);
                        for (var i = arguments.length, o = new Array(i), r = 0; r < i; r++) o[r] = arguments[r];
                        return n = Object(c.a)(this, (e = Object(d.a)(t)).call.apply(e, [this].concat(o))), Object(a.a)(Object(m.a)(Object(m.a)(n)), "state", {
                            hasTrackedScroll: !1
                        }), Object(a.a)(Object(m.a)(Object(m.a)(n)), "delay", 4400), Object(a.a)(Object(m.a)(Object(m.a)(n)), "timeouts", new Map), n
                    }
                    return Object(u.a)(t, e), Object(l.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props.className,
                                o = {
                                    left: 0,
                                    top: 0,
                                    bottom: 0,
                                    right: 100
                                },
                                s = this.props.pois;
                            return i.createElement("div", {
                                className: "".concat("social-sections-POICarousel__relative--1nd6U", " ").concat(n(s.length))
                            }, i.createElement(k.InteractionLogger, null, function(e) {
                                return i.createElement(v.TabActiveContext.Consumer, null, function(n) {
                                    return i.createElement(b.ScrollAffordance, {
                                        top: !1,
                                        bottom: !1,
                                        left: s.length > 0,
                                        right: s.length > 0,
                                        threshold: 0,
                                        minDistance: 0,
                                        snapToEdge: o,
                                        className: "".concat("social-sections-POICarousel__container--297jy", " ").concat("social-sections-POICarousel__carousel--1vz03"),
                                        isActive: !n || n.isActive,
                                        onScroll: t.state.hasTrackedScroll ? void 0 : function(n) {
                                            t.setState({
                                                hasTrackedScroll: !0
                                            }), e(n, "linkedPoiScroll")
                                        }
                                    }, function(e) {
                                        return i.createElement(p.a, {
                                            staggerDurationBy: "30",
                                            duration: 400,
                                            maintainContainerHeight: !0,
                                            typeName: null,
                                            enterAnimation: "fade",
                                            leaveAnimation: "fade"
                                        }, s.slice(0, t.props.limit).map(function(t, n) {
                                            var o, l = function e(t) {
                                                switch (t.__typename) {
                                                    case "AttractionProductInformation":
                                                        return t.attractionProductId;
                                                    default:
                                                        return t.locationId
                                                }
                                            }(t);
                                            return i.createElement("div", {
                                                key: l
                                            }, i.createElement("div", {
                                                ref: e(l),
                                                className: r()("social-sections-POICarousel__gutter--w8x-S", (o = {}, Object(a.a)(o, "social-sections-POICarousel__first--1aVoT", 0 === n), Object(a.a)(o, "social-sections-POICarousel__last--1wXdF", n === s.length - 1), o))
                                            }, i.createElement("div", null, i.createElement(f.POIObject, {
                                                poi: f.POIObject.viewModelForObject(t),
                                                size: "large",
                                                borderRadius: "0",
                                                showSavesIcon: !0
                                            }))))
                                        }))
                                    })
                                })
                            }))
                        }
                    }]), t
                }(i.Component);
            Object(a.a)(g, "defaultProps", {
                limit: 20
            });
            var h = g,
                _ = n("./packages/social/sections/SocialStatisticsBar.jsx"),
                j = function e(t) {
                    var n = t.topNote,
                        o = t.header,
                        s = t.content,
                        l = t.socialStatistics,
                        c = t.socialActionBar,
                        d = t.isSingleObject,
                        u = t.pois,
                        m = t.isEmbedded,
                        p = t.contentClass,
                        v = t.cardRef,
                        b = t.socialProofParams,
                        f = t.noEmptyCarouselSpace;
                    return i.createElement("div", {
                        className: r()("social-sections-CardSection__card_section--3Hc9Y", d ? "ui_card section" : "social-sections-CardSection__non_section--3c0eY")
                    }, i.createElement(i.Fragment, null, n && i.createElement("div", {
                        className: "social-sections-CardSection__top_note--F40Tl"
                    }, n), i.createElement("div", {
                        className: "social-sections-CardSection__padding--2pHre"
                    }, o), i.createElement("div", {
                        className: r()("social-sections-CardSection__background--10gg3", p)
                    }, s, i.createElement(e.Content, {
                        fullWidth: !0
                    }, i.createElement(h, {
                        pois: Array.isArray(u) && u[0] ? u : [],
                        className: function e(t) {
                            var n;
                            return r()("social-sections-CardSection__carousel--2IA_9", (n = {}, Object(a.a)(n, "social-sections-CardSection__empty--2XetQ", 0 === t), Object(a.a)(n, "social-sections-CardSection__embedded--3-Bnl", m), Object(a.a)(n, "social-sections-CardSection__empty_space--1-bcT", f), n))
                        }
                    }))), !m && l && i.createElement("div", {
                        className: "social-sections-CardSection__padding--2pHre"
                    }, i.createElement(_.a, {
                        stats: l,
                        socialRef: v,
                        socialProofParams: b,
                        deduplicate: !0
                    })), !m && i.createElement("div", {
                        className: "social-sections-CardSection__padding--2pHre"
                    }, c)))
                };
            (j.Content = function(e) {
                var t = e.children,
                    n = e.fullWidth;
                return i.createElement(i.Fragment, null, i.Children.map(t, function(e) {
                    return i.createElement("div", {
                        className: r()("social-sections-CardSection__content--2z_6f", Object(a.a)({}, "social-sections-CardSection__fullWidth--2FVhV", n))
                    }, e)
                }))
            }).displayName = "CardSection.Content", j.Content.defaultProps = {
                fullWidth: !1
            }, j.defaultProps = {
                topNote: void 0,
                isSingleObject: !1,
                fullWidth: !1,
                classNames: "",
                pois: [],
                socialStatistics: void 0,
                isEmbedded: !1,
                contentClass: "",
                noEmptyCarouselSpace: !1
            }, t.a = j
        },
        "./packages/social/sections/FeedSectionPhotoCarousel.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("@ta/common.photo-carousel"),
                p = n("./packages/common/routing/routing.jsx"),
                v = n("@ta/overlays.modal"),
                b = n("@ta/overlays.headers"),
                f = n("./packages/social/sections/SectionModal.jsx"),
                k = n("./packages/social/sections/SectionModalHeader.jsx"),
                g = n("./packages/social/sections/PhotoSection.jsx"),
                h = function(e) {
                    function t() {
                        var e, n;
                        Object(i.a)(this, t);
                        for (var a = arguments.length, o = new Array(a), l = 0; l < a; l++) o[l] = arguments[l];
                        return n = Object(r.a)(this, (e = Object(s.a)(t)).call.apply(e, [this].concat(o))), Object(d.a)(Object(c.a)(Object(c.a)(n)), "state", {
                            containerWidth: "MOBILE" === n.props.viewportCategory ? 411 : 600
                        }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "containerRef", u.createRef()), n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            var t;
                            (null === (t = this.containerRef) || void 0 === t ? void 0 : t.current) && this.setState({
                                containerWidth: this.containerRef.current.getBoundingClientRect().width
                            })
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this;
                            if (!this.props.photos || 0 === this.props.photos.length) return null;
                            var n = function e(t) {
                                    if (null == (null == t ? void 0 : t.photoSizes) || 0 === (null == t ? void 0 : t.photoSizes.length)) return !1;
                                    var n = t.photoSizes.length - 1,
                                        a = t.photoSizes[n];
                                    return a.width > a.height
                                },
                                i = function e() {
                                    return function e(t) {
                                        return t.every(function(e) {
                                            return n(e)
                                        })
                                    }(t.props.photos) ? "".concat(t.state.containerWidth / 4 * 3, "px") : function e(t) {
                                        return t.every(function(e) {
                                            return !n(e)
                                        })
                                    }(t.props.photos) ? "".concat(t.state.containerWidth / 3 * 4, "px") : "".concat(t.state.containerWidth, "px")
                                },
                                o = "".concat(this.props.metadata.__typename, "_").concat(this.props.metadata.id);
                            return u.createElement(p.RouteConsumer, null, function(e) {
                                var n, r, s, l, c = e.route;
                                return u.createElement("div", {
                                    ref: t.containerRef,
                                    className: "social-sections-FeedSectionPhotoCarousel__carouselBottom--3WWri"
                                }, (null == c ? void 0 : c.modal) === o ? u.createElement(p.HeadProperties, {
                                    openGraphInfo: Object(g.d)(t.props.photos[0])
                                }) : null, t.props.includeRoutedModal && u.createElement(v.RoutedModal, {
                                    path: {
                                        modal: o
                                    },
                                    header: u.createElement(k.a, null, u.createElement(b.BrandedHeader, {
                                        branding: "TA_GREEN"
                                    })),
                                    closeXColorVariant: "WHITE",
                                    isFullBleed: !0,
                                    bodyScroll: !1,
                                    fullscreenAlways: !0
                                }, u.createElement(f.a, {
                                    images: t.props.photos,
                                    actor: t.props.actor,
                                    deleteObject: t.props.deleteObject,
                                    untagObject: t.props.untagObject,
                                    showPOISavesIcon: !0,
                                    currentIndex: t.props.currentlyDisplayedIndex,
                                    onPhotoChange: t.props.onPhotoChange,
                                    viewportCategory: t.props.viewportCategory,
                                    additionalContent: t.props.additionalModalContent,
                                    socialStatisticsBar: t.props.socialStatisticsBar,
                                    socialActionBar: t.props.socialActionBar,
                                    overflowMenuObject: t.props.overflowMenuObject,
                                    overflowMenuObjectForType: t.props.overflowMenuObjectForType
                                })), u.createElement(p.Link, {
                                    to: Object(a.a)({}, c, {
                                        modal: o,
                                        username: (null === (n = t.props) || void 0 === n ? void 0 : null === (r = n.actorForUrl) || void 0 === r ? void 0 : r.username) || (null === (s = t.props) || void 0 === s ? void 0 : null === (l = s.actor) || void 0 === l ? void 0 : l.username)
                                    }),
                                    href: null,
                                    activeClassName: "",
                                    className: "social-sections-FeedSectionPhotoCarousel__link--572li"
                                }, u.createElement(m.PhotoCarousel, {
                                    photos: t.props.photos.map(function(e) {
                                        return {
                                            id: e.id,
                                            photoSizes: e.photoSizes
                                        }
                                    }),
                                    width: "100%",
                                    height: i(),
                                    totalCount: t.props.photos.length,
                                    showIndicatorDots: t.props.photos.length > 1,
                                    showProgress: t.props.photos.length > 1,
                                    hideArrows: !0,
                                    noCta: !0,
                                    onPhotoChange: t.props.onPhotoChange,
                                    maxIndicatorDots: 10
                                })))
                            })
                        }
                    }]), t
                }(u.Component);
            t.a = h
        },
        "./packages/social/sections/LinkPostSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/decode/decode.jsx"),
                o = n.n(i),
                r = n("./packages/common/features/features.jsx"),
                s = n("./packages/social/actions/BoostAction.jsx"),
                l = n("./packages/social/actions/SocialActionBar.jsx"),
                c = n("./packages/social/actions/NestedSocialAction.jsx"),
                d = n("./packages/social/actions/LikeAction.jsx"),
                u = n("./packages/social/actions/SaveAction.jsx"),
                m = n("./packages/social/actions/DisabledSocialAction.jsx"),
                p = n("@ta/social.repost-action"),
                v = n("@ta/tracking.interactions"),
                b = n("./packages/public/share-cta/ShareCta.jsx"),
                f = n("@ta/social.links"),
                k = n("@ta/social.link-preview"),
                g = n("./packages/social/member/MemberDisplayName.jsx"),
                h = n("@ta/social.member-event"),
                _ = n("./packages/social/sections/CardSection.jsx"),
                j = function e(t) {
                    var n = t.post,
                        i = t.isSingleObject,
                        j = t.isEmbedded,
                        S = t.member,
                        y = t.actor,
                        N = t.deleteObject,
                        O = t.loggedInMemberAuthorization,
                        E = t.untagObject,
                        I = t.loggedInUserId,
                        C = t.viewportCategory,
                        F = {
                            id: n.object.preview.id,
                            title: n.object.preview.title,
                            description: n.object.preview.description,
                            url: n.object.preview.canonicalUrl,
                            urlDomain: n.object.preview.urlDomain,
                            imgSource: n.object.preview.media && n.object.preview.media[0] ? n.object.preview.media[0].photoSizes : void 0
                        };
                    if (!n || !n.object) return null;
                    var T = a.createElement(a.Fragment, null, a.createElement(h.MemberEventOnObjectBlock, {
                            objectEventType: "onLinkPost",
                            object: n.object,
                            member: S,
                            actor: y,
                            deleteObject: N,
                            untagObject: E,
                            loggedInUserId: I,
                            isEmbedded: j,
                            viewportCategory: C
                        }), n.object.comment && n.object.comment.length && a.createElement("div", {
                            key: "comment_".concat(n.object.postId),
                            className: "social-sections-LinkPostSection__comment--8j7yf"
                        }, a.createElement(f.Linkify, {
                            text: n.object.comment,
                            socialReferences: n.object.socialReferences
                        }))),
                        w = [a.createElement(_.a.Content, {
                            key: "LinkPost_".concat(n.object.postId),
                            fullWidth: !0
                        }, a.createElement(v.InteractionLogger, null, function(e) {
                            var t, i, o;
                            return a.createElement(k.LinkPreview, {
                                linkPreviewState: F,
                                isClickable: !0,
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                },
                                delineateContent: j,
                                tightenContent: (null == n ? void 0 : null === (t = n.object) || void 0 === t ? void 0 : null === (i = t.tags) || void 0 === i ? void 0 : null === (o = i.orderedLocations) || void 0 === o ? void 0 : o.length) ? "tighten_bottom" : "tighten",
                                border: !1
                            })
                        }))],
                        x = Object(r.featureIsEnabled)("social_boosting_enabled") && O && O.canBoostContent ? a.createElement(s.a, {
                            socialObjectRef: {
                                type: "LINK_POST",
                                id: n.object.postId
                            },
                            socialStatistics: n.object.socialStatistics,
                            typename: n.object.__typename
                        }) : null,
                        P = a.createElement(l.a, null, a.createElement(c.a, {
                            padRight: !0
                        }, a.createElement(d.a, {
                            item: n.object,
                            socialObject: {
                                objectType: "LINK_POST",
                                objectId: n.object.postId
                            }
                        }), Object(r.featureIsEnabled)("trips_save_ugc_links") && a.createElement(u.a, {
                            object: {
                                __typename: n.object.__typename,
                                postId: n.object.postId
                            },
                            displayStyle: "icon+text"
                        })), a.createElement(c.a, null, a.createElement(p.RepostAction, {
                            modalName: "repost_".concat(n.object.__typename, "_").concat(n.object.postId),
                            repostPreviewProps: {
                                feedSectionItem: n,
                                member: S,
                                actor: y
                            },
                            actor: y,
                            socialStatistics: n.object.socialStatistics
                        }), Object(r.featureIsEnabled)("social_ugc_share") ? a.createElement(b.a, {
                            url: "".concat(o()(n.object.preview.canonicalUrl)),
                            itemType: "LinkPost",
                            itemId: n.object.postId,
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : a.createElement(m.a, {
                            actionType: "Share"
                        }), x));
                    return a.createElement(_.a, {
                        isSingleObject: i,
                        isEmbedded: j,
                        header: T,
                        content: w,
                        noEmptyCarouselSpace: !0,
                        socialStatistics: n.object.socialStatistics,
                        socialActionBar: P,
                        pois: n.object.tags ? n.object.tags.orderedLocations : [],
                        cardRef: {
                            type: n.object.__typename,
                            id: n.object.postId
                        },
                        socialProofParams: {
                            displayName: Object(g.a)(y)
                        }
                    })
                };
            j.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                actor: null,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                untagObject: null,
                loggedInUserId: "",
                viewportCategory: ""
            }, t.a = j
        },
        "./packages/social/sections/ManagedMediaBatchSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),
                o = n("./node_modules/react/index.js"),
                r = n("./packages/social/sections/MediaBatchPhotoSection.jsx");
            t.a = function e(t) {
                var n = o.useState(0),
                    s = Object(i.a)(n, 2),
                    l = s[0],
                    c = s[1];
                return o.createElement(r.a, Object(a.a)({}, t, {
                    currentlyDisplayedImageIndex: l,
                    setCurrentlyDisplayedImageIndex: c
                }))
            }
        },
        "./packages/social/sections/MediaBatchPhotoSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./node_modules/react-redux/es/index.js"),
                o = n("./packages/common/i18n/i18n.jsx"),
                r = n("@ta/common.text"),
                s = n("@ta/styleguide.icon"),
                l = n("@ta/social.links"),
                c = n("@ta/social.member-event"),
                d = n("./packages/social/actions/SocialActionBar.jsx"),
                u = n("./packages/social/actions/LikeAction.jsx"),
                m = n("./packages/social/actions/NestedSocialAction.jsx"),
                p = n("./packages/social/actions/DisabledSocialAction.jsx"),
                v = n("@ta/social.repost-action"),
                b = n("./packages/common/features/features.jsx"),
                f = n("./packages/public/share-cta/ShareCta.jsx"),
                k = n("./packages/social/sections/CardSection.jsx"),
                g = n("./packages/social/sections/FeedSectionPhotoCarousel.jsx"),
                h = n("./packages/social/sections/SocialStatisticsBar.jsx"),
                _ = function e(t) {
                    var n, i, _, j, S, y, N, O = {
                            numPhotos: t.photos.length,
                            caption: null == t ? void 0 : null === (n = t.metadata) || void 0 === n ? void 0 : n.caption,
                            id: t.metadata.mediaBatchId,
                            socialReferences: t.metadata.socialReferences,
                            socialStatistics: t.metadata.socialStatistics,
                            orderedLocations: t.metadata.orderedLocations,
                            createdDate: t.metadata.created,
                            __typename: t.metadata.__typename,
                            route: t.metadata.route
                        },
                        E = {
                            REPORT: t.photos[t.currentlyDisplayedImageIndex]
                        },
                        I = a.createElement(c.MemberEventOnObjectBlock, {
                            objectEventType: "onMediaBatch",
                            member: t.member,
                            object: O,
                            actor: t.actor,
                            deleteObject: t.deleteObject,
                            untagObject: t.untagObject,
                            loggedInUserId: t.loggedInUserId,
                            isEmbedded: "REPOST_NO_MODAL" === t.layout || "REPOST_WITH_MODAL" === t.layout,
                            viewportCategory: t.viewportCategory,
                            overflowMenuObjectForType: E
                        }),
                        C = O.caption ? O.caption : (null == t ? void 0 : null === (i = t.photos) || void 0 === i ? void 0 : null === (_ = i[t.currentlyDisplayedImageIndex]) || void 0 === _ ? void 0 : _.caption) || "",
                        F = O.caption ? O.socialReferences : null == t ? void 0 : null === (j = t.photos) || void 0 === j ? void 0 : null === (S = j[t.currentlyDisplayedImageIndex]) || void 0 === S ? void 0 : S.socialReferences,
                        T = "FULL" === t.layout && (null == O ? void 0 : O.socialStatistics) ? a.createElement(h.a, {
                            stats: null == O ? void 0 : O.socialStatistics,
                            socialRef: {
                                type: O.__typename,
                                id: "".concat(O.id)
                            },
                            socialProofParams: {
                                displayName: t.actor.displayName
                            },
                            deduplicate: !0
                        }) : null,
                        w = a.createElement(d.a, null, a.createElement(u.a, {
                            item: O,
                            socialObject: {
                                objectType: "MEDIA_BATCH",
                                objectId: "".concat(O.id)
                            }
                        }), a.createElement(m.a, null, a.createElement(v.RepostAction, {
                            modalName: "repost_".concat(O.__typename, "_").concat(O.id),
                            repostPreviewProps: {
                                feedSectionItem: {
                                    object: t.metadata
                                },
                                photos: t.photos,
                                member: t.member,
                                actor: t.actor,
                                actorForUrl: t.actorForUrl,
                                metadata: t.metadata
                            },
                            actor: t.actor,
                            socialStatistics: O.socialStatistics
                        }), Object(b.featureIsEnabled)("social_ugc_share") && (null == t ? void 0 : null === (y = t.metadata) || void 0 === y ? void 0 : null === (N = y.route) || void 0 === N ? void 0 : N.url) ? a.createElement(f.a, {
                            url: "".concat(O.route.url),
                            itemType: O.__typename,
                            itemId: "".concat(O.id),
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : a.createElement(p.a, {
                            actionType: "Share"
                        }))),
                        x = [a.createElement(k.a.Content, {
                            fullWidth: !0,
                            key: "mediaBatchPhoto"
                        }, a.createElement(g.a, {
                            actor: t.actor,
                            actorForUrl: t.actorForUrl,
                            deleteObject: t.deleteObject,
                            untagObject: t.untagObject,
                            member: t.member,
                            metadata: O,
                            photos: t.photos,
                            currentlyDisplayedIndex: t.currentlyDisplayedImageIndex,
                            onPhotoChange: t.setCurrentlyDisplayedImageIndex,
                            socialStatisticsBar: T,
                            socialActionBar: w,
                            overflowMenuObject: O,
                            overflowMenuObjectForType: E,
                            includeRoutedModal: "FULL" === t.layout || "REPOST_WITH_MODAL" === t.layout
                        })), a.createElement(k.a.Content, {
                            key: "caption_".concat(O.id)
                        }, a.createElement("div", {
                            className: "social-sections-MediaBatchPhotoSection__caption--11JpL"
                        }, "MOBILE" === t.viewportCategory && C.length > 160 ? a.createElement(r.ReadMore, {
                            numLinesToShow: 3,
                            cta: function e() {
                                return a.createElement("div", {
                                    className: "social-sections-MediaBatchPhotoSection__ctaLine--1H9rK"
                                }, a.createElement("span", {
                                    className: "social-sections-MediaBatchPhotoSection__cta--2QPXv"
                                }, Object(o.localize)("common_Read_more")), a.createElement(s.Icon, {
                                    name: "caret-down",
                                    className: ""
                                }))
                            }(),
                            ctaNewline: !0
                        }, a.createElement(l.Linkify, {
                            text: C,
                            socialReferences: F
                        })) : a.createElement(l.Linkify, {
                            text: C,
                            socialReferences: F
                        })))];
                    return a.createElement(k.a, {
                        isSingleObject: t.isSingleObject,
                        isEmbedded: "REPOST_WITH_MODAL" === t.layout || "REPOST_NO_MODAL" === t.layout,
                        header: I,
                        content: x,
                        socialStatistics: O.socialStatistics,
                        socialActionBar: w,
                        pois: function e() {
                            var n, a, i;
                            return (null == O ? void 0 : null === (n = O.orderedLocations) || void 0 === n ? void 0 : n.length) > 0 ? O.orderedLocations : (null === (a = t.photos) || void 0 === a ? void 0 : null === (i = a[t.currentlyDisplayedImageIndex]) || void 0 === i ? void 0 : i.location) ? [t.photos[t.currentlyDisplayedImageIndex].location] : []
                        }(),
                        cardRef: {
                            type: O.__typename,
                            id: "".concat(O.id)
                        },
                        socialProofParams: {
                            displayName: t.actor.displayName
                        },
                        classNames: "",
                        contentClass: ""
                    })
                };
            _.defaultProps = {
                isSingleObject: !1,
                member: null,
                actor: null,
                actorForUrl: void 0,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                untagObject: null,
                loggedInUserId: null,
                viewportCategory: void 0,
                layout: "FULL"
            }, t.a = Object(i.connect)(function(e) {
                return {
                    loggedInUserId: e.auth.loggedInUserId,
                    viewportCategory: e.meta.device.viewportCategory
                }
            })(_)
        },
        "./packages/social/sections/PhotoSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/features/features.jsx"),
                o = n("@ta/overlays.headers"),
                r = n("@ta/media.image"),
                s = n("./packages/public/share-cta/ShareCta.jsx"),
                l = n("./packages/common/i18n/i18n.jsx"),
                c = n("@ta/common.text"),
                d = n("@ta/styleguide.icon"),
                u = n("@ta/social.links"),
                m = n("./packages/social/member/MemberDisplayName.jsx"),
                p = n("@ta/social.member-event"),
                v = n("./packages/social/actions/BoostAction.jsx"),
                b = n("./packages/social/actions/SocialActionBar.jsx"),
                f = n("./packages/social/actions/NestedSocialAction.jsx"),
                k = n("./packages/social/actions/LikeAction.jsx"),
                g = n("./packages/social/actions/SaveAction.jsx"),
                h = n("./packages/social/actions/DisabledSocialAction.jsx"),
                _ = n("@ta/social.repost-action"),
                j = n("@ta/tracking.interactions"),
                S = n("@ta/overlays.modal"),
                y = n("./packages/common/routing/routing.jsx"),
                N = n("./packages/social/sections/CardSection.jsx"),
                O = n("./packages/social/sections/SocialStatisticsBar.jsx"),
                E = n("./packages/social/sections/SectionModal.jsx"),
                I = n("./packages/social/sections/SectionModalHeader.jsx");
            n.d(t, "d", function() {
                return F
            }), n.d(t, "a", function() {
                return w
            }), n.d(t, "b", function() {
                return T
            });
            var C = function e(t, n) {
                    var a, i;
                    return null != (null == t ? void 0 : t.name) && null != (null == t ? void 0 : t.isGeo) && null != (null == n ? void 0 : n.displayName) && (!1 === t.isGeo && null != t.parent.additionalNames.long ? a = Object(l.localize)("social_opengraph_photo_title", {
                        locationName: t.name,
                        additionalLocationName: t.parent.additionalNames.long,
                        userName: n.displayName
                    }) : null == t.placetype || null == t.parent.placetype ? a = Object(l.localize)("social_opengraph_photo_title_short", {
                        locationName: t.additionalNames.long,
                        userName: n.displayName
                    }) : null != (null == t ? void 0 : t.name) && null != (null == t ? void 0 : null === (i = t.parent) || void 0 === i ? void 0 : i.name) && (a = Object(l.localize)("social_opengraph_photo_title_short", {
                        locationName: "".concat(t.name, ", ").concat(t.parent.name),
                        userName: n.displayName
                    }))), a
                },
                F = function e(t) {
                    var n = t.photoSizes.length - 1;
                    return {
                        type: "image.gallery",
                        title: C(t.location, t.userProfile) || "",
                        description: null != t.caption ? "".concat(t.caption) : "",
                        url: t.route.url,
                        image: {
                            url: "".concat(t.photoSizes[n].url),
                            width: t.photoSizes[n].width,
                            height: t.photoSizes[n].height
                        }
                    }
                },
                T = function e(t) {
                    var n, i = t.photo,
                        o = t.actor;
                    return (null == i ? void 0 : null === (n = i.object) || void 0 === n ? void 0 : n.socialStatistics) ? a.createElement(O.a, {
                        stats: i.object.socialStatistics,
                        socialRef: {
                            type: i.object.__typename,
                            id: "".concat(i.object.id)
                        },
                        socialProofParams: {
                            displayName: o.displayName
                        },
                        deduplicate: !0
                    }) : null
                },
                w = function e(t) {
                    var n = t.photo,
                        o = t.actor,
                        r = t.member,
                        l = t.authInfo,
                        c = Object(i.featureIsEnabled)("social_boosting_enabled") && (null == l ? void 0 : l.canBoostContent) ? a.createElement(v.a, {
                            socialObjectRef: {
                                type: "PHOTO",
                                id: n.object.id
                            },
                            socialStatistics: n.object.socialStatistics,
                            typename: n.object.__typename
                        }) : null;
                    return a.createElement(b.a, null, a.createElement(f.a, {
                        padRight: !0
                    }, a.createElement(k.a, {
                        item: n.object
                    }), Object(i.featureIsEnabled)("trips_save_ugc_photos") && a.createElement(g.a, {
                        object: {
                            __typename: n.object.__typename,
                            id: n.object.id
                        },
                        displayStyle: "icon+text"
                    })), a.createElement(f.a, null, a.createElement(_.RepostAction, {
                        modalName: "repost_".concat(n.object.__typename, "_").concat(n.object.id),
                        repostPreviewProps: {
                            feedSectionItem: n,
                            member: r,
                            actor: o
                        },
                        actor: o,
                        socialStatistics: n.object.socialStatistics
                    }), Object(i.featureIsEnabled)("social_ugc_share") && n.object.route && n.object.route.url ? a.createElement(s.a, {
                        url: "".concat(n.object.route.url),
                        itemType: "Photo",
                        itemId: n.object.id,
                        styleAsSocialAction: !0,
                        alignEdge: "right"
                    }) : a.createElement(h.a, {
                        actionType: "Share"
                    }), c))
                };
            w.defaultProps = {
                authInfo: void 0
            };
            var x = function e(t) {
                var n = t.photo,
                    i = t.isSingleObject,
                    s = t.layout,
                    v = t.member,
                    b = t.actor,
                    f = t.actorForUrl,
                    k = t.deleteObject,
                    g = t.loggedInMemberAuthorization,
                    h = t.untagObject,
                    _ = t.loggedInUserId,
                    O = t.viewportCategory,
                    C = n.object && n.object.photoSizes && n.object.photoSizes.length && Math.round(n.object.photoSizes[n.object.photoSizes.length - 1].height / (n.object.photoSizes[n.object.photoSizes.length - 1].width / 100)),
                    x = C > 180,
                    P = a.createElement(p.MemberEventOnObjectBlock, {
                        objectEventType: "onPhoto",
                        object: n.object,
                        member: v,
                        actor: b,
                        deleteObject: k,
                        untagObject: h,
                        loggedInUserId: _,
                        isEmbedded: "REPOST_WITH_MODAL" === s || "REPOST_NO_MODAL" === s,
                        viewportCategory: O
                    }),
                    L = "FULL" === s && (null == n ? void 0 : n.socialStatistics) && a.createElement(T, {
                        photo: n,
                        actor: b
                    }),
                    A = w({
                        photo: n,
                        actor: b,
                        member: v,
                        authInfo: g
                    }),
                    R = [a.createElement(N.a.Content, {
                        fullWidth: !0,
                        key: "photo"
                    }, a.createElement(j.InteractionLogger, null, function(e) {
                        return a.createElement(S.DeprecatedModalLink, {
                            name: "Photo_".concat(n.object.id),
                            username: (null == f ? void 0 : f.username) || (null == b ? void 0 : b.username),
                            href: null,
                            className: "social-sections-PhotoSection__photo_wrap--1KgZI",
                            key: "Photo_".concat(n.object.id),
                            onClick: function t(n) {
                                return e(n, "feedClick")
                            }
                        }, a.createElement("div", {
                            className: "social-sections-PhotoSection__photo--3wuyX"
                        }, a.createElement(r.ResponsiveImage, {
                            sources: n.object.photoSizes,
                            width: "100%",
                            height: x ? "728px" : "100%",
                            padding: x ? "0" : "0 0 ".concat(C, "%")
                        })))
                    }), ("REPOST_WITH_MODAL" === s || "FULL" === s) && a.createElement(a.Fragment, null, a.createElement(y.RouteConsumer, null, function(e) {
                        return e.route && e.route.modal === "Photo_".concat(n.object.id) ? a.createElement(y.HeadProperties, {
                            openGraphInfo: F(n.object)
                        }) : null
                    }), a.createElement(S.RoutedModal, {
                        path: {
                            modal: "Photo_".concat(n.object.id)
                        },
                        header: a.createElement(I.a, null, a.createElement(o.BrandedHeader, {
                            branding: "TA_GREEN"
                        })),
                        closeXColorVariant: "WHITE",
                        isFullBleed: !0,
                        bodyScroll: !1,
                        fullscreenAlways: !0
                    }, a.createElement(E.a, {
                        images: [n.object],
                        actor: b,
                        deleteObject: k,
                        untagObject: h,
                        showPOISavesIcon: !0,
                        socialStatisticsBar: L,
                        socialActionBar: A,
                        overflowMenuObject: n.object
                    })))), a.createElement(N.a.Content, {
                        key: "caption_".concat(n.object.id)
                    }, n.object.caption && a.createElement("div", {
                        className: "social-sections-PhotoSection__caption--1s0nn"
                    }, "MOBILE" === O && n.object.caption.length > 160 ? a.createElement(c.ReadMore, {
                        numLinesToShow: 3,
                        cta: function e() {
                            return a.createElement("div", {
                                className: "social-sections-PhotoSection__ctaLine--1F_Nc"
                            }, a.createElement("span", {
                                className: "social-sections-PhotoSection__cta--2EtuT"
                            }, Object(l.localize)("common_Read_more")), a.createElement(d.Icon, {
                                name: "caret-down"
                            }))
                        }(),
                        ctaNewline: !0
                    }, a.createElement(u.Linkify, {
                        text: n.object.caption,
                        socialReferences: n.object.socialReferences
                    })) : a.createElement(u.Linkify, {
                        text: n.object.caption,
                        socialReferences: n.object.socialReferences
                    })))];
                return a.createElement(N.a, {
                    isSingleObject: i,
                    isEmbedded: "REPOST_WITH_MODAL" === s || "REPOST_NO_MODAL" === s,
                    header: P,
                    content: R,
                    socialStatistics: n.object.socialStatistics,
                    socialActionBar: A,
                    pois: n.object.location ? [n.object.location] : [],
                    cardRef: {
                        type: n.object.__typename,
                        id: n.object.id
                    },
                    socialProofParams: {
                        displayName: Object(m.a)(b)
                    }
                })
            };
            x.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                actor: null,
                actorForUrl: void 0,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                untagObject: null,
                loggedInUserId: "",
                viewportCategory: "",
                forceShowRoutedModal: !1
            }, t.c = x
        },
        "./packages/social/sections/ReasonForCrust.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/i18n/i18n.jsx"),
                o = function e(t) {
                    var n = t.section,
                        o = function r(e) {
                            if (e) {
                                if ("PREVIOUS_VIEWED" === e.reasonFor && e.reasonForLocation) return Object(i.unescaped)(Object(i.localize)("rebrand_recommended_POI_list_shelf_title_with_placename", {
                                    poiName: '<a href="'.concat(e.reasonForLocation.url, '" class="ui_link">').concat(e.reasonForLocation.name, "</a>")
                                }));
                                if ("SPONSORED" === e.reasonFor) return Object(i.localize)("discovery_sponsored_label")
                            }
                            return null
                        }(n);
                    if (!o) return null;
                    var s = function l(e) {
                        return e && "SPONSORED" === e.reasonFor ? "social-sections-ReasonForCrust__sponsored--1Dec7" : ""
                    }(n);
                    return a.createElement("div", {
                        className: "".concat("social-sections-ReasonForCrust__reason--3HP9k", " ").concat(s)
                    }, o)
                };
            o.defaultProps = {
                section: null
            }, t.a = o
        },
        "./packages/social/sections/RepostSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/features/features.jsx"),
                r = n("./packages/public/share-cta/ShareCta.jsx"),
                s = n("@ta/social.links"),
                l = n("./packages/social/member/MemberDisplayName.jsx"),
                c = n("@ta/social.member-event"),
                d = n("./packages/social/actions/BoostAction.jsx"),
                u = n("./packages/social/actions/SocialActionBar.jsx"),
                m = n("./packages/social/actions/NestedSocialAction.jsx"),
                p = n("./packages/social/actions/LikeAction.jsx"),
                v = n("./packages/social/actions/SaveAction.jsx"),
                b = n("./packages/social/actions/DisabledSocialAction.jsx"),
                f = n("./packages/trips/trip-util/trip-util.jsx"),
                k = n("@ta/social.repost-action"),
                g = n("./packages/social/sections/CardSection.jsx"),
                h = n("./packages/social/sections/LinkPostSection.jsx"),
                _ = n("./packages/social/sections/forums/ForumPostSection.jsx"),
                j = n("./packages/social/sections/ReviewSection.jsx"),
                S = n("./packages/social/sections/PhotoSection.jsx"),
                y = n("./packages/social/sections/VideoSection.jsx"),
                N = n("./packages/social/sections/TripSection.jsx"),
                O = n("./packages/social/sections/MediaBatchPhotoSection.jsx"),
                E = function e(t) {
                    var n, E, I, C, F, T, w, x, P = t.repost,
                        L = t.isSingleObject,
                        A = t.isEmbedded,
                        R = t.member,
                        M = t.actor,
                        D = t.deleteObject,
                        z = t.loggedInMemberAuthorization,
                        B = t.untagObject,
                        V = t.loggedInUserId,
                        U = t.viewportCategory,
                        W = i.useState(0),
                        H = Object(a.a)(W, 2),
                        q = H[0],
                        G = H[1];
                    if (!P.object || !P.object.repostedObject) return null;
                    var K = P.object.repostedObject,
                        Q = K.__typename,
                        Y = K["LinkPost" === Q ? "postId" : "id"],
                        X = P.object.repostedObject.userProfile,
                        J = {
                            object: P.object.repostedObject
                        },
                        Z = null;
                    switch (Q) {
                        case "LinkPost":
                            Z = i.createElement(h.a, {
                                post: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X
                            });
                            break;
                        case "ForumPost":
                            Z = i.createElement(_.a, {
                                post: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X
                            });
                            break;
                        case "Video":
                            Z = i.createElement(y.c, {
                                video: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X,
                                actorForUrl: M,
                                loggedInMemberAuthorization: z
                            });
                            break;
                        case "Review":
                            Z = i.createElement(j.a, {
                                review: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X,
                                actorForUrl: M,
                                layout: "REPOST_WITH_MODAL"
                            });
                            break;
                        case "Photo":
                            Z = i.createElement(S.c, {
                                photo: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X,
                                actorForUrl: M,
                                forceShowRoutedModal: !0,
                                layout: "REPOST_WITH_MODAL"
                            });
                            break;
                        case "Trip":
                            Object(o.featureIsEnabled)("trips_2018_home_profile") && (Z = i.createElement(N.a, {
                                trip: J,
                                member: R,
                                isEmbedded: !0,
                                actor: X
                            }));
                            break;
                        case "MediaBatch":
                            Z = i.createElement(O.a, {
                                metadata: {
                                    __typename: null == J ? void 0 : null === (n = J.object) || void 0 === n ? void 0 : n.__typename,
                                    orderedLocations: null == J ? void 0 : null === (E = J.object) || void 0 === E ? void 0 : E.orderedLocations,
                                    mediaBatchId: null == J ? void 0 : null === (I = J.object) || void 0 === I ? void 0 : I.mediaBatchId,
                                    route: null == J ? void 0 : null === (C = J.object) || void 0 === C ? void 0 : C.route,
                                    socialReferences: null == J ? void 0 : null === (F = J.object) || void 0 === F ? void 0 : F.socialReferences,
                                    socialStatistics: null == J ? void 0 : null === (T = J.object) || void 0 === T ? void 0 : T.socialStatistics,
                                    caption: null == J ? void 0 : null === (w = J.object) || void 0 === w ? void 0 : w.caption
                                },
                                photos: null == J ? void 0 : null === (x = J.object) || void 0 === x ? void 0 : x.media,
                                layout: "REPOST_WITH_MODAL",
                                member: R,
                                actor: X,
                                actorForUrl: M,
                                currentlyDisplayedImageIndex: q,
                                setCurrentlyDisplayedImageIndex: G
                            });
                            break;
                        default:
                            Z = null
                    }
                    var $ = i.createElement(i.Fragment, null, i.createElement(c.MemberEventOnObjectBlock, {
                            objectEventType: "onRepost",
                            object: P.object,
                            member: R,
                            actor: M,
                            deleteObject: D,
                            untagObject: B,
                            loggedInUserId: V,
                            isEmbedded: A,
                            viewportCategory: U
                        }), P.object.comment && P.object.comment.length && i.createElement("div", {
                            className: "social-sections-RepostSection__comment--17aBN"
                        }, i.createElement(s.Linkify, {
                            text: P.object.comment,
                            socialReferences: P.object.socialReferences
                        }))),
                        ee = [i.createElement(g.a.Content, {
                            fullWidth: !0,
                            key: P.object.repostId
                        }, Z)],
                        te = {
                            id: P.object.repostId,
                            type: P.object.__typename
                        },
                        ne = Object(o.featureIsEnabled)("social_boosting_enabled") && z && z.canBoostContent ? i.createElement(d.a, {
                            socialObjectRef: {
                                type: "REPOST",
                                id: te.id
                            },
                            socialStatistics: P.object.socialStatistics,
                            typename: P.object.__typename
                        }) : null,
                        ae = i.createElement(u.a, null, i.createElement(m.a, {
                            padRight: !0
                        }, i.createElement(p.a, {
                            item: P.object,
                            socialObject: {
                                objectType: "REPOST",
                                objectId: te.id
                            }
                        }), Object(o.featureIsEnabled)("trips_save_ugc_reposts") && Object(f.m)(P) && i.createElement(v.a, {
                            object: {
                                __typename: P.object.__typename,
                                repostId: P.object.repostId
                            },
                            displayStyle: "icon+text"
                        })), i.createElement(m.a, null, i.createElement(k.RepostAction, {
                            modalName: "repost_".concat(te.type, "_").concat(te.id, "_").concat(Y),
                            repostPreviewProps: {
                                feedSectionItem: J,
                                member: R,
                                actor: X
                            },
                            originalRepostReference: te,
                            actor: M,
                            socialStatistics: P.object.socialStatistics
                        }), Object(o.featureIsEnabled)("social_ugc_share") && P.object.route && P.object.route.url ? i.createElement(r.a, {
                            url: "".concat(P.object.route.url),
                            itemType: "Repost",
                            itemId: P.object.repostId,
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : i.createElement(b.a, {
                            actionType: "Share"
                        }), ne));
                    return Z ? i.createElement(g.a, {
                        isSingleObject: L,
                        isEmbedded: A,
                        header: $,
                        content: ee,
                        socialStatistics: P.object.socialStatistics,
                        socialActionBar: ae,
                        pois: [],
                        cardRef: {
                            type: te.type,
                            id: te.id
                        },
                        socialProofParams: {
                            displayName: Object(l.a)(M)
                        },
                        fullWidth: !0,
                        noEmptyCarouselSpace: "LinkPost" === Q
                    }) : null
                };
            E.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                untagObject: null,
                loggedInUserId: "",
                viewportCategory: ""
            }, t.a = E
        },
        "./packages/social/sections/ReviewSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = n("./packages/common/features/features.jsx"),
                l = n("./packages/common/routing/routing.jsx"),
                c = n("./packages/styleguide/bubble-rating/BubbleRating.jsx"),
                d = n("./packages/public/share-cta/ShareCta.jsx"),
                u = n("./packages/social/member/MemberDisplayName.jsx"),
                m = n("@ta/social.member-event"),
                p = n("./packages/social/actions/BoostAction.jsx"),
                v = n("./packages/social/actions/SocialActionBar.jsx"),
                b = n("./packages/social/actions/NestedSocialAction.jsx"),
                f = n("./packages/social/actions/LikeAction.jsx"),
                k = n("./packages/social/actions/SaveAction.jsx"),
                g = n("./packages/social/actions/DisabledSocialAction.jsx"),
                h = n("@ta/social.repost-action"),
                _ = n("@ta/tracking.interactions"),
                j = n("@ta/social.review-info"),
                S = n.n(j),
                y = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                N = n("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),
                O = n("./packages/social/sections/FeedSectionPhotoCarousel.jsx"),
                E = function e(t) {
                    var n = i.useState(0),
                        a = Object(N.a)(n, 2),
                        o = a[0],
                        r = a[1];
                    return i.createElement(O.a, Object(y.a)({}, t, {
                        currentlyDisplayedIndex: o,
                        onPhotoChange: r
                    }))
                },
                I = (n("./packages/social/sections/ReasonForCrust.jsx"), n("./packages/social/sections/CardSection.jsx")),
                C = n("./packages/social/sections/SocialStatisticsBar.jsx"),
                F = function e(t) {
                    var n, o = t.review,
                        j = t.isSingleObject,
                        y = t.layout,
                        N = t.member,
                        O = t.actor,
                        F = t.actorForUrl,
                        T = (t.section, t.deleteObject),
                        w = t.loggedInMemberAuthorization,
                        x = t.viewportCategory;
                    if (!o.object) return null;
                    var P = i.createElement(i.Fragment, null, !1, i.createElement(m.MemberEventOnObjectBlock, {
                            objectEventType: "onReview",
                            object: o.object,
                            member: N,
                            actor: O,
                            deleteObject: T,
                            isEmbedded: "REPOST_WITH_MODAL" === y || "REPOST_NO_MODAL" === y,
                            viewportCategory: x
                        })),
                        L = {
                            id: o.object.id,
                            caption: o.object.text,
                            socialReferences: o.object.socialReferences,
                            socialStatistics: o.object.socialStatistics,
                            orderedLocations: [o.object.location],
                            createdDate: o.object.publishedDate,
                            __typename: o.object.__typename,
                            numPhotos: (null == o ? void 0 : o.photos) ? o.object.photos.length : 0,
                            route: o.object.route
                        },
                        A = function e(t, n) {
                            var a, r = t ? o.object.text : i.createElement(i.Fragment, null, o.object.text.substring(0, 160), o.object.text.length > 160 && "...");
                            return i.createElement(l.Link, {
                                href: null === (a = o.object.route) || void 0 === a ? void 0 : a.url,
                                onClick: n
                            }, i.createElement("div", {
                                className: "social-sections-ReviewSection__review--3qryC"
                            }, i.createElement(c.a, {
                                rating: o.object.rating
                            }), i.createElement("div", {
                                className: "social-sections-ReviewSection__title--35ISZ"
                            }, o.object.title), i.createElement("div", {
                                className: "social-sections-ReviewSection__body_text--3w6JO"
                            }, i.createElement("q", {
                                className: "social-sections-ReviewSection__quote--3gE7d"
                            }, r)), i.createElement(S.a, {
                                stayDate: o.object.tripInfo && o.object.tripInfo.stayDate,
                                placeType: o.object.location && o.object.location.placeType
                            })))
                        },
                        R = "FULL" === y && (null == o ? void 0 : null === (n = o.object) || void 0 === n ? void 0 : n.socialStatistics) ? i.createElement(C.a, {
                            stats: o.object.socialStatistics,
                            socialRef: {
                                type: o.object.__typename,
                                id: "".concat(o.object.id)
                            },
                            socialProofParams: {
                                displayName: O.displayName
                            },
                            deduplicate: !0
                        }) : null,
                        M = Object(s.featureIsEnabled)("social_boosting_enabled") && w && w.canBoostContent ? i.createElement(p.a, {
                            socialObjectRef: {
                                type: "REVIEW",
                                id: o.object.id
                            },
                            socialStatistics: o.object.socialStatistics,
                            typename: o.object.__typename
                        }) : null,
                        D = i.createElement(v.a, null, i.createElement(b.a, {
                            padRight: !0
                        }, i.createElement(f.a, {
                            item: o.object
                        }), Object(s.featureIsEnabled)("trips_save_ugc_reviews") && i.createElement(k.a, {
                            object: {
                                __typename: o.object.__typename,
                                id: o.object.id
                            },
                            displayStyle: "icon+text"
                        })), i.createElement(b.a, null, i.createElement(h.RepostAction, {
                            modalName: "repost_".concat(o.object.__typename, "_").concat(o.object.id),
                            repostPreviewProps: {
                                feedSectionItem: o,
                                member: N,
                                actor: O
                            },
                            actor: O,
                            socialStatistics: o.object.socialStatistics
                        }), Object(s.featureIsEnabled)("social_ugc_share") && o.object.route && o.object.route.url ? i.createElement(d.a, {
                            url: "".concat(o.object.route.url),
                            itemType: "Review",
                            itemId: o.object.id,
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : i.createElement(g.a, {
                            actionType: "Share"
                        }), M)),
                        z = [i.createElement(I.a.Content, {
                            key: o.object.id,
                            fullWidth: !0
                        }, i.createElement(_.InteractionLogger, null, function(e) {
                            var t;
                            return i.createElement(E, {
                                metadata: L,
                                deleteObject: T,
                                member: N,
                                photos: null == o ? void 0 : null === (t = o.object) || void 0 === t ? void 0 : t.photos,
                                onCarouselClick: function t(n) {
                                    return e(n, "feedClick")
                                },
                                actor: O,
                                actorForUrl: F,
                                additionalModalContent: A(!0),
                                socialStatisticsBar: R,
                                socialActionBar: D,
                                includeRoutedModal: "FULL" === y || "REPOST_WITH_MODAL" === y,
                                overflowMenuObject: o.object
                            })
                        })), i.createElement(I.a.Content, {
                            key: "review_".concat(o.object.id)
                        }, i.createElement("div", {
                            className: r()("social-sections-ReviewSection__review_wrap--2b9Qj", Object(a.a)({}, "social-sections-ReviewSection__embedded--_nXGn", "REPOST_WITH_MODAL" === y || "REPOST_NO_MODAL" === y))
                        }, i.createElement(_.InteractionLogger, null, function(e) {
                            return A(!1, function(t) {
                                return e(t, "feedClick")
                            })
                        })))];
                    return i.createElement(I.a, {
                        isSingleObject: j,
                        isEmbedded: "REPOST_WITH_MODAL" === y || "REPOST_NO_MODAL" === y,
                        header: P,
                        content: z,
                        socialActionBar: D,
                        socialStatistics: o.object.socialStatistics,
                        pois: o.object.location ? [o.object.location] : [],
                        cardRef: {
                            type: o.object.__typename,
                            id: o.object.id
                        },
                        socialProofParams: {
                            displayName: Object(u.a)(O)
                        }
                    })
                };
            F.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                actor: null,
                actorForUrl: void 0,
                section: null,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                viewportCategory: ""
            }, t.a = F
        },
        "./packages/social/sections/SectionModal.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./node_modules/react-redux/es/index.js"),
                m = n("./packages/common/classnames/classnames.jsx"),
                p = n.n(m),
                v = n("@ta/styleguide.avatar"),
                b = n("@ta/media.image"),
                f = n("./packages/common/routing/routing.jsx"),
                k = n("./packages/social/actions/UntagAction.jsx"),
                g = n("@ta/social.follow"),
                h = n.n(g),
                _ = n("@ta/tracking.interactions"),
                j = n("@ta/social.poi"),
                S = n("@ta/social.dates"),
                y = n("@ta/social.links"),
                N = n("@ta/common.photo-carousel"),
                O = n("@ta/social.section-overflow"),
                E = function(e) {
                    function t(e) {
                        var n;
                        Object(a.a)(this, t), n = Object(o.a)(this, Object(r.a)(t).call(this, e)), Object(c.a)(Object(l.a)(Object(l.a)(n)), "imageContainerRef", d.createRef());
                        var i = e.actor;
                        return n.state = {
                            isInitiallyFollowing: !(i && !i.isMe) || i.isFollowing,
                            imageContainerWidth: "MOBILE" === n.props.viewportCategory ? 411 : 600
                        }, n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            var t;
                            (null === (t = this.imageContainerRef) || void 0 === t ? void 0 : t.current) && this.setState({
                                imageContainerWidth: this.imageContainerRef.current.getBoundingClientRect().width
                            })
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t, n = this,
                                a = this.props,
                                i = a.actor,
                                o = a.images,
                                r = a.deleteObject,
                                s = a.untagObject,
                                l = a.viewportCategory,
                                c = a.showPOISavesIcon,
                                u = a.additionalContent,
                                m = a.socialStatisticsBar,
                                g = a.socialActionBar,
                                E = o[this.props.currentIndex],
                                I = (null == E ? void 0 : E.publishedDate) || (null == E ? void 0 : E.uploadDate),
                                C = this.state.isInitiallyFollowing ? {
                                    UNTAG: !!Object(k.a)(E, this.props.loggedInUserId)
                                } : {
                                    FOLLOW: !1,
                                    UNTAG: !!Object(k.a)(E, this.props.loggedInUserId)
                                },
                                F = "MOBILE" === l,
                                T = "TABLET" === l,
                                w = (null == E ? void 0 : null === (t = E.photoSizes) || void 0 === t ? void 0 : t.length) && Math.round(E.photoSizes[E.photoSizes.length - 1].height / (E.photoSizes[E.photoSizes.length - 1].width / 100)),
                                x = o.length > 1,
                                P = x && d.createElement(N.PhotoCarousel, {
                                    photos: o.map(function(e) {
                                        return {
                                            id: e.id,
                                            photoSizes: e.photoSizes
                                        }
                                    }),
                                    displayIndex: this.props.currentIndex,
                                    height: function e() {
                                        var t = E.photoSizes.length - 1;
                                        if ((F || T) && n.state.imageContainerWidth) {
                                            var a = E.photoSizes[t].height / E.photoSizes[t].width;
                                            return "".concat(n.state.imageContainerWidth * a, "px")
                                        }
                                        return F ? "500px" : T ? "550px" : "100%"
                                    }(),
                                    width: "100%",
                                    onPhotoChange: this.props.onPhotoChange,
                                    noCta: !0,
                                    totalCount: o.length,
                                    fitStrategy: "contain",
                                    showIndicatorDots: !0,
                                    maxIndicatorDots: 10,
                                    showProgress: !0,
                                    hideArrows: !0
                                }),
                                L = !x && (F || T ? d.createElement(b.ResponsiveImage, {
                                    sources: E.photoSizes,
                                    width: "100%",
                                    height: "auto",
                                    padding: "0 0 ".concat(w, "%"),
                                    notLazy: !0
                                }) : d.createElement(b.ResponsiveImage, {
                                    sources: E.photoSizes,
                                    width: "100%",
                                    height: "100%",
                                    fitStrategy: "contain",
                                    notLazy: !0
                                }));
                            return d.createElement("div", {
                                className: "ui_columns ".concat("social-sections-SectionModal__section_modal--2Zl-4")
                            }, d.createElement("div", {
                                className: "ui_column is-8 is-9-widescreen  is-8-desktop is-12-tablet is-12-mobile ".concat("social-sections-SectionModal__modal_image--8WmjQ"),
                                ref: this.imageContainerRef
                            }, x ? P : L), d.createElement("div", {
                                className: "ui_column is-4 is-3-widescreen is-4-desktop is-12-tablet is-12-mobile ".concat("social-sections-SectionModal__modal_info--3Vv8T")
                            }, d.createElement("div", {
                                className: "social-sections-SectionModal__section--G2oI2"
                            }, d.createElement("div", {
                                className: "social-sections-SectionModal__member_block--1UuRb"
                            }, d.createElement("div", {
                                className: "social-sections-SectionModal__member_block_left--3yBZz"
                            }, d.createElement(v.Avatar, {
                                photo: i.avatar,
                                display: "inline",
                                withBorder: !0
                            }), d.createElement("span", {
                                className: "social-sections-SectionModal__member_wrap--2OMxs"
                            }, d.createElement(_.InteractionLogger, null, function(e) {
                                return d.createElement(f.Link, {
                                    to: {
                                        page: "Profile",
                                        username: i.username
                                    },
                                    className: p()("social-sections-SectionModal__member_name--3TCAj", {
                                        verified: i.isVerified
                                    }),
                                    onClick: function t(n) {
                                        return e(n, "userClick", {
                                            userId: i.userId
                                        })
                                    }
                                }, i.displayName)
                            }), d.createElement("span", {
                                className: "social-sections-SectionModal__event_date--1xv1l"
                            }, d.createElement(S.ContentDisplayDate, {
                                dateStr: I
                            })))), d.createElement("div", {
                                className: "social-sections-SectionModal__member_block_right--3a9Zm"
                            }, i && !i.isMe && !this.state.isInitiallyFollowing && d.createElement(h.a, {
                                profile: i,
                                displayType: "icon+text"
                            }), d.createElement(O.SectionOverflowMenu, {
                                sectionObject: this.props.overflowMenuObject,
                                sectionObjectForType: this.props.overflowMenuObjectForType,
                                sectionActor: this.props.actor,
                                deleteObject: r,
                                untagObject: s,
                                overrideItems: C
                            }))), d.createElement("div", {
                                className: "social-sections-SectionModal__caption--vwFpm"
                            }, d.createElement(y.Linkify, {
                                text: E.caption,
                                socialReferences: E.socialReferences
                            })), E.caption && this.props.additionalContent && d.createElement("div", {
                                className: "social-sections-SectionModal__divider--2sadq"
                            }), u, m, g), (null == E ? void 0 : E.location) && d.createElement(j.POIObjectList, {
                                pois: [E.location],
                                showSavesIcon: c
                            })))
                        }
                    }]), t
                }(d.Component);
            Object(c.a)(E, "defaultProps", {
                deleteObject: null,
                untagObject: null,
                loggedInUserId: "",
                showPOISavesIcon: !1,
                currentIndex: 0,
                additionalContent: null
            }), t.a = Object(u.connect)(function(e) {
                return {
                    viewportCategory: e.meta.device.viewportCategory,
                    loggedInUserId: e.auth.loggedInUserId
                }
            })(E)
        },
        "./packages/social/sections/SectionModalHeader.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js");
            t.a = function e(t) {
                var n = t.children;
                return a.createElement("div", {
                    className: "ui_column\n      is-".concat(12, "-mobile is-offset-").concat(0, "-mobile\n      is-").concat(12, "-tablet is-offset-").concat(0, "-tablet\n      is-").concat(4, "-desktop is-offset-").concat(8, "-desktop\n      is-").concat(3, "-widescreen is-offset-").concat(9, "-widescreen\n      ").concat("social-sections-SectionModalHeader__offset_header--1lc-Q")
                }, n)
            }
        },
        "./packages/social/sections/SocialStatisticsBar.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("@ta/overlays.managers"),
                p = n("./packages/common/classnames/classnames.jsx"),
                v = n.n(p),
                b = n("./packages/common/i18n/i18n.jsx"),
                f = n("@ta/common.error-handling"),
                k = n("./packages/common/features/features.jsx"),
                g = n("@ta/overlays.modal"),
                h = n("@ta/overlays.headers"),
                _ = n("@ta/social.tabs"),
                j = n("./packages/common/infinite-loader/InfiniteLoader.jsx"),
                S = n("./packages/common/webview/NativeBridge.jsx"),
                y = n("./packages/common/logging/logging.jsx"),
                N = n.n(y),
                O = n("@ta/styleguide.loading"),
                E = n("./packages/social/cards/ProfileCardResponsive.jsx"),
                I = n("@ta/loading.error"),
                C = function e(t) {
                    return t.error ? (N.a.error("Error fetching LikersFeed data for ".concat(t.socialObjectRef.id, ": "), t.error), u.createElement(I.LoadingErrorMessage, {
                        refetch: t.refetch
                    })) : u.createElement("div", {
                        ref: t.contentRef,
                        className: "social-sections-socialproof-LikersFeed__feed--1mXZN"
                    }, t.likers.map(function(e) {
                        return e ? u.createElement(E.a, {
                            key: e.userId,
                            profile: e
                        }) : null
                    }), t.loading && u.createElement("div", {
                        className: "social-sections-socialproof-LikersFeed__loading--3z4ah"
                    }, u.createElement(O.LoadingSpinner, null)))
                },
                F = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                T = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                w = n("@ta/social.feed"),
                x = {
                    Review: "REVIEW",
                    Photo: "PHOTO",
                    Video: "VIDEO",
                    ForumPost: "FORUM_POST",
                    LinkPost: "LINK_POST",
                    Trip: "TRIP",
                    TripItem: "TRIP_ITEM",
                    Repost: "REPOST",
                    MediaBatch: "MEDIA_BATCH"
                },
                P = function e(t) {
                    return u.createElement(T.Query, {
                        query: w.LikersFeedQuery,
                        notifyOnNetworkStatusChange: !0,
                        variables: {
                            objectId: t.socialObjectRef.id,
                            objectType: x[t.socialObjectRef.type],
                            limit: 20
                        }
                    }, function(e) {
                        var n = e.data,
                            a = e.error,
                            i = e.fetchMore,
                            o = e.loading,
                            r = e.refetch;
                        return t.children(function e() {
                            return i({
                                variables: {
                                    offset: n.likers.list.length
                                },
                                updateQuery: function e(t, n) {
                                    var a = n.fetchMoreResult;
                                    return a && t.likers.hasMore ? Object.assign({}, t, {
                                        likers: {
                                            list: [].concat(Object(F.a)(t.likers.list), Object(F.a)(a.likers.list)),
                                            hasMore: a.likers.hasMore,
                                            __typename: t.likers.__typename
                                        }
                                    }) : t
                                }
                            })
                        }, n && n.likers ? n.likers.list : [], !(!n || !n.likers) && n.likers.hasMore, o, a, r)
                    })
                },
                L = function e(t) {
                    return t.error ? (N.a.error("Error fetching RepostersFeed data for ".concat(t.socialObjectRef.id, ": "), t.error), u.createElement(I.LoadingErrorMessage, {
                        refetch: t.refetch
                    })) : u.createElement("div", {
                        className: "social-sections-socialproof-RepostersFeed__feed--scIxT",
                        ref: t.contentRef
                    }, t.reposters.map(function(e, t) {
                        return e ? u.createElement(E.a, {
                            key: "".concat(e.userId, ":").concat(t),
                            profile: e
                        }) : null
                    }), t.loading && u.createElement("div", {
                        className: "social-sections-socialproof-RepostersFeed__loading--pl3fi"
                    }, u.createElement(O.LoadingSpinner, null)))
                },
                A = n("./packages/social/feed/feedFragments/UserProfileFields.fragment.gql"),
                R = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "reposters"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "repostReference"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "RepostReferenceInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "limit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Long"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "offset"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Long"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "reposters"
                                },
                                name: {
                                    kind: "Name",
                                    value: "reposters"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "repostReference"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "repostReference"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "offset"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "offset"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "list"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "UserProfileFields"
                                                },
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isFollowing"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "followerCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "contributionCounts"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sumAllUgc"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 405
                    }
                };
            R.loc.source = {
                body: "a3fdf3518555"
            };
            var M = {};
            R.definitions = R.definitions.concat(function D(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !M[t] && (M[t] = !0, !0)
                })
            }(A.a.definitions));
            var z = R,
                B = {
                    Review: "REVIEW",
                    Photo: "PHOTO",
                    Video: "VIDEO",
                    ForumPost: "FORUM_POST",
                    LinkPost: "LINK_POST",
                    Trip: "TRIP",
                    TripItem: "TRIP_ITEM",
                    Repost: "REPOST",
                    MediaBatch: "MEDIA_BATCH"
                },
                V = function e(t) {
                    return u.createElement(T.Query, {
                        query: z,
                        notifyOnNetworkStatusChange: !0,
                        variables: {
                            repostReference: {
                                id: t.socialObjectRef.id,
                                type: B[t.socialObjectRef.type]
                            },
                            limit: 20
                        }
                    }, function(e) {
                        var n = e.data,
                            a = e.error,
                            i = e.fetchMore,
                            o = e.loading,
                            r = e.refetch;
                        return t.children(function e() {
                            return i({
                                variables: {
                                    offset: n.reposters.list.length
                                },
                                updateQuery: function e(t, n) {
                                    var a = n.fetchMoreResult;
                                    return a && t.reposters.hasMore ? Object.assign({}, t, {
                                        reposters: {
                                            list: [].concat(Object(F.a)(t.reposters.list), Object(F.a)(a.reposters.list)),
                                            hasMore: a.reposters.hasMore,
                                            __typename: t.reposters.__typename
                                        }
                                    }) : t
                                }
                            })
                        }, n && n.reposters ? n.reposters.list : [], !(!n || !n.reposters) && n.reposters.hasMore, o, a, r)
                    })
                },
                U = n("@ta/styleguide.icon"),
                W = function e(t) {
                    if (t.error) return N.a.error("Error fetching SaversFeed data for ".concat(t.socialObjectRef.id, ": "), t.error), u.createElement(I.LoadingErrorMessage, {
                        refetch: t.refetch
                    });
                    var n = {
                            0: t.privateCount
                        },
                        a = t.savers.length > 0 ? Object(b.localize)("saves_modal_other_users_private_v2", n) : Object(b.localize)("saves_modal_other_users_private_no_public", n);
                    return u.createElement("div", {
                        className: "social-sections-socialproof-savers-SaversFeed__feed--3PEL7",
                        ref: t.contentRef
                    }, t.savers.map(function(e) {
                        return e ? u.createElement(E.a, {
                            key: e.userId,
                            profile: e.userProfile
                        }) : null
                    }), u.createElement("div", {
                        className: "social-sections-socialproof-savers-SaversFeed__privateCount--cAHmv"
                    }, u.createElement(U.Icon, {
                        className: "social-sections-socialproof-savers-SaversFeed__privateIcon--23xvc",
                        name: "suitcase"
                    }), a), t.loading && u.createElement("div", {
                        className: "social-sections-socialproof-savers-SaversFeed__loading--1LsoZ"
                    }, u.createElement(O.LoadingSpinner, null)))
                },
                H = n("./packages/trips/trip-util/trip-util.jsx"),
                q = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "savers"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "reference"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "TripReferenceInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "limit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "offset"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "loadCount"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "privateCount"
                                },
                                name: {
                                    kind: "Name",
                                    value: "getPrivateTripCount"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reference"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "reference"
                                        }
                                    }
                                }],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "loadCount"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savers"
                                },
                                name: {
                                    kind: "Name",
                                    value: "savers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reference"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "reference"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "offset"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "offset"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "users"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userProfile"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "UserProfileFields"
                                                        },
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isFollowing"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "followerCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "contributionCounts"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sumAllUgc"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 534
                    }
                };
            q.loc.source = {
                body: "e052f18703c3"
            };
            var G = {};
            q.definitions = q.definitions.concat(function K(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !G[t] && (G[t] = !0, !0)
                })
            }(A.a.definitions));
            var Q = q,
                Y = function e(t) {
                    var n = Object(H.g)(t.socialObjectRef.type);
                    return u.createElement(T.Query, {
                        fetchPolicy: "network-only",
                        query: Q,
                        notifyOnNetworkStatusChange: !0,
                        variables: {
                            reference: {
                                id: t.socialObjectRef.id,
                                type: n
                            },
                            limit: 20,
                            loadCount: !0
                        }
                    }, function(e) {
                        var n = e.data,
                            a = e.error,
                            i = e.fetchMore,
                            o = e.loading,
                            r = e.refetch;
                        return t.children(function e() {
                            return i({
                                variables: {
                                    offset: n.savers.users.length,
                                    loadCount: !1
                                },
                                updateQuery: function e(t, n) {
                                    var a = n.fetchMoreResult;
                                    return a && t.savers.hasMore ? Object.assign({}, t, {
                                        savers: {
                                            users: [].concat(Object(F.a)(t.savers.users), Object(F.a)(a.savers.users)),
                                            hasMore: a.savers.hasMore,
                                            privateCount: t.privateCount,
                                            __typename: t.savers.__typename
                                        }
                                    }) : t
                                }
                            })
                        }, n && n.savers ? n.savers.users : [], !(!n || !n.savers) && n.savers.hasMore, n && n.privateCount ? n.privateCount : 0, o, a, r)
                    })
                },
                X = function e(t) {
                    var n = t.socialRef,
                        a = t.isForumTopic,
                        i = t.poiName,
                        o = t.displayName,
                        r = t.tripItemType,
                        s = n.type;
                    return "TripItem" === n.type && (s = r), "ForumPost" !== n.type && "ForumPost" !== r || (s = a ? "ForumTopic" : "ForumReply"), ["LocationInformation", "AttractionProductInformation"].includes(r) ? i : function e(t, n) {
                        switch (t) {
                            case "Review":
                                return Object(b.localize)("mobile_profile_users_review", n);
                            case "Photo":
                                return Object(b.localize)("mobile_profile_users_photo", n);
                            case "Video":
                                return Object(b.localize)("mobile_profile_users_video", n);
                            case "LinkPost":
                                return Object(b.localize)("mobile_profile_users_link_post", n);
                            case "Trip":
                                return Object(b.localize)("mobile_profile_users_trip", n);
                            case "Repost":
                                return Object(b.localize)("mobile_profile_users_repost", n);
                            case "TripItem":
                            case "ForumPost":
                                return "";
                            case "ForumReply":
                                return Object(b.localize)("mobile_profile_users_forum_post_reply", n);
                            case "ForumTopic":
                                return Object(b.localize)("mobile_profile_users_forum_post_question", n);
                            case "MediaBatch":
                                return Object(b.localize)("social_proof_media_batch_photos_v2", n)
                        }
                        return ""
                    }(s, {
                        0: o
                    })
                },
                J = function e(t) {
                    var n = t.stats,
                        a = t.socialRef,
                        i = t.showLikers,
                        o = t.showReposters,
                        r = t.showSavers,
                        s = t.type,
                        l = t.modalName,
                        c = t.isWebview,
                        d = t.isForumTopic,
                        m = t.poiName,
                        p = t.tripItemType,
                        v = t.displayName,
                        f = t.onModalClose,
                        y = "Review" === a.type;
                    return u.createElement(g.Modal, {
                        name: l,
                        isFullBleed: !0,
                        isNativeWebview: c,
                        marginTop: S.getHeaderHeight(),
                        onClose: f,
                        bodyScroll: !1,
                        header: c ? null : u.createElement(h.TitleBar, {
                            displayType: "LEFT_ALIGN_GRAY"
                        }, X({
                            socialRef: a,
                            isForumTopic: d,
                            poiName: m,
                            displayName: v,
                            tripItemType: p
                        }))
                    }, function e() {
                        var t = [];
                        if (i) {
                            var c = y ? Object(b.localize)("mobile_profile_users_helpfuls_v3", {
                                nHelpfuls: n.likeCount
                            }) : Object(b.localize)("mobile_profile_users_likes_v3", {
                                nLikes: n.likeCount
                            });
                            t.push(u.createElement(_.SocialTab, {
                                key: "".concat(l, "_tab_").concat(Math.random()),
                                isActive: "Likers" === s,
                                label: c
                            }, u.createElement(P, {
                                socialObjectRef: a
                            }, function(e, t, n, i, o, r) {
                                return u.createElement(j.a, {
                                    loadMore: e,
                                    threshold: 550,
                                    throttle: 50,
                                    hasMore: n,
                                    infiniteLoadOnMount: !0
                                }, function(e, n) {
                                    return u.createElement("div", {
                                        className: "social-sections-socialproof-SocialProofModal__feed--2Vznt",
                                        ref: e
                                    }, u.createElement(C, {
                                        likers: t,
                                        loading: i,
                                        error: o,
                                        refetch: r,
                                        contentRef: n,
                                        socialObjectRef: a
                                    }))
                                })
                            })))
                        }
                        o && t.push(u.createElement(_.SocialTab, {
                            key: "".concat(l, "_tab_").concat(Math.random()),
                            isActive: "Reposters" === s,
                            label: Object(b.localize)("mobile_profile_users_reposts_v3", {
                                nReposts: n.repostCount
                            })
                        }, u.createElement(V, {
                            socialObjectRef: a
                        }, function(e, t, n, i, o, r) {
                            return u.createElement(j.a, {
                                loadMore: e,
                                threshold: 550,
                                throttle: 50,
                                hasMore: n,
                                infiniteLoadOnMount: !0
                            }, function(e, n) {
                                return u.createElement("div", {
                                    className: "social-sections-socialproof-SocialProofModal__feed--2Vznt",
                                    ref: e
                                }, u.createElement(L, {
                                    reposters: t,
                                    loading: i,
                                    error: o,
                                    refetch: r,
                                    contentRef: n,
                                    socialObjectRef: a
                                }))
                            })
                        })));
                        var d = Object(k.featureIsEnabled)("trip_savers_modal");
                        return r && d && t.push(u.createElement(_.SocialTab, {
                            key: "".concat(l, "_tab_").concat(Math.random()),
                            isActive: "Savers" === s,
                            label: Object(b.localize)("mobile_profile_users_saves_v3", {
                                nSaves: n.tripCount
                            })
                        }, u.createElement(Y, {
                            socialObjectRef: a
                        }, function(e, t, n, i, o, r, s) {
                            return u.createElement(j.a, {
                                loadMore: e,
                                threshold: 550,
                                throttle: 50,
                                hasMore: n,
                                infiniteLoadOnMount: !0
                            }, function(e, n) {
                                return u.createElement("div", {
                                    className: "social-sections-socialproof-SocialProofModal__feed--2Vznt",
                                    ref: e
                                }, u.createElement(W, {
                                    savers: t,
                                    privateCount: i,
                                    loading: o,
                                    error: r,
                                    refetch: s,
                                    contentRef: n,
                                    socialObjectRef: a
                                }))
                            })
                        }))), u.createElement(_.SocialTabs, null, t)
                    }())
                },
                Z = function(e) {
                    function t() {
                        var e, n;
                        Object(i.a)(this, t);
                        for (var a = arguments.length, o = new Array(a), l = 0; l < a; l++) o[l] = arguments[l];
                        return n = Object(r.a)(this, (e = Object(s.a)(t)).call.apply(e, [this].concat(o))), Object(d.a)(Object(c.a)(Object(c.a)(n)), "namespace", Math.random()), n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this.props,
                                n = t.deduplicate,
                                i = t.socialRef,
                                o = t.stats,
                                r = t.socialProofParams,
                                s = !!o.likeCount && o.likeCount > 0,
                                l = "Review" === i.type,
                                c = !!o.repostCount && o.repostCount > 0 && "TripItem" !== i.type,
                                p = !c && "TripItem" === i.type && !!o.tripCount && o.tripCount > 0,
                                g = s,
                                h = s || c || p,
                                _ = n ? this.namespace : "",
                                j = "".concat(_ || "", "_likers_").concat(i.type, "_").concat(i.id),
                                S = "".concat(_ || "", "_reposters_").concat(i.type, "_").concat(i.id),
                                y = "".concat(_ || "", "_savers_").concat(i.type, "_").concat(i.id),
                                N = u.createElement(u.Fragment, null, u.createElement(m.Closer, null, function(e) {
                                    return u.createElement(m.Opener, {
                                        name: j
                                    }, function(t) {
                                        var n = r.displayName,
                                            a = r.isForumTopic,
                                            s = r.poiName,
                                            c = r.updateNativeBridgeProps,
                                            d = r.currentNativeBridgeProps,
                                            m = r.onModalClose,
                                            p = r.tripItemType;
                                        return u.createElement("span", {
                                            onClick: function v() {
                                                "function" == typeof c && c(Object.assign({}, d, {
                                                    title: X({
                                                        displayName: n,
                                                        isForumTopic: a,
                                                        poiName: s,
                                                        socialRef: i,
                                                        tripItemType: p
                                                    }),
                                                    navbarHiddenAboveScrollHeight: -100,
                                                    hideBackButton: !0,
                                                    closeCallback: function t() {
                                                        e(), m()
                                                    }
                                                })), t()
                                            }
                                        }, l ? Object(b.localize)("n_Helpful_votes_plural", {
                                            0: o.likeCount
                                        }) : Object(b.localize)("member_list_likes", {
                                            0: o.likeCount
                                        }))
                                    })
                                }), u.createElement(J, Object(a.a)({}, r, {
                                    type: "Likers",
                                    showLikers: s,
                                    showReposters: c,
                                    showSavers: p,
                                    modalName: j,
                                    socialRef: i,
                                    stats: o
                                }))),
                                O = u.createElement(u.Fragment, null, u.createElement(m.Opener, {
                                    name: S
                                }, function(e) {
                                    return u.createElement("span", {
                                        onClick: e
                                    }, Object(b.localize)("member_list_reposts", {
                                        0: o.repostCount
                                    }))
                                }), u.createElement(J, Object(a.a)({}, r, {
                                    type: "Reposters",
                                    showLikers: g,
                                    showReposters: c,
                                    showSavers: p,
                                    modalName: S,
                                    socialRef: i,
                                    stats: o
                                }))),
                                E = Object(k.featureIsEnabled)("trip_savers_modal"),
                                I = u.createElement(u.Fragment, null, u.createElement(m.Opener, {
                                    name: y
                                }, function(e) {
                                    return u.createElement("span", {
                                        onClick: function t() {
                                            E && e()
                                        },
                                        className: "social-sections-SocialStatisticsBar__counts--35oyz"
                                    }, Object(b.localize)("n_saves_plural", {
                                        0: o.tripCount
                                    }))
                                }), u.createElement(J, Object(a.a)({}, r, {
                                    type: "Savers",
                                    showLikers: s,
                                    showReposters: c,
                                    showSavers: p,
                                    modalName: y,
                                    socialRef: i,
                                    stats: o
                                })));
                            return u.createElement(f.ErrorBoundary, null, u.createElement("span", {
                                className: v()("social-sections-SocialStatisticsBar__bar--8jAAo", Object(d.a)({}, "social-sections-SocialStatisticsBar__visible--2TinK", h))
                            }, s && u.createElement("span", {
                                className: "".concat("social-sections-SocialStatisticsBar__counts--35oyz", " ").concat("social-sections-SocialStatisticsBar__item--3Fm5r")
                            }, N), p && u.createElement("span", {
                                className: "".concat("social-sections-SocialStatisticsBar__counts--35oyz", " ").concat("social-sections-SocialStatisticsBar__item--3Fm5r")
                            }, I), c && u.createElement("span", {
                                className: "".concat("social-sections-SocialStatisticsBar__counts--35oyz", " ").concat("social-sections-SocialStatisticsBar__item--3Fm5r")
                            }, O)))
                        }
                    }]), t
                }(u.Component);
            Object(d.a)(Z, "defaultProps", {
                deduplicate: !1
            }), t.a = Z
        },
        "./packages/social/sections/TripSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./node_modules/react-redux/es/index.js"),
                r = n("@ta/media.image"),
                s = n("./packages/trips/social/TripSocialActionBar.jsx"),
                l = n("@ta/social.links"),
                c = n("./packages/social/member/MemberDisplayName.jsx"),
                d = n("@ta/social.member-event"),
                u = n("./packages/trips/trip-byline/TripByLine.jsx"),
                m = n("./packages/trips/trip-avatars/TripAvatars.jsx"),
                p = n("./packages/common/routing/routing.jsx"),
                v = n("@ta/styleguide.icon"),
                b = n("@ta/overlays.modal"),
                f = n("@ta/overlays.managers"),
                k = n("@ta/overlays.headers"),
                g = n("./packages/trips/collaboration/CollaboratorPanel.jsx"),
                h = n("./packages/common/i18n/i18n.jsx"),
                _ = n("@ta/tracking.interactions"),
                j = n("./packages/social/sections/CardSection.jsx"),
                S = function e(t, n) {
                    var a = t && t.photo && t.photo.photoSizes,
                        o = "MOBILE" !== n ? 300 : 176;
                    return a ? i.createElement(r.ResponsiveImage, {
                        sources: a,
                        width: "100%",
                        height: "".concat(o, "px")
                    }) : i.createElement("div", {
                        className: "social-sections-TripSection__placeholder--czjll",
                        style: {
                            width: "100%",
                            height: o
                        }
                    }, i.createElement(v.Icon, {
                        name: "suitcase"
                    }))
                },
                y = function e(t) {
                    var n = t.children,
                        a = t.trip;
                    return i.createElement(_.InteractionLogger, null, function(e) {
                        return i.createElement(p.Link, {
                            to: {
                                page: "Trips",
                                tripId: a.object.id,
                                tripTitle: "PUBLIC" === a.object.status ? a.object.title : void 0
                            },
                            onClick: function t(n) {
                                e(n, "feedClick"), n.stopPropagation()
                            }
                        }, n)
                    })
                },
                N = function e(t) {
                    var n = i.createElement(k.TitleBar, {
                        iconName: "users",
                        displayType: "LEFT_ALIGN_GRAY"
                    }, i.createElement("span", null, Object(h.localize)("saves_Collaborators")));
                    return i.createElement(b.Modal, {
                        name: t.name,
                        header: n
                    }, i.createElement(g.a, {
                        trip: t.trip,
                        readOnly: !0,
                        avatarNotLazy: !0
                    }))
                },
                O = function e(t) {
                    var n = t.member,
                        a = t.actor,
                        o = t.trip,
                        r = t.deleteObject,
                        p = t.untagObject,
                        v = t.loggedInUserId,
                        b = t.isSingleObject,
                        k = t.isEmbedded,
                        g = t.descriptionLength,
                        h = t.viewportCategory,
                        _ = t.loggedInMemberAuthorization,
                        O = o.object.orderedLocations ? o.object.orderedLocations : [],
                        E = o.object.items ? o.object.items.map(function(e) {
                            return e.object
                        }).filter(function(e) {
                            return e && "AttractionProductInformation" === e.__typename
                        }) : [],
                        I = O.concat(E),
                        C = i.createElement(d.MemberEventOnObjectBlock, {
                            objectEventType: "onTrip",
                            object: o.object,
                            member: n,
                            deleteObject: r,
                            untagObject: p,
                            loggedInUserId: v,
                            isEmbedded: k,
                            actor: a,
                            viewportCategory: h
                        }),
                        F = Object(s.a)({
                            trip: o,
                            member: n,
                            actor: a,
                            shareType: "PUBLIC",
                            viewportCategory: h,
                            loggedInMemberAuthorization: _,
                            justifyContent: "SPACE_BETWEEN"
                        }),
                        T = i.useRef("collabModal".concat(o.object.id, "_").concat(Math.random())).current,
                        w = i.createElement(N, {
                            trip: o.object,
                            name: T
                        }),
                        x = i.createElement(m.a, {
                            trip: o.object,
                            avatarSize: "default",
                            tabletAvatarSize: "large"
                        }),
                        P = i.createElement(f.Opener, {
                            name: T
                        }, function(e) {
                            return i.createElement(u.a, {
                                trip: o.object,
                                linkClassName: "social-sections-TripSection__creator_name--2UYLQ",
                                onExpand: e
                            })
                        }),
                        L = o.object.description,
                        A = void 0 === L ? "" : L,
                        R = g && A.length > g ? "".concat(A.substring(0, g).trim(), "...") : A,
                        M = [i.createElement(j.a.Content, {
                            fullWidth: !0,
                            key: "coverphoto"
                        }, i.createElement("div", {
                            className: "social-sections-TripSection__photoContainer--2WlMA"
                        }, i.createElement(y, {
                            trip: o
                        }, S(o.object, h)), i.createElement("div", {
                            className: "social-sections-TripSection__avatar--192NQ"
                        }, x))), i.createElement(j.a.Content, {
                            fullwidth: !0,
                            key: "title",
                            className: "social-sections-TripSection__content--J6Jua"
                        }, i.createElement(y, {
                            trip: o
                        }, i.createElement("div", {
                            className: "social-sections-TripSection__title--36a5q"
                        }, o.object.title)), P, w, i.createElement(y, {
                            trip: o
                        }, i.createElement("div", {
                            className: "social-sections-TripSection__description--17WeV"
                        }, i.createElement(l.Linkify, {
                            text: R,
                            socialReferences: o.object.socialReferences,
                            useSpan: !0
                        }))))];
                    return i.createElement(j.a, {
                        isSingleObject: b,
                        header: C,
                        content: M,
                        socialActionBar: F,
                        socialStatistics: o.object.socialStatistics,
                        contentClass: "social-sections-TripSection__content--J6Jua",
                        pois: I,
                        isEmbedded: k,
                        cardRef: {
                            type: "Trip",
                            id: o.object.id.toString()
                        },
                        socialProofParams: {
                            displayName: Object(c.a)(a)
                        }
                    })
                };
            O.defaultProps = {
                isEmbedded: !1,
                deleteObject: null,
                untagObject: null,
                loggedInUserId: "",
                isSingleObject: !1,
                descriptionLength: 250,
                loggedInMemberAuthorization: void 0
            }, t.a = Object(o.connect)(function(e, t) {
                return Object(a.a)({
                    viewportCategory: e.meta.device.viewportCategory
                }, t)
            })(O)
        },
        "./packages/social/sections/UgcActionSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/i18n/i18n.jsx"),
                r = n("./packages/common/state/state.jsx"),
                s = n("./packages/common/tracking/tracking.jsx"),
                l = n.n(s),
                c = n("@ta/overlays.managers"),
                d = n("@ta/styleguide.icon"),
                u = function e(t) {
                    return t.url ? i.createElement("a", {
                        href: t.url,
                        className: "public-listing-LabeledIconAction__item--1iFiW",
                        onClick: t.onClick
                    }, t.children) : i.createElement("span", {
                        className: "public-listing-LabeledIconAction__item--1iFiW",
                        onClick: t.onClick
                    }, t.children)
                },
                m = function e(t) {
                    return i.createElement(u, t, i.createElement(i.Fragment, null, i.createElement(d.Icon, {
                        className: "public-listing-LabeledIconAction__itemIcon--2W25O",
                        name: t.icon
                    }), i.createElement("span", {
                        className: "public-listing-LabeledIconAction__itemLabel--nM7ao"
                    }, t.label)))
                };
            m.defaultProps = {
                onClick: null,
                url: null
            };
            var p = m,
                v = n("@ta/social.login-gate"),
                b = n("@ta/tracking.interactions"),
                f = function e(t) {
                    var n = t.label,
                        a = t.icon,
                        o = t.trackingName,
                        s = void 0 === o ? void 0 : o,
                        d = t.onClick,
                        u = Object(r.getStore)().getState();
                    if (t.url) {
                        var m = t.url;
                        return i.createElement(v.SocialLoginGate, {
                            pid: t.pid
                        }, function(e) {
                            return i.createElement(b.InteractionLogger, null, function(t) {
                                return i.createElement(p, {
                                    icon: a,
                                    label: n,
                                    url: m,
                                    onClick: function n(a) {
                                        var i, o, r;
                                        void 0 !== s && (t(a, "postContentCtaClick", {
                                            action: s,
                                            entrypoint: "ACTION_CARD",
                                            isMemberSignedIn: null == u ? void 0 : null === (i = u.auth) || void 0 === i ? void 0 : i.isMember
                                        }), l()({
                                            module: "postContentCtaClick",
                                            action: s,
                                            context: "ACTION_CARD|".concat(null == u ? void 0 : null === (o = u.route) || void 0 === o ? void 0 : o.page),
                                            isMemberSignedIn: null == u ? void 0 : null === (r = u.auth) || void 0 === r ? void 0 : r.isMember
                                        })), a.preventDefault(), e().then(function() {
                                            d && d(a), window.location.href = m
                                        })
                                    }
                                })
                            })
                        })
                    }
                    if (t.name) {
                        var f = t.name,
                            k = t.overlay;
                        return i.createElement(i.Fragment, null, k(), i.createElement(c.Opener, {
                            name: f
                        }, function(e) {
                            return i.createElement(v.SocialLoginGate, {
                                pid: t.pid
                            }, function(t) {
                                return i.createElement(b.InteractionLogger, null, function(o) {
                                    return i.createElement(p, {
                                        icon: a,
                                        label: n,
                                        onClick: function n(a) {
                                            var i, r, c;
                                            void 0 !== s && (o(a, "postContentCtaClick", {
                                                action: s,
                                                entrypoint: "ACTION_CARD",
                                                isMemberSignedIn: null == u ? void 0 : null === (i = u.auth) || void 0 === i ? void 0 : i.isMember
                                            }), l()({
                                                module: "postContentCtaClick",
                                                action: s,
                                                context: "ACTION_CARD|".concat(null == u ? void 0 : null === (r = u.route) || void 0 === r ? void 0 : r.page),
                                                isMemberSignedIn: null == u ? void 0 : null === (c = u.auth) || void 0 === c ? void 0 : c.isMember
                                            })), t().then(function() {
                                                e(), d && d(a)
                                            })
                                        }
                                    })
                                })
                            })
                        }))
                    }
                    return null
                };
            f.defaultProps = {
                onClick: void 0
            }, t.a = function e(t) {
                var n = t.actions;
                return i.createElement("div", {
                    className: "".concat("social-sections-UgcActionSection__section--3rHoM", " ui_card section")
                }, i.createElement("div", {
                    className: "social-sections-UgcActionSection__header--2rdu0"
                }, Object(o.localize)("social_profile_ugc_cta")), n.map(function(e) {
                    return i.createElement(f, Object(a.a)({}, e, {
                        key: e.label
                    }))
                }))
            }
        },
        "./packages/social/sections/VideoSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                m = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                p = n("./node_modules/react/index.js"),
                v = n("./node_modules/react-redux/es/index.js"),
                b = n("./packages/events/window-resize/WindowResize.jsx"),
                f = n("./packages/common/features/features.jsx"),
                k = n("./packages/common/i18n/i18n.jsx"),
                g = n("@ta/common.text"),
                h = n("@ta/media.common"),
                _ = n("@ta/overlays.headers"),
                j = n("./packages/common/routing/routing.jsx"),
                S = n("@ta/platform.import"),
                y = n("@ta/tracking.interactions"),
                N = n("@ta/styleguide.icon"),
                O = n("./packages/public/share-cta/ShareCta.jsx"),
                E = n("@ta/social.links"),
                I = n("./packages/social/member/MemberDisplayName.jsx"),
                C = n("@ta/social.member-event"),
                F = n("@ta/common.sessionstorage"),
                T = n.n(F),
                w = n("./packages/social/actions/BoostAction.jsx"),
                x = n("./packages/social/actions/SocialActionBar.jsx"),
                P = n("./packages/social/actions/NestedSocialAction.jsx"),
                L = n("./packages/social/actions/LikeAction.jsx"),
                A = n("./packages/social/actions/SaveAction.jsx"),
                R = n("./packages/social/actions/DisabledSocialAction.jsx"),
                M = n("@ta/social.repost-action"),
                D = n("./packages/social/sections/CardSection.jsx"),
                z = n("./packages/social/sections/VideoSidebar.jsx");
            n.d(t, "a", function() {
                return B
            }), n.d(t, "b", function() {
                return H
            });
            var B = "VideoFullscreenFromFeedDate",
                V = Object(S.deferredImport)("@ta/media.video-player", "VideoPlayer"),
                U = function e(t) {
                    var n = (null == t ? void 0 : t.object).statuses;
                    return !(!n || 0 === n.length || n.includes("UPLOADING"))
                },
                W = function(e) {
                    function t(e) {
                        var n;
                        return Object(r.a)(this, t), n = Object(l.a)(this, Object(c.a)(t).call(this, e)), Object(m.a)(Object(u.a)(Object(u.a)(n)), "computeStyles", function() {
                            if (n.contentNode && n.contentNode.current) {
                                var e = n.contentNode.current.getBoundingClientRect().width;
                                n.setState({
                                    containerWidth: e
                                })
                            }
                        }), Object(m.a)(Object(u.a)(Object(u.a)(n)), "contentNode", void 0), n.state = {
                            containerWidth: null,
                            realAspectRatio: null,
                            videoFullscreen: !1
                        }, n.contentNode = p.createRef(), n
                    }
                    return Object(d.a)(t, e), Object(s.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            this.computeStyles()
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props,
                                a = n.actor,
                                i = n.video,
                                o = n.isOpen,
                                r = n.loggedInMemberAuthorization,
                                s = n.deleteObject,
                                l = n.untagObject,
                                c = n.loggedInUserId,
                                d = n.onClick,
                                u = n.trackingModule,
                                m = n.onClose,
                                v = this.state,
                                f = v.realAspectRatio,
                                g = v.videoFullscreen,
                                h = i.object;
                            if (!h || !a.isMe && !h.statuses.includes("PUBLISHED") && !h.statuses.includes("PENDING")) return null;
                            var S = f || h.sources && h.sources.length > 0 && h.sources[0].aspectRatio,
                                O = S && this.state.containerWidth ? "".concat(Math.min(450, Math.ceil(this.state.containerWidth / S)), "px") : "350px",
                                E = U(i),
                                I = i.object.sources.findIndex(function(e) {
                                    return e.url.toLowerCase().indexOf("mp4") > -1
                                });
                            I = I > -1 ? I : i.object.sources.length - 1;
                            var C = g ? {
                                opacity: 1
                            } : {};
                            return p.createElement(p.Fragment, null, p.createElement(b.a, {
                                callback: this.computeStyles
                            }), p.createElement("div", {
                                key: "vw_".concat(h.id),
                                className: "".concat("social-sections-VideoSection__video_wrap--2Gd-C", " ").concat(o ? "social-sections-VideoSection__modalView--3lq_2" : "social-sections-VideoSection__inlineView--2RavO"),
                                ref: this.contentNode
                            }, p.createElement("div", {
                                className: "".concat("social-sections-VideoSection__video--3IXg4", " ").concat(o ? "ui_columns" : ""),
                                style: C
                            }, o && p.createElement("div", {
                                className: "".concat("social-sections-VideoSection__header--32q9T", " ui_column is-4 is-offset-8 is-3-widescreen is-offset-9-widescreen is-12-mobile")
                            }, p.createElement(_.BrandedHeader, {
                                branding: "TA_GREEN"
                            })), p.createElement("div", {
                                className: o ? "".concat("social-sections-VideoSection__video_wrap--2Gd-C", " ui_column is-8 is-9-widescreen is-12-mobile") : ""
                            }, p.createElement(j.RouteConsumer, null, function(e) {
                                return e.route && e.route.modal === "Video_".concat(i.object.id) ? p.createElement(j.HeadProperties, {
                                    openGraphInfo: {
                                        type: "video.other",
                                        title: null != i.object.userProfile && null != i.object.userProfile.displayName ? Object(k.localize)("social_opengraph_video_title", {
                                            username: i.object.userProfile.displayName
                                        }) : "",
                                        description: null != i.object.caption ? "".concat(i.object.caption) : "",
                                        url: i.object.route.url,
                                        image: {
                                            url: null != i.object.posterSizes[0] ? "".concat(i.object.posterSizes[0].url) : "",
                                            width: null != i.object.posterSizes[0] ? i.object.posterSizes[0].width : 0,
                                            height: null != i.object.posterSizes[0] ? i.object.posterSizes[0].height : 0
                                        },
                                        video: {
                                            url: "".concat(i.object.sources[I].url),
                                            width: i.object.sources[I].width,
                                            height: i.object.sources[I].height
                                        }
                                    }
                                }) : null
                            }), E && p.createElement(y.InteractionLogger, null, function(e) {
                                return p.createElement(V, {
                                    key: "player_".concat(h.id),
                                    source: i.object.sources[0].url,
                                    width: "100%",
                                    height: o ? "100%" : O,
                                    preload: "auto",
                                    trackingModule: u,
                                    mediaId: i.object.id,
                                    fullscreenOnLandscape: !0,
                                    onFullscreenChange: function e(n) {
                                        t.setState({
                                            videoFullscreen: n
                                        })
                                    },
                                    onLoaded: function e(n, a) {
                                        t.setState({
                                            realAspectRatio: n / a
                                        })
                                    },
                                    onClick: d,
                                    onClickTracking: function t(n) {
                                        return e(n, "feedClick")
                                    }
                                })
                            }), !E && p.createElement("div", {
                                className: "social-sections-VideoSection__video_not_available--1RZA1",
                                style: {
                                    height: o ? "100%" : O
                                }
                            }, p.createElement(N.Icon, {
                                name: "video-fill",
                                className: "social-sections-VideoSection__video_not_available_icon--3JzkT"
                            }))), o && p.createElement(z.a, {
                                video: i,
                                actor: a,
                                deleteObject: s,
                                untagObject: l,
                                loggedInUserId: c,
                                loggedInMemberAuthorization: r,
                                onClose: m
                            }))))
                        }
                    }]), t
                }(p.Component),
                H = Object(v.connect)(function(e) {
                    return {
                        loggedInUserId: e.auth.loggedInUserId
                    }
                })(W),
                q = function e(t) {
                    var n = t.member,
                        a = t.actor,
                        i = t.video,
                        r = t.isSingleObject,
                        s = t.isEmbedded,
                        l = t.loggedInMemberAuthorization,
                        c = t.viewportCategory,
                        d = t.isOpen,
                        u = t.navigate,
                        m = t.route,
                        v = t.actorForUrl,
                        b = i.object,
                        _ = U(i) ? void 0 : p.createElement(D.a.Content, {
                            key: "topNote"
                        }, p.createElement("div", {
                            className: "social-sections-VideoSection__video_not_available_message--1Yga7"
                        }, Object(k.localize)("upload_video_processing_copy"))),
                        j = Object(f.featureIsEnabled)("social_boosting_enabled") && l && l.canBoostContent ? p.createElement(w.a, {
                            socialObjectRef: {
                                type: "VIDEO",
                                id: i.object.id
                            },
                            socialStatistics: i.object.socialStatistics,
                            typename: i.object.__typename
                        }) : null,
                        S = p.createElement(C.MemberEventOnObjectBlock, {
                            objectEventType: "onVideo",
                            object: i.object,
                            member: n,
                            actor: a,
                            deleteObject: t.deleteObject,
                            untagObject: t.untagObject,
                            loggedInUserId: t.loggedInUserId,
                            isEmbedded: s,
                            viewportCategory: c
                        }),
                        F = p.createElement(x.a, null, p.createElement(P.a, {
                            padRight: !0
                        }, p.createElement(L.a, {
                            item: i.object
                        }), Object(f.featureIsEnabled)("trips_save_ugc_videos") && p.createElement(A.a, {
                            object: {
                                __typename: i.object.__typename,
                                id: i.object.id
                            },
                            displayStyle: "icon+text"
                        })), p.createElement(P.a, null, p.createElement(M.RepostAction, {
                            modalName: "repost_video_".concat(i.object.id),
                            repostPreviewProps: {
                                feedSectionItem: i,
                                member: n,
                                actor: a
                            },
                            actor: a,
                            socialStatistics: i.object.socialStatistics
                        }), Object(f.featureIsEnabled)("social_ugc_share") && i.object.route && i.object.route.url ? p.createElement(O.a, {
                            url: "".concat(i.object.route.url),
                            itemType: "Video",
                            itemId: i.object.id,
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : p.createElement(R.a, {
                            actionType: "Share"
                        }), j)),
                        z = function e() {
                            return p.createElement("div", {
                                className: "social-sections-VideoSection__ctaLine--2Cd5u"
                            }, p.createElement("span", {
                                className: "social-sections-VideoSection__cta--2ntbp"
                            }, Object(k.localize)("common_Read_more")), p.createElement(N.Icon, {
                                name: "caret-down"
                            }))
                        },
                        V = d ? void 0 : function(e, t) {
                            e && (T.a.set(B, Date.now()), u(Object(o.a)({}, m, {
                                modal: "Video_".concat(i.object.id),
                                username: v && v.username || i.object.userProfile.username
                            })), t())
                        },
                        W = Object(h.getVideoTrackingModule)(m),
                        q = [p.createElement(D.a.Content, {
                            fullWidth: !0,
                            key: "video"
                        }, p.createElement(H, {
                            actor: a,
                            video: i,
                            isOpen: d,
                            deleteObject: t.deleteObject,
                            untagObject: t.untagObject,
                            onClick: V,
                            trackingModule: W,
                            onClose: function e() {
                                return u(m, {
                                    reset: !0
                                })
                            }
                        })), p.createElement(D.a.Content, {
                            key: "caption"
                        }, b.caption && p.createElement("div", {
                            className: "social-sections-VideoSection__title_description--M6tDp"
                        }, p.createElement(y.InteractionLogger, null, function(e) {
                            return p.createElement("div", {
                                className: "social-sections-VideoSection__caption--6EYXC",
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                }
                            }, "MOBILE" === c && b.caption.length > 160 ? p.createElement(g.ReadMore, {
                                numLinesToShow: 3,
                                cta: z(),
                                ctaNewline: !0
                            }, p.createElement(E.Linkify, {
                                text: b.caption,
                                socialReferences: b.socialReferences
                            })) : p.createElement(E.Linkify, {
                                text: b.caption,
                                socialReferences: b.socialReferences
                            }))
                        })))];
                    return p.createElement(D.a, {
                        isSingleObject: r,
                        isEmbedded: s,
                        topNote: _,
                        header: S,
                        content: q,
                        socialStatistics: i.object.socialStatistics,
                        socialActionBar: F,
                        pois: i.object.orderedLocations,
                        cardRef: {
                            type: i.object.__typename,
                            id: i.object.id
                        },
                        socialProofParams: {
                            displayName: Object(I.a)(a)
                        }
                    })
                },
                G = function e(t) {
                    return p.createElement(j.RouteConsumer, null, function(e) {
                        var n = e.route,
                            o = n.modal,
                            r = Object(i.a)(n, ["modal"]),
                            s = e.navigate;
                        return t.video.object && p.createElement(q, Object(a.a)({
                            key: "vs_".concat(t.video.object.id),
                            navigate: s,
                            route: r,
                            isOpen: o && o === "Video_".concat(t.video.object.id)
                        }, t))
                    })
                };
            G.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                actor: null,
                actorForUrl: void 0,
                deleteObject: null,
                loggedInMemberAuthorization: void 0,
                untagObject: null,
                loggedInUserId: "",
                viewportCategory: ""
            }, t.c = G
        },
        "./packages/social/sections/VideoSidebar.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/classnames/classnames.jsx"),
                o = n.n(i),
                r = n("./packages/common/features/features.jsx"),
                s = n("./packages/events/keyboard-event-listener/KeyboardEventListener.jsx"),
                l = n("./packages/common/routing/routing.jsx"),
                c = n("@ta/overlays.pieces"),
                d = n("@ta/social.poi"),
                u = n("@ta/social.dates"),
                m = n("@ta/social.links"),
                p = n("@ta/styleguide.avatar"),
                v = n("./packages/public/share-cta/ShareCta.jsx"),
                b = n("@ta/social.follow"),
                f = n.n(b),
                k = n("./packages/social/member/MemberDisplayName.jsx"),
                g = n("./packages/social/actions/UntagAction.jsx"),
                h = n("./packages/social/actions/BoostAction.jsx"),
                _ = n("./packages/social/actions/SocialActionBar.jsx"),
                j = n("./packages/social/actions/NestedSocialAction.jsx"),
                S = n("./packages/social/actions/LikeAction.jsx"),
                y = n("./packages/social/actions/SaveAction.jsx"),
                N = n("./packages/social/actions/DisabledSocialAction.jsx"),
                O = n("@ta/tracking.interactions"),
                E = n("@ta/social.section-overflow"),
                I = n("./packages/social/sections/SocialStatisticsBar.jsx"),
                C = function e(t) {
                    var n = t.video,
                        i = t.actor,
                        b = t.deleteObject,
                        C = t.untagObject,
                        F = t.onClose,
                        T = t.loggedInUserId,
                        w = t.loggedInMemberAuthorization,
                        x = n.object.orderedLocations,
                        P = {
                            id: n.object.id,
                            type: n.object.__typename
                        },
                        L = {
                            FOLLOW: !1,
                            UNTAG: !!Object(g.a)(n.object, T)
                        },
                        A = n.object.publishedDate || n.object.uploadDate,
                        R = Object(r.featureIsEnabled)("social_boosting_enabled") && (null == w ? void 0 : w.canBoostContent) ? a.createElement(h.a, {
                            socialObjectRef: {
                                type: "VIDEO",
                                id: n.object.id
                            },
                            socialStatistics: n.object.socialStatistics,
                            typename: n.object.__typename
                        }) : null;
                    return a.createElement(a.Fragment, null, a.createElement("div", {
                        className: "ui_column is-4 is-3-widescreen is-12-mobile ".concat("social-sections-VideoSidebar__modal_info--2hHAj")
                    }, a.createElement("div", {
                        className: "".concat("social-sections-VideoSidebar__section--2jb4X", " ").concat("social-sections-VideoSidebar__sidebar--1CG8r")
                    }, a.createElement("div", {
                        className: "social-sections-VideoSidebar__member_block--1_TzJ"
                    }, a.createElement(O.InteractionLogger, null, function(e) {
                        return a.createElement(a.Fragment, null, a.createElement("div", {
                            className: "social-sections-VideoSidebar__member_block_left--3ceP3"
                        }, a.createElement(l.Link, {
                            to: {
                                page: "Profile",
                                username: i.username
                            },
                            className: "social-sections-VideoSidebar__avatar_wrap--2pywP",
                            onClick: function t(n) {
                                return e(n, "userClick", {
                                    userId: i.userId
                                })
                            }
                        }, a.createElement(p.Avatar, {
                            photo: i.avatar,
                            display: "inline",
                            withBorder: !0,
                            onClick: function t(n) {
                                return e(n, "userClick", {
                                    userId: i.userId
                                })
                            }
                        })), a.createElement("span", {
                            className: "social-sections-VideoSidebar__member_wrap--2K2el"
                        }, a.createElement(l.Link, {
                            to: {
                                page: "Profile",
                                username: i.username
                            },
                            className: o()("social-sections-VideoSidebar__member_name--2QjRc", {
                                verified: i.isVerified
                            }),
                            onClick: function t(n) {
                                return e(n, "userClick", {
                                    userId: i.userId
                                })
                            }
                        }, i.displayName), a.createElement("span", {
                            className: "social-sections-VideoSidebar__event_date--F1n1s"
                        }, a.createElement(u.ContentDisplayDate, {
                            dateStr: A
                        })))), a.createElement("div", {
                            className: "social-sections-VideoSidebar__member_block_right--3gmMY"
                        }, !i.isMe && a.createElement(f.a, {
                            profile: i,
                            displayType: "icon+text"
                        }), a.createElement(E.SectionOverflowMenu, {
                            sectionObject: n.object,
                            sectionActor: i,
                            deleteObject: b,
                            untagObject: C,
                            overrideItems: L
                        })))
                    })), n.object.caption && a.createElement("div", {
                        className: "social-sections-VideoSidebar__caption--3hydh"
                    }, a.createElement(m.Linkify, {
                        text: n.object.caption,
                        socialReferences: n.object.socialReferences
                    })), a.createElement(I.a, {
                        stats: {
                            likeCount: n.object.socialStatistics.likeCount,
                            repostCount: n.object.socialStatistics.repostCount
                        },
                        deduplicate: !0,
                        socialRef: P,
                        socialProofParams: {
                            displayName: Object(k.a)(i)
                        }
                    }), a.createElement(_.a, null, a.createElement(j.a, {
                        padRight: !0
                    }, a.createElement(S.a, {
                        item: n.object
                    }), Object(r.featureIsEnabled)("trips_save_ugc_videos") && a.createElement(y.a, {
                        object: {
                            __typename: n.object.__typename,
                            id: n.object.id
                        },
                        displayStyle: "icon+text"
                    })), a.createElement(j.a, null, Object(r.featureIsEnabled)("social_ugc_share") ? a.createElement(v.a, {
                        url: "".concat(n.object.route.url),
                        itemType: "Video",
                        itemId: n.object.id,
                        styleAsSocialAction: !0,
                        alignEdge: "right"
                    }) : a.createElement(N.a, {
                        actionType: "Share"
                    }), R))), x && x[0] && a.createElement(d.POIObjectList, {
                        pois: x,
                        showSavesIcon: !0
                    })), a.createElement(a.Fragment, null, a.createElement("div", {
                        className: "social-sections-VideoSidebar__close--2Qplt",
                        onClick: function e() {
                            F && F()
                        }
                    }), a.createElement(s.a, {
                        keyName: "Escape",
                        callback: function e() {
                            F && F()
                        }
                    }), a.createElement(c.BlockScroll, null)))
                };
            C.defaultProps = {
                onClose: void 0,
                loggedInUserId: "",
                untagObject: null,
                loggedInMemberAuthorization: void 0
            }, t.a = C
        },
        "./packages/social/sections/forums/ForumPostSection.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                o = n("./node_modules/react/index.js"),
                r = n("./node_modules/react-redux/es/index.js"),
                s = n("./packages/common/classnames/classnames.jsx"),
                l = n.n(s),
                c = n("./packages/common/features/features.jsx"),
                d = n("./packages/common/routing/routing.jsx"),
                u = n("./packages/public/share-cta/ShareCta.jsx"),
                m = n("./packages/social/member/MemberDisplayName.jsx"),
                p = n("@ta/social.member-event"),
                v = n("./packages/social/actions/BoostAction.jsx"),
                b = n("./packages/social/actions/SocialActionBar.jsx"),
                f = n("./packages/social/actions/LikeAction.jsx"),
                k = n("./packages/social/actions/NestedSocialAction.jsx"),
                g = n("./packages/social/actions/DisabledSocialAction.jsx"),
                h = n("@ta/social.repost-action"),
                _ = n("@ta/tracking.interactions"),
                j = n("./packages/social/sections/CardSection.jsx"),
                S = n("./packages/social/sections/forums/forum-post-url.jsx"),
                y = function e(t) {
                    var n = t.post,
                        a = t.isSingleObject,
                        r = t.isEmbedded,
                        s = t.member,
                        y = t.actor,
                        N = t.deleteObject,
                        O = t.language,
                        E = t.loggedInMemberAuthorization,
                        I = Object(S.a)(n.object, O),
                        C = n.object.id === n.object.parentId;
                    if (!n.object) return null;
                    var F = o.createElement(p.MemberEventOnObjectBlock, {
                            objectEventType: "onForumPost",
                            object: n.object,
                            member: s,
                            actor: y,
                            deleteObject: N,
                            isEmbedded: r
                        }),
                        T = o.createElement(j.a.Content, {
                            key: n.object.id
                        }, o.createElement(_.InteractionLogger, null, function(e) {
                            return o.createElement(d.Link, {
                                key: "forum_".concat(n.object.id),
                                className: l()("social-sections-forums-ForumPostSection__post_wrap--2RkGb", Object(i.a)({}, "social-sections-forums-ForumPostSection__embedded--2WBaI", r)),
                                href: I,
                                onClick: function t(n) {
                                    return e(n, "feedClick")
                                }
                            }, o.createElement("div", {
                                className: "social-sections-forums-ForumPostSection__post--15RWn"
                            }, o.createElement("div", {
                                className: "social-sections-forums-ForumPostSection__title--392Pj"
                            }, (C ? "" : "Re: ") + n.object.topicTitle), o.createElement("div", {
                                className: "social-sections-forums-ForumPostSection__body_text--2itgI"
                            }, o.createElement("q", {
                                className: "social-sections-forums-ForumPostSection__quote--1Zl9_"
                            }, n.object.body.substring(0, 160), n.object.body.length > 160 && "..."))))
                        })),
                        w = Object(c.featureIsEnabled)("social_boosting_enabled") && E && E.canBoostContent ? o.createElement(v.a, {
                            socialObjectRef: {
                                type: "FORUM_POST",
                                id: n.object.id
                            },
                            socialStatistics: n.object.socialStatistics,
                            typename: n.object.__typename
                        }) : null,
                        x = o.createElement(b.a, null, o.createElement(f.a, {
                            item: n.object,
                            socialObject: {
                                objectType: "FORUM_POST",
                                objectId: n.object.id
                            }
                        }), o.createElement(k.a, null, o.createElement(h.RepostAction, {
                            modalName: "repost_".concat(n.object.__typename, "_").concat(n.object.id),
                            repostPreviewProps: {
                                feedSectionItem: n,
                                member: s,
                                actor: y
                            },
                            actor: y,
                            socialStatistics: n.object.socialStatistics
                        }), Object(c.featureIsEnabled)("social_ugc_share") ? o.createElement(u.a, {
                            url: I,
                            itemType: C ? "ForumPost" : "ForumResponse",
                            itemId: n.object.id,
                            styleAsSocialAction: !0,
                            alignEdge: "right"
                        }) : o.createElement(g.a, {
                            actionType: "Share"
                        }), w));
                    return o.createElement(j.a, {
                        isSingleObject: a,
                        isEmbedded: r,
                        header: F,
                        content: T,
                        socialStatistics: n.object.socialStatistics,
                        socialActionBar: x,
                        pois: n.object.location ? [n.object.location] : [],
                        cardRef: {
                            type: n.object.__typename,
                            id: n.object.id
                        },
                        socialProofParams: {
                            displayName: Object(m.a)(y),
                            isForumTopic: C
                        },
                        fullWidth: !0
                    })
                };
            y.defaultProps = {
                isSingleObject: !1,
                isEmbedded: !1,
                member: null,
                actor: null,
                deleteObject: null,
                loggedInMemberAuthorization: void 0
            }, t.a = Object(r.connect)(function(e, t) {
                return Object(a.a)({}, t, {
                    language: e.i18n.language
                })
            })(y)
        },
        "./packages/social/sections/forums/forum-post-url.jsx": function(e, t, n) {
            "use strict";
            t.a = function(e, t) {
                return e.lang === t ? e.route.url : e.route.absoluteUrl
            }
        },
        "./packages/styleguide/bubble-rating/BubbleRating.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = function e(t) {
                    var n = t.rating,
                        i = t.verticalAlign,
                        o = t.useAffiliateStars,
                        r = function e(t) {
                            return 5 * Math.round(2 * t)
                        }(n),
                        s = r >= 0 && r <= 50 ? function e(t) {
                            return 5 === t ? "05" : "".concat(t)
                        }(r) : "0",
                        l = o ? "ui_star_rating star_" : "ui_bubble_rating bubble_";
                    return a.createElement("span", {
                        className: "".concat(l).concat(s),
                        style: i && {
                            verticalAlign: i
                        }
                    })
                };
            i.defaultProps = {
                verticalAlign: null,
                useAffiliateStars: !1
            }, t.a = i
        },
        "./packages/styleguide/bubble-rating/BubbleRatingWithLabel.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/styleguide/bubble-rating/BubbleRating.jsx"),
                o = function e(t) {
                    return a.createElement("div", {
                        className: "ui_poi_review_rating ".concat(t.hoverable ? "styleguide-bubble-rating-BubbleRatingWithLabel__hoverable--2Md13" : ""),
                        style: t.fontSize && {
                            fontSize: t.fontSize,
                            lineHeight: 1.29
                        }
                    }, a.createElement(i.a, {
                        rating: t.rating,
                        verticalAlign: t.bubbleRatingVerticalAlign,
                        useAffiliateStars: t.useAffiliateStars
                    }), t.label)
                };
            o.defaultProps = {
                fontSize: null,
                hoverable: !1,
                bubbleRatingVerticalAlign: null,
                useAffiliateStars: !1
            }, t.a = o
        },
        "./packages/styleguide/bubble-rating/BubbleRatingWithReviewCount.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/i18n/i18n.jsx"),
                o = n("./packages/styleguide/bubble-rating/BubbleRatingWithReviewCount.less"),
                r = n("./packages/styleguide/bubble-rating/BubbleRatingWithLabel.jsx"),
                s = function e(t) {
                    var n = "reviewCount ".concat(o.a.reviewCount);
                    return t.dottedRatingUnderline && (n += " ".concat(o.a.dottedUnderline)), a.createElement(r.a, {
                        rating: t.rating,
                        fontSize: t.fontSize,
                        hoverable: t.bubbleRatingHoverable,
                        bubbleRatingVerticalAlign: t.bubbleRatingVerticalAlign,
                        useAffiliateStars: t.useAffiliateStars,
                        label: a.createElement("span", {
                            className: n,
                            style: t.fontSize && {
                                fontSize: t.fontSize
                            }
                        }, Object(i.localize)("mobile_reviews_plural", {
                            0: i.globalize.formatNumber("integer", t.numReviews)
                        }))
                    })
                };
            s.defaultProps = {
                fontSize: null,
                bubbleRatingHoverable: !1,
                dottedRatingUnderline: !1,
                bubbleRatingVerticalAlign: null,
                useAffiliateStars: !1
            }, t.a = s
        },
        "./packages/styleguide/bubble-rating/BubbleRatingWithReviewCount.less": function(e, t, n) {
            "use strict";
            t.a = {
                reviewCount: "styleguide-bubble-rating-BubbleRatingWithReviewCount__reviewCount--37tMc",
                dottedUnderline: "styleguide-bubble-rating-BubbleRatingWithReviewCount__dottedUnderline--1oKfh"
            }
        },
        "./packages/trips/bookmark-icon/BookmarkIcon.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = n("./packages/common/features/features.jsx"),
                l = n("@ta/styleguide.icon"),
                c = n("./packages/common/i18n/i18n.jsx"),
                d = n("./packages/common/logging/logging.jsx"),
                u = n.n(d),
                m = function e(t) {
                    var n;
                    return n = {}, Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__s_18--2mZag", "18" === t), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__s_20--34b4_", "20" === t), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__s_22--2XSYJ", "22" === t), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__s_24--1qqII", "24" === t), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__s_30--34HSr", "30" === t), n
                },
                p = function e(t, n, o) {
                    var c, d, u = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                    return i.createElement("span", {
                        className: r()("ui_icon_stacked", "trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx", m(t))
                    }, i.createElement("span", {
                        className: r()("trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh")
                    }, i.createElement(l.Icon, {
                        name: n,
                        className: r()("stacked", "trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK", (c = {}, Object(a.a)(c, "trips-bookmark-icon-BookmarkIcon__outline--9p6p4", u), Object(a.a)(c, "trips-bookmark-icon-BookmarkIcon__heart--2jI5-", Object(s.featureIsEnabled)("saves_heart_with_wc_flow")), c))
                    }), i.createElement(l.Icon, {
                        name: o,
                        className: r()("stacked", "trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T", (d = {}, Object(a.a)(d, "trips-bookmark-icon-BookmarkIcon__outline--9p6p4", u), Object(a.a)(d, "trips-bookmark-icon-BookmarkIcon__heart--2jI5-", Object(s.featureIsEnabled)("saves_heart_with_wc_flow")), d))
                    })))
                },
                v = function e(t) {
                    var n, o = t.bookmarkStyle,
                        d = t.bookmarkSize,
                        v = t.active,
                        b = t.onClick,
                        f = t.vertical,
                        k = t.decorated,
                        g = t.children,
                        h = t.lineHeight,
                        _ = function e(t, n) {
                            var o = Object(s.featureIsEnabled)("saves_heart_with_wc_flow") ? "heart-fill" : "bookmark-fill",
                                c = Object(s.featureIsEnabled)("saves_heart_with_wc_flow") ? "heart" : "bookmark";
                            return "stacked" === t ? p(n, o, c) : "flat" === t ? function e(t, n) {
                                return i.createElement(l.Icon, {
                                    className: r()("trips-bookmark-icon-BookmarkIcon__flatIcon--S_UuH", m(t), Object(a.a)({}, "trips-bookmark-icon-BookmarkIcon__heart--2jI5-", Object(s.featureIsEnabled)("saves_heart_with_wc_flow"))),
                                    name: n
                                })
                            }(n, o) : "outline" === t ? p(n, o, c, !0) : (u.a.warn("Bookmark style ".concat(t, " not found.")), null)
                        }(o, d),
                        j = v ? Object(c.localize)("social_Saved") : Object(c.localize)("trips_save_CTA"),
                        S = null == g ? void 0 : g(j),
                        y = h && {
                            "line-height": "".concat(h, "px")
                        };
                    return i.createElement("div", {
                        className: r()("trips-bookmark-icon-BookmarkIcon__container--1daVm", (n = {}, Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__vertical--y8NwI", f), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__no_decoration--arZYx", !k), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__active--AxF3r", v), Object(a.a)(n, "trips-bookmark-icon-BookmarkIcon__dark_icon--18ItN", Object(s.featureIsEnabled)("hr_dark_green_icons")), n)),
                        onClick: b
                    }, _, S && i.createElement("div", {
                        style: y,
                        className: r()("ui_link", "trips-bookmark-icon-BookmarkIcon__children--WewBp")
                    }, S))
                };
            v.defaultProps = {
                bookmarkSize: "30",
                active: !1,
                onClick: function e() {},
                vertical: !1,
                children: function e() {
                    return null
                },
                decorated: !0,
                lineHeight: void 0
            }, t.a = v
        },
        "./packages/trips/collaboration/AddFriendIcon.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("@ta/styleguide.icon"),
                o = n("./packages/common/classnames/classnames.jsx"),
                r = n.n(o),
                s = function e(t) {
                    var n = t.size || "default",
                        o = t.tabletSize ? "".concat(t.tabletSize || "default", "-tablet") : null;
                    return a.createElement("span", {
                        onClick: t.onClick,
                        ref: t.targetRef,
                        className: r()("trips-collaboration-AddFriendIcon__addFriendsIcon--3DU5v", "ui_social_avatar", n, o)
                    }, a.createElement(i.Icon, {
                        name: "plus"
                    }))
                };
            s.defaultProps = {
                size: "default",
                tabletSize: void 0,
                onClick: void 0,
                targetRef: void 0
            }, t.a = s
        },
        "./packages/trips/collaboration/CollaboratorPanel.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./node_modules/react-redux/es/index.js"),
                m = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                p = n("./packages/common/logging/logging.jsx"),
                v = n.n(p),
                b = n("./packages/common/classnames/classnames.jsx"),
                f = n.n(b),
                k = n("@ta/styleguide.avatar"),
                g = n("@ta/social.common-popover"),
                h = n("./packages/common/i18n/i18n.jsx"),
                _ = n("@ta/overlays.toast"),
                j = n("./packages/common/webview/NativeBridge.jsx"),
                S = n("./packages/common/routing/routing.jsx"),
                y = n("./packages/common/features/features.jsx"),
                N = n("./packages/trips/trip-util/trip-util.jsx"),
                O = n("./packages/trips/collaboration/ShareTripPopup.jsx"),
                E = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "RemoveCollaborator"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "collaboratorId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "deleteTripCollaborator"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "collaboratorId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "collaboratorId"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 126
                    }
                };
            E.loc.source = {
                body: "7b72702e26c2"
            };
            var I = E,
                C = n("./packages/trips/collaboration/AddFriendIcon.jsx"),
                F = function e(t) {
                    var n = t.user,
                        a = t.contextNode,
                        i = t.avatarNotLazy,
                        o = "/Profile/".concat(n.username),
                        r = d.createElement(k.Avatar, {
                            notLazy: i,
                            size: "default",
                            href: o,
                            withBorder: !0,
                            photo: n.avatar,
                            mobileTarget: "_self"
                        });
                    return d.createElement("div", {
                        className: "trips-collaboration-CollaboratorPanel__collabItem--7CobX"
                    }, r, d.createElement("a", {
                        href: o,
                        className: f()("trips-collaboration-CollaboratorPanel__displayName--15F6v", "ui_link")
                    }, n.displayName), a && d.createElement("div", {
                        className: "trips-collaboration-CollaboratorPanel__context--q5ah3"
                    }, a))
                },
                T = function e(t) {
                    var n = t.trip;
                    return d.createElement(O.a, {
                        shiftArrow: 7,
                        trip: n,
                        shareType: "WRITE"
                    }, function(e, t) {
                        return d.createElement("div", {
                            className: f()("trips-collaboration-CollaboratorPanel__collabItem--7CobX", "trips-collaboration-CollaboratorPanel__collabHeader--1NWZG")
                        }, d.createElement(C.a, {
                            onClick: t,
                            targetRef: e
                        }), d.createElement("div", {
                            onClick: t,
                            className: f()("trips-collaboration-CollaboratorPanel__addFriendsText--2Y-_Z", "ui_link")
                        }, Object(h.localize)("trips_add_CTA")))
                    })
                },
                w = function(e) {
                    function t() {
                        var e, n;
                        Object(a.a)(this, t);
                        for (var i = arguments.length, s = new Array(i), u = 0; u < i; u++) s[u] = arguments[u];
                        return n = Object(o.a)(this, (e = Object(r.a)(t)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(n)), "getContextNode", function(e, t, a) {
                            return Object(N.b)(t, !1).canRemove ? n.renderConfirmationAndContent(t, a) : null
                        }), Object(c.a)(Object(l.a)(Object(l.a)(n)), "renderConfirmationAndContent", function(e, t) {
                            var a, i, o, r = e.user;
                            (void 0 === r ? {} : r).isMe ? (a = Object(h.localize)("trips_leave_trip_modal_header"), i = Object(h.localize)("trips_leave_trip_modal_body"), o = Object(h.localize)("trips_leave_CTA")) : (a = Object(h.localize)("trips_remove_collaborator_modal_header"), i = Object(h.localize)("trips_remove_collaborator_modal_body"), o = Object(h.localize)("trips_remove_CTA"));
                            var s = o,
                                l = Object(h.localize)("stat_modal_cancel"),
                                c = function n() {
                                    return t(e)
                                },
                                u = null;
                            return n.props.isNativeWebview && (u = function e() {
                                return j.showNativeOverflowMenu({
                                    treatment: "alert",
                                    title: a,
                                    subtitle: i,
                                    items: [{
                                        title: l,
                                        tapCallback: function e() {}
                                    }, {
                                        preferred: !0,
                                        title: s,
                                        destructive: !0,
                                        tapCallback: c
                                    }]
                                })
                            }), d.createElement(g.ConfirmationPopover, {
                                header: a,
                                description: i,
                                cancel: l,
                                confirm: s,
                                above: !0,
                                alignEdge: "right",
                                shiftY: 30,
                                onConfirm: c,
                                onCancel: null
                            }, function(t, a) {
                                return d.createElement("div", {
                                    ref: t,
                                    onClick: function t() {
                                        (u || a)(), n.props.onRemoveShow && n.props.onRemoveShow(e)
                                    },
                                    className: "ui_link"
                                }, o)
                            })
                        }), n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "renderPanel",
                        value: function e(t) {
                            var n = this,
                                a = this.props,
                                i = a.trip.collaborators,
                                o = d.createElement("div", {
                                    className: "trips-collaboration-CollaboratorPanel__owner--3B41y"
                                }, Object(h.localize)("trips_owner")),
                                r = Object(N.i)(a.trip, !1);
                            return d.createElement("div", {
                                className: "trips-collaboration-CollaboratorPanel__collabWrap--YsDEu"
                            }, r.canAddCollaborators && !a.readOnly && d.createElement(T, {
                                trip: a.trip
                            }), d.createElement("div", {
                                className: "trips-collaboration-CollaboratorPanel__collabList--lebL5"
                            }, a.trip.owner && d.createElement(F, {
                                user: a.trip.owner,
                                contextNode: o,
                                avatarNotLazy: a.avatarNotLazy
                            }), i && i.map(function(e) {
                                return e.user && d.createElement(F, {
                                    key: e.userId,
                                    user: e.user,
                                    avatarNotLazy: a.avatarNotLazy,
                                    contextNode: !a.readOnly && n.getContextNode(a.trip, e, t)
                                })
                            })))
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this;
                            return Object(y.featureIsEnabled)("trips_2018_collab") ? d.createElement(S.RouteConsumer, null, function(e) {
                                var n = e.navigate;
                                return d.createElement(_.Toaster, null, function(e) {
                                    return d.createElement(m.Mutation, {
                                        mutation: I,
                                        refetchQueries: t.props.refetchQueries,
                                        awaitRefetchQueries: !0,
                                        onError: function e(t) {
                                            return v.a.error(t)
                                        }
                                    }, function(a) {
                                        return t.renderPanel(function i(o) {
                                            t.props.onRemove && t.props.onRemove(o), a({
                                                variables: {
                                                    collaboratorId: o.id
                                                }
                                            }).then(function() {
                                                var a = o.user && o.user.isMe;
                                                if ("PUBLIC" !== t.props.trip.status && a) n({
                                                    page: "Trips"
                                                });
                                                else {
                                                    var i = o.user && o.user.displayName || Object(h.localize)("trips_unknown_user");
                                                    e({
                                                        node: d.createElement("div", null, Object(h.localize)("trips_collaborator_removed_confirm", {
                                                            UserName: i
                                                        }))
                                                    })
                                                }
                                            })
                                        })
                                    })
                                })
                            }) : null
                        }
                    }]), t
                }(d.PureComponent);
            Object(c.a)(w, "defaultProps", {
                isNativeWebview: !1,
                refetchQueries: [],
                readOnly: !1,
                onRemoveShow: void 0,
                onRemove: void 0,
                avatarNotLazy: !1
            });
            var x = Object(u.connect)(function(e) {
                return {
                    loggedInUserId: e.auth.loggedInUserId,
                    isNativeWebview: e.meta.isNativeWebview
                }
            })(w);
            t.a = x
        },
        "./packages/trips/collaboration/ShareTripPopup.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                c = n("./node_modules/react/index.js"),
                d = n("./packages/public/share-cta/SharePopover.jsx"),
                u = n("./packages/public/share-cta/ShareTracker.jsx"),
                m = n("./packages/public/share-cta/ShareCta.jsx"),
                p = n("@ta/overlays.popover"),
                v = n.n(p),
                b = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                f = n("@ta/styleguide.loading"),
                k = n("./packages/events/window-scroll/WindowScroll.jsx"),
                g = n("./packages/common/i18n/i18n.jsx"),
                h = n("@ta/tracking.interactions"),
                _ = n("./packages/trips/trip-util/trip-util.jsx"),
                j = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "CreateTripToken"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "tripId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "TripTokenTypeInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "createTripToken"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tripId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "tripId"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 154
                    }
                };
            j.loc.source = {
                body: "a83754ae8236"
            };
            var S = j;
            n.d(t, "a", function() {
                return N
            }), n.d(t, "b", function() {
                return O
            });
            var y = {
                    READ: function e() {
                        return Object(g.unescaped)(Object(g.localize)("trips_share_read_only", {
                            className: "trips-collaboration-ShareTripPopup__strong--1W5pM"
                        }))
                    },
                    WRITE: function e() {
                        return Object(g.unescaped)(Object(g.localize)("trips_share_read_write", {
                            className: "trips-collaboration-ShareTripPopup__strong--1W5pM"
                        }))
                    },
                    PUBLIC: function e() {
                        return Object(g.unescaped)(Object(g.localize)("trips_share_read_only", {
                            className: "trips-collaboration-ShareTripPopup__strong--1W5pM"
                        }))
                    }
                },
                N = function(e) {
                    function t(e) {
                        var n;
                        Object(a.a)(this, t), n = Object(o.a)(this, Object(r.a)(t).call(this, e));
                        var i = e.trip.route && e.trip.route.url || Object(_.a)(e.trip.id),
                            s = "PUBLIC" === e.shareType ? i : "";
                        return n.state = {
                            shareUrl: s,
                            shareUrlType: e.shareType
                        }, n
                    }
                    return Object(s.a)(t, e), Object(i.a)(t, [{
                        key: "onTargetClick",
                        value: function e(t, n) {
                            this.state.shareUrl && this.state.shareUrlType === this.props.shareType || this.updateShareUrl(t), n()
                        }
                    }, {
                        key: "updateShareUrl",
                        value: function e(t) {
                            var n = this;
                            "PUBLIC" === this.props.shareType && this.props.trip.route && this.props.trip.route.url ? this.setState({
                                shareUrl: Object(_.a)(this.props.trip.id),
                                shareUrlType: "PUBLIC"
                            }) : t({
                                variables: {
                                    tripId: this.props.trip.id,
                                    type: this.props.shareType
                                }
                            }).then(function(e) {
                                n.setState({
                                    shareUrl: e.data.createTripToken.route.url,
                                    shareUrlType: n.props.shareType
                                })
                            })
                        }
                    }, {
                        key: "renderContent",
                        value: function e() {
                            var t = this.state.shareUrl,
                                n = this.props.trip,
                                a = y[this.props.shareType](),
                                i = "WRITE" === this.props.shareType ? "WriteTrip" : "ReadTrip";
                            return Object(_.l)(n) || n && n.actionPermissions && n.actionPermissions.canEdit || (a = null, i = "NotMyTrip"), t ? c.createElement(c.Fragment, null, a && c.createElement("div", {
                                className: "trips-collaboration-ShareTripPopup__header--2IYWs"
                            }, a), c.createElement(d.a, {
                                url: t,
                                itemType: i,
                                itemId: "".concat(n.id)
                            })) : c.createElement(f.LoadingSpinner, {
                                size: "small"
                            })
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props.closeOnScroll;
                            return c.createElement(v.a, {
                                local: !0,
                                closeButton: !1,
                                below: !0,
                                alignEdge: this.props.alignEdge,
                                arrowType: "small",
                                shiftArrow: this.props.shiftArrow,
                                contents: function e() {
                                    return t.renderContent()
                                }
                            }, function(e, a, i) {
                                return c.createElement(c.Fragment, null, n && c.createElement(k.a, {
                                    callback: i,
                                    throttle: 500
                                }), c.createElement(b.Mutation, {
                                    mutation: S
                                }, function(n) {
                                    return t.props.children(e, function() {
                                        return t.onTargetClick(n, a)
                                    }, t.state.shareUrl, i)
                                }))
                            })
                        }
                    }]), t
                }(c.Component);
            Object(l.a)(N, "defaultProps", {
                alignEdge: "left",
                shiftArrow: 0,
                closeOnScroll: !1
            });
            var O = function e(t) {
                var n = t.trip,
                    a = t.shareType,
                    i = t.alignEdge,
                    o = t.onClick;
                return c.createElement(N, {
                    trip: n,
                    shareType: a,
                    alignEdge: i
                }, function(e, t, a) {
                    return c.createElement(u.a, {
                        itemType: "Trip",
                        itemId: "".concat(n.id),
                        url: a,
                        action: "share_button_click"
                    }, function() {
                        return c.createElement(h.InteractionLogger, null, function(n) {
                            return c.createElement(m.b, {
                                onClick: function e(a) {
                                    o && o(), n(a, "share"), t()
                                },
                                target: e,
                                styleAsSocialAction: !0
                            })
                        })
                    })
                })
            };
            O.defaultProps = {
                onClick: void 0
            }
        },
        "./packages/trips/create-trip-modal/CreateTripModalBase.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                u = n("./node_modules/react/index.js"),
                m = n("./node_modules/react-redux/es/index.js"),
                p = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                v = n("./packages/common/features/features.jsx"),
                b = n("@ta/overlays.modal"),
                f = n("@ta/overlays.managers"),
                k = n("@ta/overlays.headers"),
                g = n("./packages/common/i18n/i18n.jsx"),
                h = n("@ta/input.text-input"),
                _ = n("@ta/styleguide.button"),
                j = n.n(_),
                S = n("@ta/styleguide.loading"),
                y = n("@ta/social.login-gate"),
                N = n("./packages/common/tracking/tracking.jsx"),
                O = n("./packages/trips/graphql/Fragment/BasicTrip.fragment.gql"),
                E = n("./packages/trips/graphql/Fragment/TripsError.fragment.gql"),
                I = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "CreateTrip"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "photoId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "status"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "TripStatusInput"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "createTrip"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "description"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "photoId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "photoId"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "status"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "status"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trip"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "BasicTrip"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "errors"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "TripsError"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 406
                    }
                };
            I.loc.source = {
                body: "84e8fb0cf16a"
            };
            var C = {};

            function F(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !C[t] && (C[t] = !0, !0)
                })
            }
            I.definitions = I.definitions.concat(F(O.a.definitions)), I.definitions = I.definitions.concat(F(E.a.definitions));
            var T = I,
                w = n("./packages/trips/tracking/impressions.jsx"),
                x = n("./packages/trips/privacy-control/PrivacyControl.jsx"),
                P = n("./packages/trips/trip-errors/trip-errors.jsx");
            n.d(t, "b", function() {
                return R
            }), n.d(t, "a", function() {
                return L
            });
            var L = function(e) {
                function t(e) {
                    var n;
                    return Object(i.a)(this, t), n = Object(r.a)(this, Object(s.a)(t).call(this, e)), Object(d.a)(Object(c.a)(Object(c.a)(n)), "onInputChange", function(e) {
                        var t = e.currentTarget;
                        n.setState({
                            form: Object.assign({}, n.state.form, Object(d.a)({}, t.name, t.value)),
                            error: null
                        })
                    }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "onPrivacyChange", function(e) {
                        n.setState({
                            form: Object.assign({}, n.state.form, {
                                tripPrivacy: e
                            }),
                            error: null
                        })
                    }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "onCreateClick", function(e) {
                        n.isCreateDisabled() && e.preventDefault()
                    }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "getInitialStates", function() {
                        return {
                            form: {
                                tripName: "",
                                tripPrivacy: n.props.isPublicTrip ? "PUBLIC" : "PRIVATE"
                            },
                            error: null,
                            impressionElement: "createTripModal"
                        }
                    }), Object(d.a)(Object(c.a)(Object(c.a)(n)), "isCreateDisabled", function() {
                        var e = n.state,
                            t = e.error,
                            a = e.form,
                            i = a.tripName,
                            o = a.tripPrivacy;
                        return !!t || 0 === i.trim().length || !o
                    }), n.state = n.getInitialStates(), n
                }
                return Object(l.a)(t, e), Object(o.a)(t, [{
                    key: "onSubmit",
                    value: function e(t, n, a) {
                        if (t.preventDefault(), this.validate()) {
                            var i = this.state.form,
                                o = i.tripPrivacy,
                                r = {
                                    variables: {
                                        title: i.tripName,
                                        description: null,
                                        photoId: null,
                                        status: o
                                    }
                                };
                            "PUBLIC" !== o ? a(r) : n().then(function() {
                                return a(r)
                            })
                        }
                    }
                }, {
                    key: "onTripCreated",
                    value: function e(t) {
                        this.setState(this.getInitialStates());
                        var n = this.props.onTripCreated(t);
                        n && this.setState({
                            error: n
                        })
                    }
                }, {
                    key: "validate",
                    value: function e() {
                        return !(this.state.form.tripName.trim().length > 50 && (this.setState({
                            error: Object(g.localize)("stat_modal_name_exceeds_50")
                        }), 1))
                    }
                }, {
                    key: "render",
                    value: function e() {
                        var t = this,
                            n = u.createElement("div", {
                                className: "ui_label_group"
                            }, u.createElement("label", {
                                className: "trips-create-trip-modal-CreateTripModalBase__label--1Pu4m",
                                htmlFor: "tripName"
                            }, Object(g.localize)("stat_modal_trip_name"), u.createElement(h.TextInput, {
                                name: "tripName",
                                className: this.state.error ? "trips-create-trip-modal-CreateTripModalBase__tripname_error--VzXmt" : "trips-create-trip-modal-CreateTripModalBase__tripname--1N2ZB",
                                focusOnMount: !0,
                                onChange: this.onInputChange,
                                value: this.state.form.tripName,
                                maxLength: 50
                            })), u.createElement("div", {
                                className: "trips-create-trip-modal-CreateTripModalBase__messages--1DXPW"
                            }, u.createElement("div", {
                                className: "trips-create-trip-modal-CreateTripModalBase__error_message--2BmfH"
                            }, this.state.error), u.createElement("div", {
                                className: "".concat("trips-create-trip-modal-CreateTripModalBase__length_hint--3JESK", " ").concat(this.state.form.tripName.length >= 50 ? "trips-create-trip-modal-CreateTripModalBase__max_length_reached--2nkEr" : "")
                            }, Object(g.localize)("trips_trip_name_character_count", {
                                nCharacterCount: this.state.form.tripName.length
                            })))),
                            a = u.createElement(j.a, {
                                type: "primary",
                                disabled: this.isCreateDisabled(),
                                onClick: this.onCreateClick
                            }, Object(g.localize)("stat_modal_create"));
                        return u.createElement(N.Impression, {
                            source: "trips",
                            attributes: Object(w.c)({
                                element: this.state.impressionElement
                            })
                        }, u.createElement("div", {
                            className: "ui_content ".concat("trips-create-trip-modal-CreateTripModalBase__content--2TEq1")
                        }, u.createElement(p.Mutation, {
                            mutation: T,
                            onCompleted: function e(n) {
                                var a = n.createTrip.errors;
                                if (a && a.length) {
                                    var i = a[0],
                                        o = Object(P.a)("CREATE_TRIP", i);
                                    "ILLEGAL_DUPLICATE" === i.type ? t.setState({
                                        impressionElement: "duplicateTripError",
                                        error: o
                                    }) : "FAILED_PROFANITY" === i.type ? t.setState({
                                        error: o
                                    }) : t.setState({
                                        impressionElement: "error",
                                        error: o
                                    })
                                } else t.onTripCreated(n.createTrip.trip)
                            },
                            onError: function e() {
                                t.setState({
                                    impressionElement: "error",
                                    error: Object(g.localize)("create_trip_general_error_v2")
                                })
                            }
                        }, function(e, i) {
                            var o = i.loading;
                            return t.props.loading || o ? u.createElement("div", {
                                className: "trips-create-trip-modal-CreateTripModalBase__loading_container--2WTUp"
                            }, u.createElement(S.LoadingSpinner, null)) : u.createElement(y.SocialLoginGate, null, function(i) {
                                return u.createElement("form", {
                                    onSubmit: function n(a) {
                                        return t.onSubmit(a, i, e)
                                    },
                                    className: "trips-create-trip-modal-CreateTripModalBase__form--15Lh4"
                                }, n, !Object(v.featureIsEnabled)("saves_heart_with_wc_flow") && u.createElement("div", {
                                    className: "ui_label_group ".concat("trips-create-trip-modal-CreateTripModalBase__privacy--bmOIa")
                                }, u.createElement("label", {
                                    className: "trips-create-trip-modal-CreateTripModalBase__label--1Pu4m"
                                }, Object(g.localize)("trip_privacy_setting_header"), u.createElement("div", {
                                    className: "trips-create-trip-modal-CreateTripModalBase__privacy_component--1J_IL"
                                }, u.createElement(x.a, {
                                    className: "trips-create-trip-modal-CreateTripModalBase__privacy_component--1J_IL",
                                    name: "tripPrivacy",
                                    onSelect: t.onPrivacyChange,
                                    checkedValue: t.state.form.tripPrivacy
                                })))), u.createElement("div", {
                                    className: "trips-create-trip-modal-CreateTripModalBase__button_footer--2cowQ"
                                }, a))
                            })
                        })))
                    }
                }]), t
            }(u.PureComponent);
            Object(d.a)(L, "defaultProps", {
                isPublicTrip: !1
            });
            var A = function(e) {
                    function t(e) {
                        var n;
                        return Object(i.a)(this, t), (n = Object(r.a)(this, Object(s.a)(t).call(this, e))).state = {
                            contentKey: n.getNewKey()
                        }, n
                    }
                    return Object(l.a)(t, e), Object(o.a)(t, [{
                        key: "componentDidMount",
                        value: function e() {
                            this.props.isCurrentlyOpen && this.props.isMobile && window.scrollTo(0, 0)
                        }
                    }, {
                        key: "onTripCreated",
                        value: function e(t, n) {
                            return this.props.onTripCreated(t) || (n(), null)
                        }
                    }, {
                        key: "getNewKey",
                        value: function e() {
                            return "".concat(this.props.modalName).concat((new Date).getTime())
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this;
                            return u.createElement(b.Modal, {
                                name: this.props.modalName,
                                header: u.createElement(k.TitleBar, {
                                    iconName: "suitcase",
                                    displayType: "LEFT_ALIGN_GRAY"
                                }, Object(g.localize)("stat_modal_create_a_trip_v2")),
                                onClose: function e() {
                                    t.setState({
                                        contentKey: t.getNewKey()
                                    }), t.props.onClose && t.props.onClose()
                                }
                            }, u.createElement(f.Closer, null, function(e) {
                                return u.createElement(L, {
                                    key: t.state.contentKey,
                                    onTripCreated: function n(a) {
                                        return t.onTripCreated(a, e)
                                    },
                                    loading: t.props.loading,
                                    isPublicTrip: t.props.isPublicTrip
                                })
                            }))
                        }
                    }]), t
                }(u.PureComponent),
                R = Object(m.connect)(function(e, t) {
                    return Object(a.a)({
                        isMobile: "MOBILE" === e.meta.device.viewportCategory
                    }, t)
                })(A)
        },
        "./packages/trips/graphql/Fragment/BasicTrip.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "BasicTrip"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Trip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "__typename"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "created"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "updated"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "status"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "owner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isVerified"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "username"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "route"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "avatar"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "photoSizes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "height"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "collaborators"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "route"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isMe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isVerified"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "username"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "avatar"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "photoSizes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "url"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "photoId"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "photo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "photoSizes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "height"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "itemIds"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 661
                }
            };
            a.loc.source = {
                body: "0e1014816687"
            }, t.a = a
        },
        "./packages/trips/graphql/Fragment/FullTrip.fragment.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/trips/graphql/Fragment/FullTripItem.fragment.gql"),
                i = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FullTrip"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Trip"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "itemIds"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "created"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "updated"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "status"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photoId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "absoluteUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialStatistics"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isLiked"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likeCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSaved"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tripCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isReposted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "repostCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isBoosted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "boostCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialReferences"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "socialReference"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "length"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "offset"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isVerified"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "avatar"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photoSizes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "itemIds"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "items"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "FullTripItem"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "date"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "to"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "collaborators"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "actionPermissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canRemove"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "route"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMe"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isVerified"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "username"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "avatar"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photoSizes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "structure"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "buckets"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "items"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "items"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "actionPermissions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canAddCollaborators"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canAddItem"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canChangePrivacy"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canDelete"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canEdit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canUploadCoverPhoto"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 1413
                    }
                };
            i.loc.source = {
                body: "c68cfbd8751a"
            };
            var o = {};
            i.definitions = i.definitions.concat(function r(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !o[t] && (o[t] = !0, !0)
                })
            }(a.a.definitions)), t.a = i
        },
        "./packages/trips/graphql/Fragment/FullTripItem.fragment.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/social/feed/feedFragments/SocialStatisticsFields.fragment.gql"),
                i = n("./packages/social/feed/feedFragments/FollowerDetails.gql"),
                o = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripLocationInformation"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LocationInformation"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "locationId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isGeo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "latitude"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "longitude"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reviewSummary"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "locationId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rating"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "count"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thumbnail"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "parent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "locationId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "additionalNames"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "long"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "longOnlyParent"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "longParentAbbreviated"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "latitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "longitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "placeType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationCategory"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "categoryString"
                                },
                                name: {
                                    kind: "Name",
                                    value: "localizedCategories"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tagCategoryTypes"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "EnumValue",
                                            value: "RESTAURANT_PRICE"
                                        }, {
                                            kind: "EnumValue",
                                            value: "CUISINES"
                                        }, {
                                            kind: "EnumValue",
                                            value: "RULES_BASED"
                                        }, {
                                            kind: "EnumValue",
                                            value: "ACCOMMODATION_TYPE"
                                        }, {
                                            kind: "EnumValue",
                                            value: "ATTRACTIONS_L3_TYPE"
                                        }]
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 664
                    }
                };
            o.loc.source = {
                body: "c61d55bfb98c"
            };
            var r = o,
                s = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "FullTripItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripItem"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "__typename"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "comments"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "body"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "targetId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "targetType"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "created"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "author"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMe"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "username"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "avatar"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photoSizes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "actionPermissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canEdit"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canRemove"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "socialReference"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userReferences"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "length"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "offset"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "actionPermissions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canAddComment"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canEdit"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canRemove"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reference"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialStatistics"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isLiked"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likeCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSaved"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tripCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "object"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "LocationTripItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "AttractionTripItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "LinkPostItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "RepostItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripNoteItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ForumPostItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PhotoItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ReviewItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "VideoItem"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ReviewItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Review"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rating"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tripInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stayDate"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userProfile"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "avatar"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photoSizes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "caption"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialReferences"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "socialReference"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userReferences"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "__typename"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userId"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "length"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "offset"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "location"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripLocationInformation"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialReferences"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "socialReference"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "length"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "offset"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "VideoItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Video"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "caption"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userProfile"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "orderedLocations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripLocationInformation"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialStatistics"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "SocialStatisticsFields"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "statuses"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "sources"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isHorizontal"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "aspectRatio"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "duration"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "posterSizes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "locations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripLocationInformation"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialReferences"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "socialReference"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "length"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "offset"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LinkPostItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LinkPost"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "linkPostId"
                                },
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "comment"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "preview"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canonicalUrl"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "urlDomain"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "media"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "LinkPostMediaFields"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userProfile"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tags"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "locations"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "TripLocationInformation"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialReferences"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "socialReference"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "length"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "offset"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LinkPostMediaFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Photo"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photoSizes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PhotoItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Photo"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "caption"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "photoSizes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userProfile"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "username"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "FollowerDetails"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialStatistics"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "SocialStatisticsFields"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "route"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialReferences"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "socialReference"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "userReferences"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "userId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "length"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "offset"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "uploadDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "location"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripLocationInformation"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "LocationTripItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LocationInformation"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "TripLocationInformation"
                                },
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "additionalNames"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "long"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "longOnlyParent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationCategory"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "accommodationType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "placeType"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isGeo"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "AttractionTripItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AttractionProductInformation"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "attractionProductId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "encode"
                                    },
                                    arguments: []
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "parent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "locationId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "additionalNames"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "longParentAbbreviated"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "latitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "longitude"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "productThumbnail"
                                },
                                name: {
                                    kind: "Name",
                                    value: "thumbnail"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "attractionProductId"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "photoSizes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reviewSummary"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rating"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "count"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripNoteItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripNote"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "body"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "ForumPostItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ForumPost"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "parentId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topicId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topicTitle"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userProfile"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "avatar"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photoSizes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "body"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "forumName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedDate"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "absoluteUrl"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "lang"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "forumId"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "forum"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "route"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "url"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "absoluteUrl"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "RepostItem"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Repost"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "repostId"
                                },
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "static"
                                    },
                                    arguments: []
                                }]
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "object"
                                },
                                name: {
                                    kind: "Name",
                                    value: "repostedObject"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "LinkPostItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PhotoItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ReviewItem"
                                        },
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "VideoItem"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 4853
                    }
                };
            s.loc.source = {
                body: "64346b5ffee1"
            };
            var l = {};

            function c(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !l[t] && (l[t] = !0, !0)
                })
            }
            s.definitions = s.definitions.concat(c(a.a.definitions)), s.definitions = s.definitions.concat(c(i.a.definitions)), s.definitions = s.definitions.concat(c(r.definitions)), t.a = s
        },
        "./packages/trips/graphql/Fragment/TripItemStatisticFields.fragment.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/social/feed/feedFragments/SocialStatisticsFields.fragment.gql"),
                i = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripItemStatisticFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripItem"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "socialStatistics"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isLiked"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likeCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSaved"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tripCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 218
                    }
                };
            i.loc.source = {
                body: "3b9f4008e798"
            };
            var o = {};
            i.definitions = i.definitions.concat(function r(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !o[t] && (o[t] = !0, !0)
                })
            }(a.a.definitions)), t.a = i
        },
        "./packages/trips/graphql/Fragment/TripsError.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "TripsError"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "TripsError"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "field"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 53
                }
            };
            a.loc.source = {
                body: "3307f28145f3"
            }, t.a = a
        },
        "./packages/trips/graphql/Mutation/AddItemToTrip.gql": function(e, t, n) {
            "use strict";
            var a = n("./packages/trips/graphql/Fragment/FullTrip.fragment.gql"),
                i = n("./packages/trips/graphql/Fragment/TripsError.fragment.gql"),
                o = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripReference"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripReference"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 56
                    }
                };
            o.loc.source = {
                body: "5a2f33735515"
            };
            var r = o,
                s = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "TripReferenceError"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TripReferenceError"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripsError"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "reference"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "TripReference"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 251
                    }
                };
            s.loc.source = {
                body: "bcea46cbf0a2"
            };
            var l = {};

            function c(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !l[t] && (l[t] = !0, !0)
                })
            }
            s.definitions = s.definitions.concat(c(i.a.definitions)), s.definitions = s.definitions.concat(c(r.definitions));
            var d = s,
                u = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "AddItemToTrip"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "tripId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "referenceId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "referenceType"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "socialReference"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "allowDuplicates"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "addItemToTrip"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tripId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "tripId"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reference"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "referenceId"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "referenceType"
                                                }
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "allowDuplicates"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "allowDuplicates"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trip"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "FullTrip"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "errors"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "TripReferenceError"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 508
                    }
                };
            u.loc.source = {
                body: "4c3e9ccaeef2"
            };
            var m = {};

            function p(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !m[t] && (m[t] = !0, !0)
                })
            }
            u.definitions = u.definitions.concat(p(a.a.definitions)), u.definitions = u.definitions.concat(p(d.definitions)), t.a = u
        },
        "./packages/trips/graphql/Query/statistics/AttractionStatistics.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "AttractionStatistics"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "ids"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: {
                                    kind: "NonNullType",
                                    type: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Int"
                                        }
                                    }
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "savesObjects"
                            },
                            name: {
                                kind: "Name",
                                value: "attractionProducts"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "attractionProductIds"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "ids"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "attractionProductId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "socialStatistics"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSaved"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            a.loc.source = {
                body: "30911a732b9e"
            }, t.a = a
        },
        "./packages/trips/graphql/Query/statistics/LocationStatistics.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "LocationStatistics"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "ids"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: {
                                    kind: "NonNullType",
                                    type: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Int"
                                        }
                                    }
                                }
                            }
                        },
                        directives: []
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "savesObjects"
                            },
                            name: {
                                kind: "Name",
                                value: "locations"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "locationIds"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "ids"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "locationId"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "socialStatistics"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSaved"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 153
                }
            };
            a.loc.source = {
                body: "9d375baf95ac"
            }, t.a = a
        },
        "./packages/trips/privacy-control/PrivacyControl.jsx": function(e, t, n) {
            "use strict";
            var a, i = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                o = n("./node_modules/react/index.js"),
                r = n("./packages/common/i18n/i18n.jsx"),
                s = n("./packages/common/classnames/classnames.jsx"),
                l = n.n(s),
                c = n("./packages/trips/privacy-icon/PrivacyIcon.jsx"),
                d = (a = 0, function() {
                    return "trips_radio_".concat(a += 1)
                }),
                u = function e(t) {
                    var n = t.name,
                        a = t.value,
                        r = t.selected,
                        s = t.onSelect,
                        c = t.disabled,
                        u = t.radioClass,
                        m = t.children,
                        p = d();
                    return o.createElement(o.Fragment, null, o.createElement("label", {
                        className: l()("trips-privacy-control-RadioButton__label--1xV6_", Object(i.a)({}, "trips-privacy-control-RadioButton__disabled--bMM_y", c)),
                        htmlFor: p
                    }, o.createElement("input", {
                        id: p,
                        type: "radio",
                        name: n,
                        value: a,
                        defaultChecked: r,
                        disabled: c,
                        className: "trips-privacy-control-RadioButton__invisible_radio--1vP9_",
                        onChange: s
                    }), o.createElement("div", {
                        className: l()("trips-privacy-control-RadioButton__radio_button_outer--wOHv5", u, Object(i.a)({}, "trips-privacy-control-RadioButton__disabled--bMM_y", c))
                    }, o.createElement("div", {
                        className: "trips-privacy-control-RadioButton__radio_button_inner--3s6yJ"
                    })), o.createElement("div", {
                        className: "trips-privacy-control-RadioButton__children_container--286Ki"
                    }, m)))
                };
            u.defaultProps = {
                disabled: !1,
                selected: !1,
                radioClass: ""
            };
            var m = u,
                p = [{
                    value: "PRIVATE",
                    getTitle: function e() {
                        return Object(r.localize)("create_trip_screen_privacy_private")
                    },
                    getSubtitle: function e() {
                        return Object(r.localize)("create_trip_screen_privacy_private_explanation_v2")
                    }
                }, {
                    value: "PUBLIC",
                    getTitle: function e() {
                        return Object(r.localize)("create_trip_screen_privacy_public")
                    },
                    getSubtitle: function e() {
                        return Object(r.localize)("create_trip_screen_privacy_public_explanation_v2")
                    }
                }],
                v = function e(t) {
                    var n = "MODERATED" === t.checkedValue ? "PRIVATE" : t.checkedValue,
                        a = "PUBLIC" === t.checkedValue ? Object(r.localize)("create_trip_screen_privacy_public") : Object(r.localize)("create_trip_screen_privacy_private"),
                        s = "MODERATED" === t.checkedValue ? o.createElement("div", {
                            className: "trips-privacy-control-PrivacyControl__read_only_moderated--Dgysi"
                        }, Object(r.unescaped)(Object(r.localize)("trips_reported_explanation"))) : o.createElement("div", {
                            className: "trips-privacy-control-PrivacyControl__read_only--1UAY9"
                        }, Object(r.localize)("trips_collaborator_privacy_modal", {
                            privacySetting: a
                        }));
                    return o.createElement(o.Fragment, null, t.readOnly && s, p.map(function(e) {
                        var a = e.value === n;
                        return !a && t.readOnly ? null : o.createElement("div", {
                            className: "trips-privacy-control-PrivacyControl__privacy_setting--1eUlH",
                            key: e.value
                        }, o.createElement(m, {
                            disabled: t.readOnly,
                            name: t.name,
                            value: e.value,
                            onSelect: function n() {
                                return t.onSelect(e.value)
                            },
                            selected: a,
                            radioClass: "trips-privacy-control-PrivacyControl__radio_button_class--2FQ6t"
                        }, o.createElement("div", {
                            className: l()("trips-privacy-control-PrivacyControl__radio_content--2Xcww", Object(i.a)({}, "trips-privacy-control-PrivacyControl__disabled--1to3d", t.readOnly))
                        }, o.createElement("div", {
                            className: "trips-privacy-control-PrivacyControl__icon--2V_-1"
                        }, o.createElement(c.a, {
                            isPrivate: "PUBLIC" !== e.value
                        })), o.createElement("div", null, o.createElement("span", {
                            className: "trips-privacy-control-PrivacyControl__radio_title--3Wt77"
                        }, e.getTitle()), o.createElement("span", {
                            className: "trips-privacy-control-PrivacyControl__radio_subtitle--24DTP"
                        }, e.getSubtitle())))))
                    }))
                };
            v.defaultProps = {
                readOnly: !1
            }, t.a = v
        },
        "./packages/trips/privacy-icon/PrivacyIcon.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/classnames/classnames.jsx"),
                o = n.n(i),
                r = n("@ta/styleguide.icon"),
                s = Object.freeze({
                    normal: null,
                    small: "trips-privacy-icon-PrivacyIcon__small--2ERYT"
                }),
                l = function e(t) {
                    var n = t.hasBorder ? "trips-privacy-icon-PrivacyIcon__border--1bkCE" : "";
                    return a.createElement("div", {
                        onClick: t.onClick,
                        className: o()("trips-privacy-icon-PrivacyIcon__circle--1T6KN", n, t.className)
                    }, t.children)
                },
                c = function e(t) {
                    var n = t.isLocked ? "trips-privacy-icon-PrivacyIcon__locked--3z8rY" : "trips-privacy-icon-PrivacyIcon__unlocked--O8lCK",
                        i = t.isLocked ? "lock-fill" : "lock-open-fill";
                    return a.createElement("div", {
                        className: o()(n, "trips-privacy-icon-PrivacyIcon__lock--1TWlW", s[t.size])
                    }, a.createElement(r.Icon, {
                        name: i
                    }))
                },
                d = function e(t) {
                    return a.createElement(l, {
                        onClick: t.onClick,
                        className: o()(t.className, s[t.size]),
                        hasBorder: !t.borderless
                    }, a.createElement(c, {
                        isLocked: t.isPrivate,
                        size: t.size
                    }))
                };
            l.defaultProps = {
                className: void 0,
                children: void 0,
                onClick: void 0
            }, d.defaultProps = {
                className: void 0,
                borderless: !1,
                onClick: void 0,
                size: "normal"
            }, t.a = d
        },
        "./packages/trips/social/TripSocialActionBar.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                o = n("./packages/social/actions/LikeAction.jsx"),
                r = n("./packages/social/actions/DisabledSocialAction.jsx"),
                s = n("./packages/social/actions/BoostAction.jsx"),
                l = n("./packages/social/actions/NestedSocialAction.jsx"),
                c = n("./packages/social/actions/SocialActionBar.jsx"),
                d = n("@ta/social.repost-action"),
                u = n("./packages/common/features/features.jsx"),
                m = n("./packages/trips/collaboration/ShareTripPopup.jsx"),
                p = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "AuthZInfo"
                        },
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "authzInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canBoostContent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 58
                    }
                };
            p.loc.source = {
                body: "b42f38a0f629"
            };
            var v = p,
                b = function e(t) {
                    var n = t.trip,
                        p = t.member,
                        b = t.actor,
                        f = t.shareType,
                        k = t.viewportCategory,
                        g = t.onLikeClick,
                        h = t.onRepostClick,
                        _ = t.onShareClick,
                        j = t.justifyContent,
                        S = n.object.__typename || "",
                        y = "repost_".concat(S, "_").concat(n.object.id),
                        N = n.object,
                        O = N.status,
                        E = N.tripStatus,
                        I = N.actionPermissions,
                        C = O || E,
                        F = [],
                        T = [];
                    return "PUBLIC" === C && Object(u.featureIsEnabled)("trips_2018_writes") && (F.push(a.createElement(o.a, {
                        logInteractionFunction: g,
                        item: n.object,
                        key: "trip_social_action_bar_like"
                    })), T.push(a.createElement(d.RepostAction, {
                        onClick: h,
                        modalName: y,
                        repostPreviewProps: {
                            feedSectionItem: n,
                            member: p,
                            actor: b
                        },
                        actor: b,
                        socialStatistics: n.object.socialStatistics,
                        key: "trip_social_action_bar_repost"
                    }))), "DISABLED" !== f && Object(u.featureIsEnabled)("social_ugc_share") ? ("PUBLIC" === C || I && I.canAddCollaborators && Object(u.featureIsEnabled)("trips_2018_writes")) && T.push(a.createElement("span", {
                        key: "trip_social_action_bar_share"
                    }, a.createElement(m.b, {
                        onClick: _,
                        trip: n.object,
                        shareType: f,
                        alignEdge: "MOBILE" === k && F.length ? "right" : "left"
                    }))) : T.push(a.createElement("span", {
                        key: "trip_social_action_bar_share"
                    }, a.createElement(r.a, {
                        actionType: "Share"
                    }))), "PUBLIC" === C && Object(u.featureIsEnabled)("social_boosting_enabled") && T.push(a.createElement(i.Query, {
                        query: v,
                        key: "trip_social_action_bar_boost_query"
                    }, function(e) {
                        var t, i = e.data;
                        return (null == i ? void 0 : null === (t = i.authzInfo) || void 0 === t ? void 0 : t.canBoostContent) ? a.createElement(s.a, {
                            socialObjectRef: {
                                type: "TRIP",
                                id: n.object.id
                            },
                            socialStatistics: n.object.socialStatistics,
                            typename: n.object.__typename,
                            key: "trip_social_action_bar_boost"
                        }) : null
                    })), "SPACE_EVEN" === j ? F.push.apply(F, T) : F.push(a.createElement(l.a, {
                        key: "trip_social_action_bar_repost+share"
                    }, T)), a.createElement(c.a, null, F)
                };
            b.defaultProps = {
                onLikeClick: void 0,
                onRepostClick: void 0,
                onShareClick: void 0,
                loggedInMemberAuthorization: void 0,
                justifyContent: "SPACE_EVEN"
            }, t.a = b
        },
        "./packages/trips/tracking/impressions.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "c", function() {
                return s
            });
            var a = n("./packages/trips/trip-util/trip-util.jsx"),
                i = {
                    alltrips: "ALL",
                    publictrips: "PUBLIC",
                    privatetrips: "PRIVATE"
                },
                o = function e(t, n) {
                    return {
                        tripsHome: {
                            hasTrips: t && t.length > 0,
                            filter: i[n] || "ALL"
                        }
                    }
                },
                r = function e(t) {
                    var n;
                    n = t.owner && t.owner.isMe ? "OWNER" : Object(a.n)(t) ? "COLLABORATOR" : "VIEWER";
                    var i = t.status || void 0;
                    return {
                        tripsDetail: {
                            tripId: t.id,
                            status: i,
                            relation: n,
                            collaborative: !!t.collaborators && t.collaborators.length > 0
                        }
                    }
                },
                s = function e(t) {
                    var n = t.element,
                        a = t.trip,
                        i = t.trips,
                        o = t.item,
                        r = i ? !!(i.length > 0) : void 0,
                        s = a && void 0 !== r ? function e(t, n) {
                            return n ? t ? t && t.owner && !t.owner.isMe ? "COLLABORATOR" : t && t.collaborators && t.collaborators.length > 0 ? "COLLABORATED" : "EXISTING" : "NEW" : "FIRST"
                        }(a, r) : void 0;
                    return {
                        trips: {
                            element: n,
                            tripId: a && a.id,
                            tripType: s,
                            hasTrips: r,
                            dated: a && !!a.date && (!!a.date.to || !!a.date.from || !!a.date.duration),
                            isSaved: o && o.saved
                        }
                    }
                }
        },
        "./packages/trips/tracking/interactions.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return m
            });
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                o = n("./node_modules/react/index.js"),
                r = n("./packages/common/tracking/tracking.jsx"),
                s = n("@ta/tracking.interactions"),
                l = n("./packages/common/routing/routing.jsx"),
                c = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                d = {
                    Home: "HomeFeed",
                    Profile: "ProfileFeed",
                    Attractions: "AttractionList",
                    Attraction_Review: "AttractionDetail",
                    Attraction_Products: "AttractionList",
                    AttractionProductDetail: "AttractionProductDetail",
                    Hotels: "HotelList",
                    SmartDeals: "HotelList",
                    HotelHighlight: "HotelList",
                    HotelsList: "HotelList",
                    HotelsNear: "HotelList",
                    Vacation_Packages: "HotelList",
                    Hotel_Review: "HotelDetail",
                    Restaurants: "RestaurantList",
                    Restaurant_Review: "RestaurantDetail",
                    ShowUserReviews: "ShowUserReview",
                    Recent: "Recent",
                    Forums: "Forums",
                    ShowTopic: "Forums",
                    ShowForum: "Forums",
                    Trips: "Trips",
                    Map: "Map",
                    LastMinute: "HotelList",
                    LocalMaps: "Map",
                    LocalMapsRedesign: "Map",
                    VacationRentalReview: "VacationRentalDetail"
                },
                u = function e(t) {
                    return t && d[t] ? d[t].toUpperCase() : void 0
                },
                m = function e(t) {
                    return u(t) || u(t.replace(/^Mobile/, ""))
                },
                p = function e(t) {
                    var n = t.children,
                        d = t.source,
                        u = t.pageAsContext,
                        p = t.saveObject,
                        v = t.trackingContext;
                    return o.createElement(l.RouteConsumer, null, function(e) {
                        var t = e.route;
                        return o.createElement(r.TrackingImpressionContext, null, function(e) {
                            var r = e.impressionId || "",
                                l = v || u && t && t.page || void 0,
                                b = {
                                    detailId: p ? "".concat(p.id) : void 0,
                                    saveType: p ? p.type : void 0
                                };
                            return o.createElement(c.Mutation, {
                                mutation: s.LogInteractionV4,
                                ignoreResults: !0
                            }, function(e) {
                                return n(function(t) {
                                    var n = {
                                            elementClick: t.elementClick && Object(i.a)({
                                                puid: r
                                            }, b, {
                                                context: l
                                            }, t.elementClick),
                                            filterClick: t.filterClick && Object(i.a)({
                                                puid: r
                                            }, t.filterClick),
                                            modalSuccess: t.modalSuccess && Object(i.a)({
                                                puid: r
                                            }, b, {
                                                context: l
                                            }, t.modalSuccess),
                                            overflowClick: t.overflowClick && Object(i.a)({
                                                puid: r
                                            }, t.overflowClick),
                                            overflowSuccess: t.overflowSuccess && Object(i.a)({
                                                puid: r
                                            }, t.overflowSuccess)
                                        },
                                        o = Object(a.a)({}, d, function s(e) {
                                            var t = e;
                                            return ["elementClick", "modalSuccess"].forEach(function(e) {
                                                t[e] && t[e].context && (t[e].context = m(t[e].context) || null), t[e] && t[e].saveType && (t[e].saveType = t[e].saveType.toUpperCase())
                                            }), ["elementClick", "filterClick", "modalSuccess", "overflowClick", "overflowSuccess"].forEach(function(e) {
                                                t[e] && t[e].element && (t[e].element = t[e].element.toUpperCase())
                                            }), ["modalSuccess"].forEach(function(e) {
                                                t[e] && t[e].fields && (t[e].fields = t[e].fields.map(function(e) {
                                                    return e.toUpperCase()
                                                }))
                                            }), t
                                        }(n));
                                    e({
                                        variables: {
                                            interaction: o
                                        }
                                    })
                                }, r)
                            })
                        })
                    })
                };
            p.defaultProps = {
                pageAsContext: !1,
                saveObject: void 0,
                trackingContext: void 0
            }, t.a = p
        },
        "./packages/trips/trip-avatars/TripAvatars.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./packages/common/classnames/classnames.jsx"),
                o = n.n(i),
                r = n("./node_modules/react-redux/es/index.js"),
                s = n("@ta/styleguide.avatar"),
                l = n("./packages/common/features/features.jsx"),
                c = n("./packages/trips/trip-util/trip-util.jsx"),
                d = n("./packages/trips/collaboration/ShareTripPopup.jsx"),
                u = n("./packages/trips/collaboration/AddFriendIcon.jsx"),
                m = {
                    avatarGroup: "trips-trip-avatars-TripAvatars__avatarGroup--2NC3g",
                    default: "trips-trip-avatars-TripAvatars__default--ow1K-"
                },
                p = {
                    avatarSize: "default",
                    tabletAvatarSize: void 0,
                    isRtl: !1,
                    maxAvatars: 6,
                    addFriend: !1,
                    onAvatarClick: void 0,
                    onFriendClick: void 0
                },
                v = function e(t) {
                    var n, i = Object(c.i)(t.trip, !1),
                        r = !1,
                        v = !1,
                        b = (t.trip.collaborators || []).length > 0;
                    i.canAddCollaborators && Object(l.featureIsEnabled)("trips_2018_collab") && Object(l.featureIsEnabled)("trips_2018_writes") ? (r = t.addFriend, n = b ? t.showCollabMenu : void 0, v = !n) : (r = !1, v = !0);
                    var f = Object(c.k)(t.trip, t.maxAvatars || p.maxAvatars, 0, t.isRtl),
                        k = f.length >= 4,
                        g = k ? "right" : "left",
                        h = k ? -7 : 7,
                        _ = f.length > 5 ? f.slice(f.length - 5, f.length) : f,
                        j = t.avatarSize ? t.avatarSize.toString() : m.default,
                        S = function e() {
                            t.onAvatarClick && t.onAvatarClick(), n && n()
                        };
                    return a.createElement(a.Fragment, null, a.createElement("span", {
                        className: o()("ui_social_avatar_group", m.avatarGroup, m[j])
                    }, _.map(function(e) {
                        var n;
                        return e && a.createElement(s.Avatar, {
                            key: e.id,
                            size: t.avatarSize,
                            tabletSize: t.tabletAvatarSize,
                            href: v ? null == e ? void 0 : null === (n = e.route) || void 0 === n ? void 0 : n.url : "",
                            withBorder: !0,
                            photo: e.avatar,
                            onClick: S,
                            mobileTarget: "_self"
                        })
                    }), r && a.createElement(d.a, {
                        alignEdge: g,
                        shiftArrow: h,
                        trip: t.trip,
                        shareType: "WRITE",
                        closeOnScroll: !0
                    }, function(e, n) {
                        return a.createElement(u.a, {
                            targetRef: e,
                            onClick: function e() {
                                t.onFriendClick && t.onFriendClick(), n()
                            },
                            size: t.avatarSize,
                            tabletSize: t.tabletAvatarSize
                        })
                    })))
                };
            v.defaultProps = p;
            var b = Object(r.connect)(function(e) {
                return {
                    isRtl: e.i18n.isRtl
                }
            })(v);
            t.a = b
        },
        "./packages/trips/trip-byline/TripByLine.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./node_modules/react-redux/es/index.js"),
                r = n("./packages/common/i18n/i18n.jsx"),
                s = n("./packages/common/routing/routing.jsx"),
                l = n("./packages/common/classnames/classnames.jsx"),
                c = n.n(l),
                d = n("./packages/trips/trip-util/trip-util.jsx"),
                u = {
                    isRtl: !1,
                    maxNames: 6,
                    onExpand: null,
                    isSmall: !1
                },
                m = function e(t) {
                    var n = Object(r.localize)("trips_byline_v2"),
                        o = Object(r.localize)("trips_and_more"),
                        l = n.length + o.length,
                        m = function p(e, t) {
                            return t ? 65 : "MOBILE" === e ? 70 : 100
                        }(t.viewportCategory, t.isSmall),
                        v = Object(d.j)(t.trip),
                        b = Object(d.k)(t.trip, t.maxNames || u.maxNames, m - l, t.isRtl),
                        f = !!t.onExpand,
                        k = "".concat(t.linkClassName, " ").concat("trips-trip-byline-TripByLine__clickable--2ljnX"),
                        g = b.length < v.length ? i.createElement("span", {
                            onClick: function e(n) {
                                t.onExpand && (t.onExpand(), n.stopPropagation())
                            },
                            className: c()("trips-trip-byline-TripByLine__andMoreCTA--3uk9K", Object(a.a)({}, k, f))
                        }, o) : null;
                    return i.createElement("div", null, n, " ", b.map(function e(n, o, r) {
                        var l, d = o === r.length - 1;
                        return n && i.createElement(i.Fragment, {
                            key: n.id || n.username
                        }, i.createElement(s.Link, {
                            className: c()(t.linkClassName, Object(a.a)({}, "trips-trip-byline-TripByLine__verified--1Rufx", n.isVerified)),
                            href: null == n ? void 0 : null === (l = n.route) || void 0 === l ? void 0 : l.url,
                            onClick: function e(t) {
                                return t.stopPropagation()
                            }
                        }, n.displayName), !d && ", ")
                    }), " ", g)
                };
            m.defaultProps = u, t.a = Object(o.connect)(function(e) {
                return {
                    isRtl: e.i18n.isRtl,
                    viewportCategory: e.meta.device.viewportCategory
                }
            })(m)
        },
        "./packages/trips/trip-constants/trip-constants.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return r
            });
            var a = n("./packages/common/features/features.jsx"),
                i = 24,
                o = function e() {
                    return Object(a.featureIsEnabled)("trips_2018_writes") ? i - 1 : i
                },
                r = "mostRecentlyAddedToTrip"
        },
        "./packages/trips/trip-errors/trip-errors.jsx": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var a = n("./packages/common/i18n/i18n.jsx"),
                i = function e(t, n) {
                    var i = n.type;
                    switch (t) {
                        case "ADD_ITEM_COMMENT":
                            return "FAILED_PROFANITY" === i ? Object(a.localize)("trips_inline_profanity_check") : Object(a.localize)("trips_error_default_add_item_comment");
                        case "ADD_NOTE":
                            return "FAILED_PROFANITY" === i ? Object(a.localize)("trips_inline_profanity_check") : Object(a.localize)("trips_error_default_add_note");
                        case "UPDATE_COMMENT":
                            return "FAILED_PROFANITY" === i ? Object(a.localize)("trips_inline_profanity_check") : Object(a.localize)("trips_error_default_update_comment");
                        case "CREATE_TRIP":
                            return "ILLEGAL_DUPLICATE" === i ? Object(a.localize)("trips_error_duplicate") : "FAILED_PROFANITY" === i ? Object(a.localize)("trips_stat_modal_profanity_check_native") : Object(a.localize)("create_trip_general_error_v2");
                        case "EDIT_PRIVACY":
                            return "FAILED_PROFANITY" === i ? Object(a.localize)("trip_contains_profanity") : Object(a.localize)("trips_error_default_edit_privacy");
                        case "EDIT_TRIP":
                            return "FAILED_PROFANITY" === i ? Object(a.localize)("trips_inline_profanity_check") : "ILLEGAL_DUPLICATE" === i ? Object(a.localize)("trips_error_duplicate") : Object(a.localize)("trips_error_default_edit_trip");
                        case "ADD_ITEM_TO_TRIP":
                            return Object(a.localize)("trips_error_default_add_item_to_trip");
                        case "MOVE_TRIP_ITEM":
                            return Object(a.localize)("trips_error_default_move_item")
                    }
                    return Object(a.localize)("trips_error_general_default")
                }
        },
        "./packages/trips/trip-flow-selector/QueriedTripFlowSelector.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./node_modules/react/index.js"),
                o = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                r = n("./node_modules/react-redux/es/index.js"),
                s = n("./packages/common/logging/logging.jsx"),
                l = n.n(s),
                c = n("./packages/common/features/features.jsx"),
                d = n("./packages/trips/graphql/Query/statistics/LocationStatistics.gql"),
                u = n("./packages/trips/graphql/Query/statistics/AttractionStatistics.gql"),
                m = n("./packages/trips/trip-util/trip-util.jsx"),
                p = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                v = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                b = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                f = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                k = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                g = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                h = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                _ = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                j = n("@ta/overlays.toast"),
                S = n("@ta/common.webview"),
                y = n("./packages/common/routing/routing.jsx"),
                N = n("@ta/social.login-gate"),
                O = n("@ta/social.onboarding-state"),
                E = n("./packages/common/tracking/tracking.jsx"),
                I = n.n(E),
                C = n("./packages/trips/graphql/Mutation/AddItemToTrip.gql"),
                F = function(e) {
                    function t() {
                        return Object(v.a)(this, t), Object(f.a)(this, Object(k.a)(t).apply(this, arguments))
                    }
                    return Object(g.a)(t, e), Object(b.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this;
                            return i.createElement(o.Mutation, {
                                mutation: C.a,
                                onError: this.props.onError,
                                update: function e(n) {
                                    return Object(m.r)(n, t.props.object)
                                },
                                awaitRefetchQueries: !0
                            }, function(e) {
                                return t.props.children(function(n) {
                                    e({
                                        variables: {
                                            tripId: n,
                                            referenceId: "".concat(t.props.object.id),
                                            referenceType: t.props.object.type,
                                            allowDuplicates: !1,
                                            socialReference: Object(c.featureIsEnabled)("social_at_referencing_profile_links")
                                        }
                                    }).then(function(e) {
                                        var n = e.data.addItemToTrip,
                                            a = n && n.trip;
                                        if (a) {
                                            var i = Object(m.e)(a, t.props.object);
                                            i ? t.props.onSave(a, i) : t.props.onError()
                                        } else t.props.onError()
                                    })
                                })
                            })
                        }
                    }]), t
                }(i.PureComponent),
                T = n("./packages/trips/trip-constants/trip-constants.jsx"),
                w = n("./packages/trips/tracking/interactions.jsx"),
                x = n("./packages/trips/trip-toasts/trip-toasts.jsx"),
                P = n("@ta/common.localstorage"),
                L = n.n(P),
                A = n("./packages/trips/trip-flow-selector/RemoteStatModal.jsx"),
                R = ["Profile", "HomeFeed", "Trips", "TripsWebview", "Home"],
                M = function(e) {
                    function t(e) {
                        var n;
                        return Object(v.a)(this, t), n = Object(f.a)(this, Object(k.a)(t).call(this, e)), Object(_.a)(Object(h.a)(Object(h.a)(n)), "launchToast", void 0), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onComplete", function(e) {
                            n.props.onComplete && n.props.onComplete(e)
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onModalClose", function() {
                            n.setState({
                                overlayState: "DEFAULT"
                            })
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onCreateTripClicked", function() {
                            n.setState({
                                overlayState: "CREATE"
                            })
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onSelectCreateTripClicked", function() {
                            n.setState({
                                overlayState: "SELECT_CREATE"
                            })
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onUndoRemoveAction", function(e) {
                            n.launchTripToast(Object(x.c)(e, "SAVED")), n.setState({
                                overlayState: "DEFAULT"
                            }), n.onComplete(!0)
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "getFirstCommentBody", function(e) {
                            var t = e.comments;
                            return t && t.length > 0 ? t[0].body : null
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "openFlow", function(e, t, a) {
                            return function() {
                                return new Promise(function(i) {
                                    var o = Object(m.q)(n.props.object);
                                    if (o)
                                        if (S.NativeBridge.isNativeWebview() && S.NativeBridge.isActionSupported("presentSavesModal", 2)) {
                                            var r = o.id,
                                                s = o.type,
                                                l = o.originalObject,
                                                c = n.getFirstCommentBody(n.props.object);
                                            S.NativeBridge.showSavesModal({
                                                id: r,
                                                type: s,
                                                note: c,
                                                originalObject: l && {
                                                    type: l.type,
                                                    id: l.id
                                                }
                                            })
                                        } else a().then(function() {
                                            var a = n.getMostRecentlyAddedToTrip();
                                            !n.props.active && a && "savesItem" !== o.type ? t(a) : e(), i(n.state.overlayState)
                                        })
                                })
                            }
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onSuccessfulAutosave", function(e, t, a) {
                            n.launchTripToast(Object(x.a)(e, function e() {
                                n.setState({
                                    overlayState: "SELECT"
                                }), a("SELECT")
                            })), n.setState({
                                overlayState: "DEFAULT",
                                lastAutosavedItem: t
                            }), n.onComplete(!0)
                        }), Object(_.a)(Object(h.a)(Object(h.a)(n)), "onSuccessfulSave", function(e, t) {
                            n.launchTripToast(Object(x.c)(e, t)), n.setState({
                                overlayState: "DEFAULT"
                            }), n.setMostRecentlyAddedToTrip(e.id), n.props.attemptOnboarding && n.props.setFireOnboarding(!1, "SAVE_ACTION"), n.onComplete(!0)
                        }), n.state = {
                            overlayState: "DEFAULT",
                            lastAutosavedItem: null
                        }, n
                    }
                    return Object(g.a)(t, e), Object(b.a)(t, [{
                        key: "launchTripToast",
                        value: function e(t) {
                            this.launchToast && this.launchToast.apply(this, Object(p.a)(t))
                        }
                    }, {
                        key: "showUndoRemoveToast",
                        value: function e(t) {
                            var n = Object(m.q)(this.props.object);
                            n && this.launchTripToast(Object(x.b)(t, n, this.onUndoRemoveAction))
                        }
                    }, {
                        key: "setMostRecentlyAddedToTrip",
                        value: function e(t) {
                            L.a.set(T.a, {
                                tripId: t,
                                userId: this.props.loggedInUserId
                            }, 144e5)
                        }
                    }, {
                        key: "getMostRecentlyAddedToTrip",
                        value: function e() {
                            var t = L.a.get(T.a);
                            return t && t.userId === this.props.loggedInUserId ? t.tripId : null
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this;
                            if (!Object(c.featureIsEnabled)("trips_bookmark")) return null;
                            var n = this.props,
                                a = n.children,
                                o = n.object,
                                r = n.preventInteractionPropagation,
                                s = n.trackingContext,
                                l = n.loggedInUserId,
                                d = Object(m.q)(o);
                            if (!d) return null;
                            var u = {
                                modalName: "",
                                saveObject: d,
                                loggedInUserId: l,
                                overlayState: this.state.overlayState,
                                lastSavedItem: this.state.lastAutosavedItem,
                                trackingContext: s,
                                onCreateTripClicked: this.onCreateTripClicked,
                                onClose: this.onModalClose,
                                statCallback: function e(n, a, i, o, r) {
                                    "REMOVE" === n ? (t.showUndoRemoveToast(i), t.onComplete(r)) : "NEW" === a ? t.onSuccessfulSave(i, "CREATED") : o && t.onSuccessfulSave(i, "SAVED")
                                }
                            };
                            return i.createElement(y.RouteConsumer, null, function(e) {
                                var n = e.route;
                                return i.createElement(i.Fragment, null, i.createElement(w.a, {
                                    source: "trips",
                                    trackingContext: s,
                                    saveObject: d,
                                    pageAsContext: !0
                                }, function(e, o) {
                                    return i.createElement(N.SocialLoginGate, {
                                        tracking: {
                                            source: "trips",
                                            element: "ITEM_SAVE_LOGIN",
                                            attributes: {
                                                context: n ? Object(w.b)(n.page) : void 0,
                                                puid: o
                                            }
                                        },
                                        pid: n && n.page && R.includes(n.page) ? 40439 : 39766
                                    }, function(o) {
                                        return i.createElement(A.a, {
                                            statProps: u
                                        }, function(s, l, c) {
                                            return i.createElement(i.Fragment, null, i.createElement(F, {
                                                object: d,
                                                onSave: function n(a, i) {
                                                    e({
                                                        modalSuccess: {
                                                            element: "quickSave"
                                                        }
                                                    }), t.onSuccessfulAutosave(a, i, c)
                                                },
                                                onError: c
                                            }, function(s) {
                                                return i.createElement("span", {
                                                    onClick: function a(i) {
                                                        i.stopPropagation(), i.preventDefault(), r || e({
                                                            elementClick: {
                                                                element: "item_save"
                                                            }
                                                        });
                                                        var o = t.props.active ? "is_saved" : "not_saved";
                                                        I()({
                                                            action: "saveCTA_click",
                                                            module: "Trips|".concat(n.page),
                                                            context: "Trips|".concat(d.type, "|").concat(o)
                                                        })
                                                    }
                                                }, a(t.openFlow(c, s, o)))
                                            }))
                                        })
                                    })
                                }), i.createElement(j.Toaster, null, function(e) {
                                    t.launchToast = e
                                }))
                            })
                        }
                    }]), t
                }(i.Component);
            Object(_.a)(M, "defaultProps", {
                preventInteractionPropagation: !1,
                attemptOnboarding: !0,
                onComplete: null,
                trackingContext: void 0
            });
            var D = Object(r.connect)(function(e) {
                    return {
                        loggedInUserId: e.auth.loggedInUserId
                    }
                }, {
                    setFireOnboarding: O.ACTIONS.setShouldFire
                })(M),
                z = new(n("./packages/common/state/state.jsx").PrivateStateAccessor)("is-saved-state", {
                    savedMap: {}
                }),
                B = function e(t, n) {
                    return "".concat(t).concat(n)
                },
                V = {
                    updateSaved: function e(t, n, a) {
                        return z.action({
                            type: "UPDATE_SAVED",
                            saveId: t,
                            saveType: n,
                            isSaved: a
                        })
                    }
                };
            z.setReducerIfUnset(function(e, t) {
                var n = e.savedMap,
                    i = t.saveId,
                    o = t.saveType,
                    r = t.isSaved,
                    s = t.type,
                    l = Object(a.a)({}, n);
                return i && o && "UPDATE_SAVED" === s && (l[B(i, o)] = r), {
                    savedMap: l
                }
            });
            var U = function e(t, n) {
                    return !0 === t || !1 === t ? t : n
                },
                W = function e(t) {
                    if (!Object(c.featureIsEnabled)("trips_bookmark")) return null;
                    var n = t.object,
                        a = t.preventInteractionPropagation,
                        r = t.trackingContext,
                        s = t.children,
                        p = t.isActive,
                        v = t.updateSaved,
                        b = t.ssr,
                        f = Object(m.q)(n);
                    if (!f) return l.a.error("An invalid saves object was passed to QueriedTripFlowSelector"), null;
                    var k = Object(m.o)(f) || {},
                        g = k && null == U(p, null);
                    return i.createElement(o.Query, {
                        query: k.query,
                        variables: k.variables,
                        ssr: b,
                        skip: !g,
                        onCompleted: function e(t) {
                            if (g) {
                                var n = t && t.savesObjects && t.savesObjects[0];
                                if (n) {
                                    var a = function e(t, n) {
                                            return t === d.a ? n.locationId : t === u.a ? n.attractionProductId : n.id
                                        }(k.query, n),
                                        i = n.socialStatistics,
                                        o = void 0 === i ? {} : i,
                                        r = a === f.id && !!o.isSaved;
                                    v(f.id, f.type, r)
                                }
                            }
                        }
                    }, function() {
                        return i.createElement(D, {
                            object: n,
                            active: !!p,
                            preventInteractionPropagation: a,
                            trackingContext: r,
                            onComplete: function e(t) {
                                v(f.id, f.type, t)
                            }
                        }, function(e) {
                            return s(e, !!p)
                        })
                    })
                };
            W.defaultProps = {
                object: null,
                ssr: !1,
                trackingContext: void 0
            }, t.a = Object(r.connect)(function(e, t) {
                var n = function e(t, n) {
                        var a = n ? B(n.id, n.type) : "";
                        return z.getFrom(t).savedMap[a]
                    }(e, Object(m.q)(t.object)),
                    i = function e(t) {
                        return t && t.socialStatistics && t.socialStatistics.isSaved
                    }(t.object),
                    o = U(n, i);
                return Object(a.a)({}, t, {
                    loggedInUserId: e.auth.loggedInUserId,
                    isActive: o
                })
            }, {
                updateSaved: V.updateSaved
            })(W)
        },
        "./packages/trips/trip-flow-selector/RemoteStatModal.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                m = n("./node_modules/react/index.js"),
                p = n("@ta/overlays.managers"),
                v = n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),
                b = n("@ta/overlays.modal"),
                f = n("@ta/overlays.headers"),
                k = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                g = n("@ta/styleguide.loading"),
                h = n("@ta/loading.error"),
                _ = n("./packages/trips/trip-util/trip-util.jsx"),
                j = n("./packages/common/i18n/i18n.jsx"),
                S = n("./packages/trips/tracking/interactions.jsx"),
                y = n("./packages/common/logging/logging.jsx"),
                N = n.n(y),
                O = n("./packages/common/features/features.jsx"),
                E = n("./packages/trips/graphql/Mutation/AddItemToTrip.gql"),
                I = n("./packages/trips/create-trip-modal/CreateTripModalBase.jsx"),
                C = function e(t) {
                    var n = t.object,
                        a = t.onAddedToCreatedTrip;
                    return m.createElement(k.Mutation, {
                        mutation: E.a,
                        update: function e(n) {
                            return Object(_.r)(n, t.object)
                        }
                    }, function(e, t) {
                        var i = t.loading;
                        return m.createElement(S.a, {
                            source: "trips",
                            pageAsContext: !0
                        }, function(t) {
                            return m.createElement(I.a, {
                                onTripCreated: function i(o) {
                                    t({
                                        modalSuccess: {
                                            element: "createTrip",
                                            privacy: o.status || void 0
                                        }
                                    }), e({
                                        variables: {
                                            tripId: o.id,
                                            referenceId: "".concat(n.id),
                                            referenceType: n.type,
                                            allowDuplicates: !1,
                                            socialReference: Object(O.featureIsEnabled)("social_at_referencing_profile_links")
                                        }
                                    }).then(function() {
                                        return a(o), null
                                    }).catch(function(e) {
                                        return N.a.error(e), Object(j.localize)("create_trip_general_error_v2")
                                    })
                                },
                                loading: i
                            })
                        })
                    })
                },
                F = n("./packages/trips/graphql/Fragment/BasicTrip.fragment.gql"),
                T = n("./packages/trips/graphql/Fragment/TripsError.fragment.gql"),
                w = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "MoveTripItem"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "toTripId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "itemId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Long"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "moveTripItem"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "toTripId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "toTripId"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "itemId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "itemId"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trip"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "BasicTrip"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "errors"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "TripsError"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 315
                    }
                };
            w.loc.source = {
                body: "1a490781325f"
            };
            var x = {};

            function P(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !x[t] && (x[t] = !0, !0)
                })
            }
            w.definitions = w.definitions.concat(P(F.a.definitions)), w.definitions = w.definitions.concat(P(T.a.definitions));
            var L = w,
                A = function e(t) {
                    var n = t.item,
                        a = t.onMovedToCreatedTrip;
                    return m.createElement(k.Mutation, {
                        mutation: L
                    }, function(e, t) {
                        var i = t.loading;
                        return m.createElement(S.a, {
                            source: "trips",
                            pageAsContext: !0
                        }, function(t) {
                            return m.createElement(I.a, {
                                onTripCreated: function i(o) {
                                    t({
                                        modalSuccess: {
                                            element: "createTrip",
                                            privacy: o.status || void 0
                                        }
                                    }), e({
                                        variables: {
                                            toTripId: o.id,
                                            itemId: n.id
                                        }
                                    }).then(function() {
                                        return a(o), null
                                    }).catch(function(e) {
                                        return N.a.error(e), Object(j.localize)("trips_move_error")
                                    })
                                },
                                loading: i
                            })
                        })
                    })
                },
                R = n("./node_modules/react-redux/es/index.js"),
                M = n("./packages/common/classnames/classnames.jsx"),
                D = n.n(M),
                z = n("./packages/common/tracking/tracking.jsx"),
                B = n("./packages/trips/tracking/impressions.jsx"),
                V = n("./packages/common/infinite-loader/InfiniteLoader.jsx"),
                U = n("@ta/social.show-more"),
                W = n("@ta/styleguide.icon"),
                H = function e(t) {
                    return m.createElement(S.a, {
                        source: "trips",
                        pageAsContext: !0
                    }, function(e) {
                        return m.createElement("div", {
                            className: "trips-save-to-trip-modal-SaveToTripModalFooter__trip_stat_modal_footer--Am6hM",
                            onClick: function n() {
                                e({
                                    elementClick: {
                                        element: "stat_createTrip"
                                    }
                                }), t.onClick()
                            }
                        }, m.createElement(W.Icon, {
                            name: "plus",
                            className: "trips-save-to-trip-modal-SaveToTripModalFooter__trip_stat_modal_footer_button--Inxjt"
                        }), m.createElement("span", {
                            className: "trips-save-to-trip-modal-SaveToTripModalFooter__trip_stat_modal_footer_label--2_8Pc"
                        }, Object(j.localize)("stat_modal_create_a_trip_v2")))
                    })
                },
                q = function(e) {
                    function t() {
                        return Object(o.a)(this, t), Object(s.a)(this, Object(l.a)(t).apply(this, arguments))
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "onCreateTripClicked",
                        value: function e() {
                            var t = this.props.onCreateTrip;
                            t && t()
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t, n = this,
                                a = this.props,
                                i = a.tripList,
                                o = a.savedSet,
                                r = a.tripListBottom;
                            if (0 === i.length) return null;
                            var s = i.slice().filter(function(e) {
                                var t = Object(_.l)(e);
                                return Object(_.i)(e, !!t).canAddItem
                            });
                            return m.createElement("div", {
                                className: D()("trips-save-to-trip-modal-SaveToTripModalBase__trip_stat_modal--3FWrO", (t = {}, Object(u.a)(t, "trips-save-to-trip-modal-SaveToTripModalBase__fullscreen_ie_safari_fix--2b2bW", "IE" === this.props.browserFamily || "Safari" === this.props.browserFamily), Object(u.a)(t, "trips-save-to-trip-modal-SaveToTripModalBase__disabled--1BenF", this.props.disabled), t))
                            }, m.createElement(z.Impression, {
                                source: "trips",
                                attributes: Object(B.c)({
                                    element: "statModal",
                                    trips: s,
                                    item: {
                                        saved: o.size > 0
                                    }
                                })
                            }, m.createElement(V.a, {
                                loadMore: this.props.onPaginate,
                                threshold: 550,
                                throttle: 50,
                                hasMore: this.props.hasMore,
                                infiniteLoadOnMount: !1
                            }, function(e, t, a, i) {
                                return m.createElement("div", {
                                    className: "trips-save-to-trip-modal-SaveToTripModalBase__trip_stat_modal_list--3S6za",
                                    ref: e
                                }, m.createElement("ul", {
                                    ref: t
                                }, s.map(function(e) {
                                    return m.createElement("li", {
                                        key: e.id
                                    }, n.props.rowCreator(e))
                                }), m.createElement("li", {
                                    className: "trips-save-to-trip-modal-SaveToTripModalBase__scrollButtonContainer--2HUgR"
                                }, m.createElement(U.ShowMore, {
                                    onClick: a,
                                    hasMore: n.props.hasMore,
                                    showButton: !i
                                }, null)), r && m.createElement("li", {
                                    key: "bottom"
                                }, r)))
                            })), m.createElement(H, {
                                onClick: function e() {
                                    return n.onCreateTripClicked()
                                }
                            }))
                        }
                    }]), t
                }(m.PureComponent),
                G = Object(R.connect)(function(e) {
                    return {
                        browserFamily: e.meta.device.browser.family
                    }
                })(q),
                K = n("./packages/trips/bookmark-icon/BookmarkIcon.jsx"),
                Q = n("./packages/trips/privacy-icon/PrivacyIcon.jsx"),
                Y = function e(t) {
                    var n = t.trip,
                        a = t.showBookmark,
                        i = t.onClicked,
                        o = "PUBLIC" !== (n || {}).status;
                    return m.createElement("div", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__trip_stat_modal_item_container--JN5mn",
                        onClick: function e(t) {
                            t.stopPropagation(), i()
                        }
                    }, m.createElement("div", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__image_container--2oLIu"
                    }, n.photo && n.photo.photoSizes && n.photo.photoSizes.length ? m.createElement("img", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__thumbnail--15C64",
                        src: n.photo.photoSizes[1].url
                    }) : m.createElement("div", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__thumbnail_placeholder--1pO8D"
                    }, m.createElement(W.Icon, {
                        name: "suitcase"
                    }))), m.createElement("div", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__title_container--385YG"
                    }, !Object(O.featureIsEnabled)("saves_heart_with_wc_flow") && m.createElement(Q.a, {
                        isPrivate: o,
                        borderless: !0,
                        size: "small",
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__private_icon--aNWnU"
                    }), m.createElement("span", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__title_label--2r845"
                    }, n.title), a && m.createElement("span", {
                        className: "trips-save-to-trip-modal-rows-SaveToTripModalRowBase__save_icon--3Ecgm"
                    }, m.createElement(K.a, {
                        active: !0,
                        bookmarkStyle: "flat",
                        bookmarkSize: "22"
                    }))))
                };
            Y.defaultProps = {
                showBookmark: !1
            };
            var X = Y,
                J = function e(t) {
                    var n = t.trip,
                        a = t.itemId,
                        i = t.showBookmark,
                        o = t.onClick,
                        r = t.onError;
                    return m.createElement(k.Mutation, {
                        mutation: L
                    }, function(e) {
                        return m.createElement(X, {
                            trip: n,
                            onClicked: function t() {
                                return function e(t) {
                                    i || t({
                                        variables: {
                                            toTripId: n.id,
                                            itemId: a
                                        }
                                    }).then(function(e) {
                                        var t = e && e.data && e.data.moveTripItem && e.data.moveTripItem.errors;
                                        t && t.length ? r && r() : o && o(n)
                                    }).catch(function(e) {
                                        N.a.error(e)
                                    })
                                }(e)
                            },
                            showBookmark: i
                        })
                    })
                };
            J.defaultProps = {
                onError: function e() {}
            };
            var Z = J,
                $ = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "mutation",
                        name: {
                            kind: "Name",
                            value: "RemoveTripReference"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "reference"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "TripReferenceInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "tripId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Int"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tripsRemoveReference"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "references"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "reference"
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "tripId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "tripId"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trip"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "BasicTrip"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 250
                    }
                };
            $.loc.source = {
                body: "aebee359bb88"
            };
            var ee = {};
            $.definitions = $.definitions.concat(function te(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !ee[t] && (ee[t] = !0, !0)
                })
            }(F.a.definitions));
            var ne = $,
                ae = function e(t) {
                    var n = t.object,
                        a = t.onClick,
                        i = t.onUnsave,
                        o = t.onError,
                        r = t.trip;
                    return m.createElement(k.Mutation, {
                        mutation: ne,
                        update: function e(t) {
                            return Object(_.s)(t, n)
                        }
                    }, function(e) {
                        return m.createElement(X, {
                            trip: r,
                            onClicked: function t() {
                                return function e(t) {
                                    a && a(), t({
                                        variables: {
                                            reference: Object(_.p)(n),
                                            tripId: r.id
                                        }
                                    }).then(function() {
                                        i && i(r, !1)
                                    }).catch(function(e) {
                                        o && o(e), N.a.error(e)
                                    })
                                }(e)
                            },
                            showBookmark: !0
                        })
                    })
                };
            ae.defaultProps = {
                onClick: null,
                onUnsave: null
            };
            var ie = ae,
                oe = function e(t) {
                    var n = t.trip,
                        a = t.object,
                        i = t.onSave,
                        o = t.onError,
                        r = t.onClick;
                    return m.createElement(k.Mutation, {
                        mutation: E.a,
                        update: function e(t) {
                            return Object(_.r)(t, a)
                        }
                    }, function(e) {
                        return m.createElement(X, {
                            trip: n,
                            onClicked: function t() {
                                return function e(t) {
                                    r && r(), t({
                                        variables: {
                                            tripId: n.id,
                                            referenceId: "".concat(a.id),
                                            referenceType: a.type,
                                            allowDuplicates: !1,
                                            socialReference: Object(O.featureIsEnabled)("social_at_referencing_profile_links")
                                        }
                                    }).then(function(e) {
                                        var t = e && e.data && e.data.addItemToTrip && e.data.addItemToTrip.errors;
                                        t && t.length ? o && o() : i && i(n, !0)
                                    }).catch(function(e) {
                                        o && o(e), N.a.error(e)
                                    })
                                }(e)
                            }
                        })
                    })
                };
            oe.defaultProps = {
                onClick: null,
                onSave: null,
                onError: null
            };
            var re = oe,
                se = function e(t) {
                    return "number" == typeof t.id ? t.id : parseInt(t.id, 10)
                },
                le = function(e) {
                    function t() {
                        var e, n;
                        Object(o.a)(this, t);
                        for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(u.a)(Object(d.a)(Object(d.a)(n)), "state", {
                            disabled: !1
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "onError", function() {
                            n.setState({
                                disabled: !1
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "onClick", function() {
                            n.setState({
                                disabled: !0
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "doCallback", function(e, t, a) {
                            var i = new Set(n.props.savedSet);
                            a ? i.add(t.id) : i.delete(t.id), e && e(t, a, i.size > 0)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "rowCreator", function(e, t) {
                            var a = n.props,
                                i = a.saveObject,
                                o = a.tripAction,
                                r = a.savedSet,
                                s = se(i),
                                l = r.has(e.id);
                            if (l) {
                                var c = i && m.createElement(ie, {
                                    trip: e,
                                    object: i,
                                    onUnsave: function a(i, o) {
                                        t({
                                            modalSuccess: {
                                                element: "unsave"
                                            }
                                        }), n.doCallback(n.props.onRemovedFromTrip, e, o)
                                    },
                                    onClick: n.onClick,
                                    onError: n.onError
                                });
                                return c || N.a.error("Unable to determine item id for object ".concat(JSON.stringify(i), " and trip ").concat(e.id)), c
                            }
                            return "MOVE" === o ? m.createElement(Z, {
                                trip: e,
                                itemId: s,
                                onClick: function e(t) {
                                    n.onClick(), n.doCallback(n.props.onMovedToTrip, t, !0)
                                },
                                showBookmark: l,
                                onError: n.onError
                            }) : "SAVE" === o ? m.createElement(re, {
                                trip: e,
                                object: i,
                                onSave: function a(i, o) {
                                    t({
                                        modalSuccess: {
                                            element: "stat"
                                        }
                                    }), n.doCallback(n.props.onSavedToTrip, e, o)
                                },
                                onError: n.onError,
                                onClick: n.onClick
                            }) : ""
                        }), n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this;
                            return m.createElement(S.a, {
                                source: "trips",
                                pageAsContext: !0,
                                saveObject: this.props.saveObject
                            }, function(e) {
                                return m.createElement(G, {
                                    tripList: t.props.tripList,
                                    savedSet: t.props.savedSet,
                                    hasMore: t.props.hasMore,
                                    tripListBottom: t.props.tripListBottom,
                                    rowCreator: function n(a) {
                                        return t.rowCreator(a, e)
                                    },
                                    onCreateTrip: t.props.onCreateTrip,
                                    onPaginate: t.props.onPaginate,
                                    disabled: t.state.disabled
                                })
                            })
                        }
                    }]), t
                }(m.PureComponent),
                ce = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "TripStatsQuery"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "limit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "offset"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "reference"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "TripReferenceInput"
                                    }
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "loadSavedTrips"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Boolean"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "paginatedTrips"
                                },
                                name: {
                                    kind: "Name",
                                    value: "tripsPaginated"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "offset"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "offset"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "userId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "userId"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reference"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "reference"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trips"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "status"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photoId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photo"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photoSizes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "actionPermissions"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "canAddItem"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savedTrips"
                                },
                                name: {
                                    kind: "Name",
                                    value: "tripsForReference"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reference"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "reference"
                                        }
                                    }
                                }],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "loadSavedTrips"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 889
                    }
                };
            ce.loc.source = {
                body: "1da87a4a70e9"
            };
            var de = ce,
                ue = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "TripReducedStatsQuery"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "limit"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "offset"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            },
                            directives: []
                        }, {
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "String"
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "paginatedTrips"
                                },
                                name: {
                                    kind: "Name",
                                    value: "tripsPaginated"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "offset"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "offset"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "userId"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "userId"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasMore"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "trips"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "status"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photoId"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "photo"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "photoSizes"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "actionPermissions"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "canAddItem"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 508
                    }
                };
            ue.loc.source = {
                body: "919d039729d7"
            };
            var me = ue,
                pe = Object.freeze({
                    DEFAULT: function e() {
                        return Object(j.localize)("stat_modal_save_to_trip_v2")
                    },
                    CREATE: function e() {
                        return Object(j.localize)("stat_modal_create_a_trip_v2")
                    },
                    SELECT: function e() {
                        return Object(j.localize)("select_trip_header")
                    },
                    SELECT_CREATE: function e() {
                        return Object(j.localize)("stat_modal_create_a_trip_v2")
                    }
                }),
                ve = function e(t) {
                    var n = Object(_.p)(t.saveObject),
                        a = de,
                        i = "TripsStatQuery";
                    return Object(O.featureIsEnabled)("trips_stat_attraction_product_reduced_query") && "attractionProduct" === t.saveObject.type && (a = me, i = "TripsReducedStatQuery"), m.createElement(k.Query, {
                        query: a,
                        notifyOnNetworkStatusChange: !0,
                        fetchPolicy: "network-only",
                        displayName: i,
                        variables: {
                            offset: 0,
                            limit: 10,
                            userId: t.userId,
                            reference: n,
                            loadSavedTrips: !0
                        },
                        onCompleted: t.onQueryComplete
                    }, function(e) {
                        var n, a = e.data,
                            i = e.loading,
                            o = e.error,
                            r = e.refetch,
                            s = e.fetchMore,
                            l = (null == a ? void 0 : a.paginatedTrips) || {},
                            c = l.trips,
                            d = void 0 === c ? [] : c,
                            u = l.hasMore,
                            p = void 0 === u || u,
                            b = (a || {}).savedTrips,
                            f = void 0 === b ? [] : b;
                        i ? n = m.createElement(g.LoadingSpinner, {
                            size: "large"
                        }) : o && (n = m.createElement(h.LoadingErrorMessage, {
                            refetch: r
                        }));
                        var k = new Set(f.map(function(e) {
                                return e.id
                            })),
                            _ = {
                                loadingNode: n,
                                tripList: d,
                                saveSet: k,
                                hasMore: p,
                                getMoreTrips: function e() {
                                    return s({
                                        variables: {
                                            offset: (null == d ? void 0 : d.length) || 0,
                                            loadSavedTrips: !1
                                        },
                                        updateQuery: function e(t, n) {
                                            var a = n.fetchMoreResult;
                                            return a ? Object.assign({}, t, {
                                                paginatedTrips: {
                                                    trips: [].concat(Object(v.a)(t.paginatedTrips.trips), Object(v.a)(a.paginatedTrips.trips)),
                                                    hasMore: a.paginatedTrips.hasMore,
                                                    __typename: t.paginatedTrips.__typename
                                                },
                                                savedTrips: t.savedTrips
                                            }) : t
                                        }
                                    })
                                }
                            };
                        return t.children(_)
                    })
                },
                be = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "onModalClose", function() {
                            n.props.onClose(), n.setSplashLoad(!0)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "clearSplashLoad", function() {
                            n.setSplashLoad(!1)
                        }), n.state = {
                            splashLoad: !0
                        }, n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "setSplashLoad",
                        value: function e(t) {
                            this.state.splashLoad !== t && this.setState({
                                splashLoad: t
                            })
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = pe[this.props.overlayState](),
                                a = m.createElement(f.TitleBar, {
                                    iconName: "suitcase",
                                    displayType: "LEFT_ALIGN_GRAY"
                                }, n),
                                i = this.props,
                                o = i.loggedInUserId,
                                r = i.saveObject,
                                s = i.modalName;
                            return m.createElement(b.Modal, {
                                name: s,
                                header: a,
                                isFullBleed: !0,
                                onClose: this.onModalClose
                            }, m.createElement(p.Opener, {
                                name: s
                            }, function(e, n) {
                                return m.createElement(p.Closer, null, function(e) {
                                    return m.createElement(ve, {
                                        userId: o,
                                        saveObject: r,
                                        onQueryComplete: function e() {
                                            n && t.clearSplashLoad()
                                        }
                                    }, function(n) {
                                        return n.loadingNode && t.state.splashLoad ? m.createElement("div", {
                                            className: "trips-trip-flow-selector-STATModal__loadingContainer--1tP79"
                                        }, n.loadingNode) : t.content(e, n)
                                    })
                                })
                            }))
                        }
                    }, {
                        key: "content",
                        value: function e(t, n) {
                            var a = this,
                                i = this.props,
                                o = i.saveObject,
                                r = i.lastSavedItem,
                                s = i.trackingContext,
                                l = Object(_.q)(r),
                                c = m.createElement(S.a, {
                                    source: "trips",
                                    trackingContext: s,
                                    pageAsContext: !0
                                }, function(e) {
                                    return m.createElement("div", {
                                        className: "trips-trip-flow-selector-STATModal__modalPadding--36qa6"
                                    }, m.createElement(C, {
                                        object: o,
                                        onAddedToCreatedTrip: function n(i) {
                                            a.props.statCallback("ADD", "NEW", i, !0, !0), e({
                                                modalSuccess: {
                                                    element: "stat"
                                                }
                                            }), t()
                                        }
                                    }))
                                });
                            switch (this.props.overlayState) {
                                case "DEFAULT":
                                    return 0 === n.tripList.length ? c : m.createElement(le, {
                                        tripList: n.tripList,
                                        savedSet: n.saveSet,
                                        tripListBottom: n.loadingNode,
                                        onPaginate: n.getMoreTrips,
                                        hasMore: n.hasMore,
                                        saveObject: o,
                                        onCreateTrip: this.props.onCreateTripClicked,
                                        tripAction: "SAVE",
                                        onRemovedFromTrip: function e(n, i, o) {
                                            a.props.statCallback("REMOVE", "EXISTING", n, i, o), t()
                                        },
                                        onSavedToTrip: function e(n, i, o) {
                                            a.props.statCallback("ADD", "EXISTING", n, i, o), t()
                                        }
                                    });
                                case "CREATE":
                                    return c;
                                case "SELECT":
                                    return l ? m.createElement(le, {
                                        tripList: n.tripList,
                                        savedSet: n.saveSet,
                                        tripListBottom: n.loadingNode,
                                        onPaginate: n.getMoreTrips,
                                        hasMore: n.hasMore,
                                        saveObject: l,
                                        onCreateTrip: this.props.onCreateTripClicked,
                                        tripAction: "MOVE",
                                        onMovedToTrip: function e(n, i, o) {
                                            a.props.statCallback("MOVE", "EXISTING", n, i, o), t()
                                        },
                                        onRemovedFromTrip: function e(n, i, o) {
                                            a.props.statCallback("REMOVE", "EXISTING", n, i, o), t()
                                        }
                                    }) : "";
                                case "SELECT_CREATE":
                                    return r ? m.createElement("div", {
                                        className: "trips-trip-flow-selector-STATModal__modalPadding--36qa6"
                                    }, m.createElement(A, {
                                        item: r,
                                        onMovedToCreatedTrip: function e(n) {
                                            a.props.statCallback("MOVE", "NEW", n, !0, !0), t()
                                        }
                                    })) : c;
                                default:
                                    return ""
                            }
                        }
                    }]), t
                }(m.PureComponent);
            n.d(t, "b", function() {
                return he
            }), n.d(t, "a", function() {
                return _e
            });
            var fe = m.createContext(void 0),
                ke = fe.Consumer,
                ge = fe.Provider,
                he = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "localModalSuffix", "".concat(Math.random())), n.state = {
                            statProps: null,
                            openCount: 0,
                            openModal: function e() {}
                        }, n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "componentDidUpdate",
                        value: function e(t, n) {
                            this.state.openCount > n.openCount && this.state.openModal()
                        }
                    }, {
                        key: "setStatProps",
                        value: function e(t, n) {
                            var a = n ? {
                                openModal: n,
                                openCount: this.state.openCount + 1
                            } : {};
                            this.setState(Object(i.a)({
                                statProps: t
                            }, a))
                        }
                    }, {
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.state.statProps,
                                i = this.props,
                                o = i.children,
                                r = i.localStats,
                                s = n || r,
                                l = (s || {}).saveObject,
                                c = void 0 === l ? {} : l,
                                d = "save-to-a-trip-modal-".concat(c.id, "-").concat(c.type, "-").concat(this.localModalSuffix),
                                u = null === r ? "RemoteStatModal" : d;
                            return m.createElement(m.Fragment, null, s && m.createElement(be, Object(a.a)({}, s, {
                                modalName: u
                            })), m.createElement(p.Opener, {
                                name: u
                            }, function(e) {
                                return m.createElement(p.Closer, null, function(n) {
                                    var a = {
                                        name: u,
                                        open: e,
                                        close: n,
                                        setStatProps: t.setStatProps.bind(t)
                                    };
                                    return m.createElement(ge, {
                                        value: a
                                    }, o(a))
                                })
                            }))
                        }
                    }]), t
                }(m.PureComponent);
            Object(u.a)(he, "defaultProps", {
                localStats: null
            });
            var _e = function(e) {
                function t() {
                    var e, n;
                    Object(o.a)(this, t);
                    for (var a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                    return n = Object(s.a)(this, (e = Object(l.a)(t)).call.apply(e, [this].concat(i))), Object(u.a)(Object(d.a)(Object(d.a)(n)), "remoteProps", null), n
                }
                return Object(c.a)(t, e), Object(r.a)(t, [{
                    key: "displayChildren",
                    value: function e(t) {
                        var n = this;
                        return this.remoteProps = t, this.props.children(t.name, t.close, function e(a) {
                            var o = Object(i.a)({}, n.props.statProps, {
                                overlayState: a || n.props.statProps.overlayState
                            });
                            t.setStatProps(o, t.open)
                        }.bind(this))
                    }
                }, {
                    key: "componentDidUpdate",
                    value: function e(t) {
                        var n, a, i;
                        (null == t ? void 0 : null === (n = t.statProps) || void 0 === n ? void 0 : n.overlayState) !== (null === (a = this.props) || void 0 === a ? void 0 : null === (i = a.statProps) || void 0 === i ? void 0 : i.overlayState) && this.remoteProps && this.remoteProps.setStatProps(this.props.statProps)
                    }
                }, {
                    key: "render",
                    value: function e() {
                        var t = this;
                        return m.createElement(ke, null, function(e) {
                            return e ? t.displayChildren(e) : m.createElement(he, {
                                localStats: t.props.statProps
                            }, function(e) {
                                return t.displayChildren(e)
                            })
                        })
                    }
                }]), t
            }(m.PureComponent)
        },
        "./packages/trips/trip-toasts/trip-toasts.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/react/index.js"),
                i = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                o = n("./packages/common/i18n/i18n.jsx"),
                r = n("@ta/common.text"),
                s = n("./packages/common/routing/routing.jsx"),
                l = n("./packages/common/features/features.jsx"),
                c = n("./packages/common/tracking/tracking.jsx"),
                d = n("./packages/trips/tracking/impressions.jsx"),
                u = n("./packages/trips/tracking/interactions.jsx"),
                m = n("./packages/trips/trip-util/trip-util.jsx"),
                p = n("./packages/trips/graphql/Mutation/AddItemToTrip.gql");
            n.d(t, "c", function() {
                return g
            }), n.d(t, "b", function() {
                return h
            }), n.d(t, "a", function() {
                return _
            });
            var v = function e() {
                    var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                        i = Object(o.unescaped)(Object(r.EscapeHtml)(n));
                    return {
                        setPrefix: function l(e) {
                            return t = Object(o.unescaped)(e), this
                        },
                        asLink: function c(e) {
                            return i = a.createElement("a", {
                                className: "trips-trip-toasts-trip-toasts__tripNameLink--rbWg1",
                                href: Object(s.buildUrl)(e)
                            }, i), this
                        },
                        value: function d() {
                            return a.createElement(a.Fragment, null, !!t && t, !!i && i)
                        }
                    }
                },
                b = {
                    CREATED: function e(t) {
                        return Object(o.unescaped)(Object(o.localize)("create_trip_success_toast_with_bold", {
                            TripName: Object(r.EscapeHtml)(t)
                        }))
                    },
                    SAVED: function e(t) {
                        return Object(o.unescaped)(Object(o.localize)("stat_modal_saved_to_tripname_with_bold", {
                            TripName: Object(r.EscapeHtml)(t)
                        }))
                    }
                },
                f = function e(t, n, i) {
                    return a.createElement(c.Impression, {
                        source: "trips",
                        attributes: Object(d.c)({
                            element: n,
                            trip: i
                        })
                    }, t)
                },
                k = function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                        n = "Saves";
                    return Object(l.featureIsEnabled)("trips_2018") && (n = t ? "TripsWebview" : "Trips"), n
                },
                g = function e(t, n) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = function e() {},
                        l = k(i);
                    return [{
                        node: b[n](t && t.title ? t.title : ""),
                        actionText: Object(o.localize)("stat_modal_view_trip_v2"),
                        actionCallback: function e() {
                            r({
                                page: l,
                                tripId: t.id,
                                tripTitle: "PUBLIC" === t.status ? t.title : void 0
                            })
                        }
                    }, function e(n) {
                        return a.createElement(u.a, {
                            source: "trips",
                            pageAsContext: !0
                        }, function(e) {
                            return a.createElement(s.RouteConsumer, null, function(a) {
                                var i = a.navigate;
                                return r = function t(n) {
                                    e({
                                        elementClick: {
                                            element: "saved_viewTrip"
                                        }
                                    }), i(n)
                                }, f(n, "savedToast", t)
                            })
                        })
                    }]
                },
                h = function e(t, n, r) {
                    var s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                        c = function e() {},
                        d = k(s);
                    return [{
                        node: v(t.title || "").setPrefix(Object(o.localize)("stat_modal_removed_from_tripname_with_bold", {
                            TripName: ""
                        })).asLink({
                            page: d,
                            tripId: t.id
                        }).value(),
                        actionText: Object(o.localize)("stat_modal_undo"),
                        actionCallback: function e() {
                            c({
                                variables: {
                                    tripId: t.id,
                                    referenceId: "".concat(n.id),
                                    referenceType: n.type,
                                    allowDuplicates: !1,
                                    socialReference: Object(l.featureIsEnabled)("social_at_referencing_profile_links")
                                }
                            }).then(function() {
                                r && r(t)
                            })
                        }
                    }, function e(o) {
                        return a.createElement(u.a, {
                            source: "trips",
                            pageAsContext: !0
                        }, function(e) {
                            return a.createElement(i.Mutation, {
                                mutation: p.a,
                                update: function e(t) {
                                    return Object(m.r)(t, n)
                                }
                            }, function(n) {
                                return c = function t(a) {
                                    return e({
                                        elementClick: {
                                            element: "unsave_undo"
                                        }
                                    }), n(a)
                                }, f(o, "unsaveToast", t)
                            })
                        })
                    }]
                },
                _ = function e(t, n) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = function e() {},
                        s = k(i);
                    return [{
                        node: v(t && t.title ? t.title : "").setPrefix(Object(o.localize)("stat_modal_saved_to_tripname_with_bold", {
                            TripName: ""
                        })).asLink({
                            page: s,
                            tripId: t.id
                        }).value(),
                        actionText: Object(o.localize)("stat_modal_change"),
                        closeOnAction: !0,
                        actionCallback: function e() {
                            r(), n()
                        },
                        timeout: 8e3
                    }, function e(n) {
                        return a.createElement(u.a, {
                            source: "trips",
                            pageAsContext: !0
                        }, function(e) {
                            return r = function t() {
                                e({
                                    elementClick: {
                                        element: "quickSave_change"
                                    }
                                })
                            }, f(n, "savedToast", t)
                        })
                    }]
                }
        },
        "./packages/trips/trip-util/trip-util.jsx": function(e, t, n) {
            "use strict";
            var a = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                i = n("./packages/common/global/global.jsx"),
                o = n("./packages/common/features/features.jsx"),
                r = n("./packages/trips/graphql/Fragment/TripItemStatisticFields.fragment.gql"),
                s = n("./packages/trips/graphql/Query/statistics/LocationStatistics.gql"),
                l = n("./packages/trips/graphql/Query/statistics/AttractionStatistics.gql"),
                c = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "ForumStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Int"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "posts"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "postIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 134
                    }
                };
            c.loc.source = {
                body: "7cf63c89b019"
            };
            var d = c,
                u = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "TripitemStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Int"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "tripItems"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "itemIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 141
                    }
                };
            u.loc.source = {
                body: "243f40117611"
            };
            var m = u,
                p = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "LinkPostStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Long"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "linkPosts"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "linkPostIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 146
                    }
                };
            p.loc.source = {
                body: "631f413f1333"
            };
            var v = p,
                b = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "ReviewStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Int"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "reviews"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "reviewIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 139
                    }
                };
            b.loc.source = {
                body: "7cb7814beb6b"
            };
            var f = b,
                k = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "PhotoStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Int"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "photos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "photoIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "statuses"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 186
                    }
                };
            k.loc.source = {
                body: "14ab4a65441f"
            };
            var g = k,
                h = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "VideoStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Int"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "videoIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 136
                    }
                };
            h.loc.source = {
                body: "8cb2bc5ef07d"
            };
            var _ = h,
                j = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "RepostStatistics"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                }
                            },
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "ListType",
                                    type: {
                                        kind: "NonNullType",
                                        type: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Long"
                                            }
                                        }
                                    }
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: {
                                    kind: "Name",
                                    value: "savesObjects"
                                },
                                name: {
                                    kind: "Name",
                                    value: "reposts"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "repostIds"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "ids"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "socialStatistics"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSaved"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 140
                    }
                };
            j.loc.source = {
                body: "3d9ccd0784f6"
            };
            var S = j;
            n.d(t, "h", function() {
                return y
            }), n.d(t, "j", function() {
                return N
            }), n.d(t, "n", function() {
                return O
            }), n.d(t, "i", function() {
                return E
            }), n.d(t, "b", function() {
                return I
            }), n.d(t, "f", function() {
                return C
            }), n.d(t, "c", function() {
                return F
            }), n.d(t, "k", function() {
                return T
            }), n.d(t, "d", function() {
                return w
            }), n.d(t, "l", function() {
                return x
            }), n.d(t, "e", function() {
                return P
            }), n.d(t, "r", function() {
                return A
            }), n.d(t, "s", function() {
                return R
            }), n.d(t, "g", function() {
                return B
            }), n.d(t, "q", function() {
                return U
            }), n.d(t, "p", function() {
                return W
            }), n.d(t, "a", function() {
                return H
            }), n.d(t, "o", function() {
                return q
            }), n.d(t, "m", function() {
                return G
            });
            var y = function e(t) {
                    return t.photo && t.photo.photoSizes[t.photo.photoSizes.length - 1] ? t.photo.photoSizes[t.photo.photoSizes.length - 1] : null
                },
                N = function e(t) {
                    var n = t.owner,
                        a = n ? [n] : [];
                    if (Object(o.featureIsEnabled)("trips_2018_collab")) {
                        var i = (t.collaborators || []).map(function(e) {
                            return e.user
                        }).filter(function(e) {
                            return e
                        });
                        a = a.concat(i)
                    }
                    return a
                },
                O = function e(t) {
                    return N(t).some(function(e) {
                        return e.isMe
                    })
                },
                E = function e(t, n) {
                    return Object(o.featureIsEnabled)("trips_2018_collab") ? t.actionPermissions || {} : {
                        canAddCollaborators: n,
                        canAddItem: n,
                        canChangePrivacy: n,
                        canDelete: n,
                        canEdit: n,
                        canUploadCoverPhoto: t.actionPermissions && t.actionPermissions.canUploadCoverPhoto && n
                    }
                },
                I = function e(t, n) {
                    return Object(o.featureIsEnabled)("trips_2018_collab") ? t.actionPermissions || {} : {
                        canRemove: n
                    }
                },
                C = function e(t, n) {
                    return Object(o.featureIsEnabled)("trips_2018_collab") ? t.actionPermissions || {} : {
                        canAddComment: n,
                        canEdit: n,
                        canRemove: n
                    }
                },
                F = function e(t, n) {
                    return Object(o.featureIsEnabled)("trips_2018_collab") ? t.actionPermissions || {} : {
                        canEdit: n,
                        canRemove: n
                    }
                },
                T = function e(t, n, a, i) {
                    var o = N(t);
                    if (o = o.slice(0, n), a > 0) {
                        var r = 0;
                        o = o.filter(function(e) {
                            return (r = e.displayName.length + r) < a
                        })
                    }
                    return i && (o = o.reverse()), o
                },
                w = function e(t, n, a) {
                    var i = a && a.id,
                        r = Object(o.featureIsEnabled)("trips_2018_collab") ? function() {
                            return !0
                        } : function(e) {
                            return e.author.id === i || "ITEM" === e.targetType && e.targetId !== t.id
                        };
                    return (n || []).filter(r).sort(function e(t, n) {
                        return t.created > n.created ? 1 : -1
                    })
                },
                x = function e(t) {
                    var n;
                    return null == t ? void 0 : null === (n = t.owner) || void 0 === n ? void 0 : n.isMe
                },
                P = function e(t, n) {
                    return (t.items || []).find(function(e) {
                        var t, a = e.reference && e.reference.type && e.reference.type.toLowerCase(),
                            i = null === (t = e.reference) || void 0 === t ? void 0 : t.id,
                            o = n.type.toLowerCase(),
                            r = n.id.toString(),
                            s = n.originalObject && n.originalObject.type && n.originalObject.type.toLowerCase(),
                            l = n.originalObject && n.originalObject.id.toString();
                        return a === o && i === r || a === s && i === l
                    })
                };

            function L(e, t, n, i) {
                if ("savesItem" === t.type) {
                    var o = "TripItem:".concat(t.id),
                        s = e.readFragment({
                            id: o,
                            fragment: r.a,
                            fragmentName: "TripItemStatisticFields"
                        }),
                        l = (s && s.socialStatistics || {}).tripCount,
                        c = i(void 0 === l ? n : l);
                    e.writeFragment({
                        id: o,
                        fragment: r.a,
                        fragmentName: "TripItemStatisticFields",
                        data: {
                            __typename: "TripItem",
                            id: t.id,
                            socialStatistics: Object(a.a)({}, s.socialStatistics, {
                                isSaved: c > 0,
                                tripCount: c,
                                __typename: "SocialStatistics"
                            })
                        }
                    })
                }
            }
            var A = function e(t, n) {
                    return L(t, n, 0, function(e) {
                        return e + 1
                    })
                },
                R = function e(t, n) {
                    return L(t, n, 1, function(e) {
                        return e - 1
                    })
                },
                M = {
                    locationinformation: "location",
                    attractionproductinformation: "attractionProduct",
                    forumpost: "post",
                    tripitem: "savesItem",
                    linkpost: "link",
                    photo: "photo",
                    video: "video",
                    review: "review",
                    repost: "repost"
                },
                D = function e(t) {
                    return {
                        statQuery: t
                    }
                },
                z = Object.freeze({
                    location: D(s.a),
                    attractionProduct: D(l.a),
                    post: D(d),
                    savesItem: D(m),
                    link: D(v),
                    review: D(f),
                    photo: D(g),
                    video: D(_),
                    repost: D(S)
                }),
                B = function e(t) {
                    return M[t.toLowerCase()]
                },
                V = ["LocationInformation", "AttractionProductInformation", "ForumPost", "LinkPost", "Review", "Photo", "Video", "Repost"],
                U = function e(t) {
                    if (!t) return null;
                    var n = Object(i.getObjectId)(t),
                        a = B(t.__typename);
                    if (n && a) {
                        if (V.includes(t.__typename)) return {
                            type: a,
                            id: n
                        };
                        if ("TripItem" === t.__typename && t.reference && t.reference.id && t.reference.type) return {
                            type: a,
                            id: n,
                            originalObject: {
                                id: t.reference.id,
                                type: "attractionproduct" === t.reference.type ? "attractionProduct" : t.reference.type
                            }
                        }
                    }
                    return null
                },
                W = function e(t) {
                    return {
                        id: "".concat(t.id),
                        type: t.type
                    }
                },
                H = function e(t, n) {
                    var a = n ? "?itemId=".concat(n) : "";
                    return "/Trips/".concat(t).concat(a)
                },
                q = function e(t) {
                    var n = z[t.type];
                    return n ? t && {
                        query: n.statQuery,
                        variables: {
                            ids: [t.id]
                        }
                    } : null
                },
                G = function e(t) {
                    var n, a;
                    return ["LinkPost", "Photo", "Review", "Video"].includes(null == t ? void 0 : null === (n = t.object) || void 0 === n ? void 0 : null === (a = n.repostedObject) || void 0 === a ? void 0 : a.__typename)
                }
        },
        "./roots/cpm/ad-target/ad-target.jsx": function(e, t, n) {
            "use strict";
            n.r(t),
                function(e) {
                    var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                        i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                        o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                        r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                        s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                        l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                        c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                        d = n("./node_modules/react/index.js"),
                        u = n("./roots/cpm/ad-target/ad-target.less"),
                        m = {
                            "1x1": "ad iab_",
                            "160x600": "iab_supSky",
                            "300x250": "iab_medRec",
                            "300x600": "iab_medRec",
                            "728x90": "iab_leaBoa",
                            "320x50": "inline_ad_wrapper",
                            fluid: "iab_fluid"
                        };

                    function p(e) {
                        return "true" === String(e).toLowerCase()
                    }
                    var v = function(t) {
                        function n() {
                            var e, t;
                            Object(a.a)(this, n);
                            for (var i = arguments.length, s = new Array(i), d = 0; d < i; d++) s[d] = arguments[d];
                            return t = Object(o.a)(this, (e = Object(r.a)(n)).call.apply(e, [this].concat(s))), Object(c.a)(Object(l.a)(Object(l.a)(t)), "adId", void 0), t
                        }
                        return Object(s.a)(n, t), Object(i.a)(n, [{
                            key: "componentDidMount",
                            value: function t() {
                                if (!p(this.props.pageLoadRender)) {
                                    var n = this.adId;
                                    e.require(["trjs!ta/Core/TA.FireEvent"], function(e) {
                                        e.fireEvent("ads.queueForInjection", {
                                            elemIds: [n],
                                            isNewContext: !1
                                        })
                                    })
                                }
                            }
                        }, {
                            key: "shouldComponentUpdate",
                            value: function e(t) {
                                return this.props.inactive !== t.inactive
                            }
                        }, {
                            key: "render",
                            value: function e() {
                                var t = function n(e) {
                                        var t = e.size.toLowerCase().split("-")[0],
                                            n = [m[t] || ""];
                                        return e.additionalWrapperClass && n.push(e.additionalWrapperClass), n.join(" ")
                                    }(this.props),
                                    a = function i(e) {
                                        var t = ["gptAd"];
                                        return p(e.inactive) && t.push("inactive"), p(e.pageLoadRender) || t.push("delayAd"), e.centered && t.push(u.a.centered), e.additionalClass && t.push(e.additionalClass), t.join(" ")
                                    }(this.props),
                                    o = function r(e) {
                                        var t = e.size.toLowerCase().split("-"),
                                            n = [];
                                        return t.forEach(function(e, t, a) {
                                            n.push(a[t].split("x").map(Number))
                                        }), 1 === n.length ? JSON.stringify(n[0]) : JSON.stringify(n)
                                    }(this.props),
                                    s = this.props.size.toLowerCase(),
                                    l = this.props.position ? "-".concat(this.props.position).toLowerCase() : "";
                                return this.adId = "gpt-ad-".concat(s).concat(l), d.createElement("div", {
                                    className: t
                                }, d.createElement("div", {
                                    id: "gpt-ad-".concat(s).concat(l),
                                    className: a,
                                    "data-size": o
                                }))
                            }
                        }]), n
                    }(d.Component);
                    Object(c.a)(v, "defaultProps", {
                        position: "",
                        additionalClass: "",
                        additionalWrapperClass: "",
                        pageLoadRender: !0,
                        inactive: !1,
                        centered: !1
                    }), t.default = v
                }.call(this, n("./node_modules/webpack/buildin/global.js"))
        },
        "./roots/cpm/ad-target/ad-target.less": function(e, t, n) {
            "use strict";
            t.a = {
                centered: "cpm-ad-target-ad-target__centered--3IH4b"
            }
        },
        "./roots/cpm/home-page-ad-wrapper/home-page-ad-wrapper.jsx": function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                d = n("./node_modules/react/index.js"),
                u = n("./roots/cpm/ad-target/ad-target.jsx"),
                m = n("./packages/common/features/features.jsx");
            n.d(t, "default", function() {
                return p
            });
            var p = function(e) {
                function t() {
                    var e;
                    return Object(a.a)(this, t), e = Object(o.a)(this, Object(r.a)(t).call(this)), Object(c.a)(Object(l.a)(Object(l.a)(e)), "wrapRef", void 0), e.state = {
                        enabled: !1
                    }, e.wrapRef = d.createRef(), e
                }
                return Object(s.a)(t, e), Object(i.a)(t, [{
                    key: "componentDidMount",
                    value: function e() {
                        Object(m.featureIsEnabled)("home_page_sticky_ads") && this.wrapRef && this.wrapRef.current && this.wrapRef.current.offsetWidth >= 250 && this.setState({
                            enabled: !0
                        })
                    }
                }, {
                    key: "render",
                    value: function e() {
                        return this.state.enabled ? (require(["trjs!utils/ScrollInContainer"], function(e) {
                            var t = new e({
                                    topMargin: 12,
                                    bottomMargin: 20,
                                    topDodgeFixed: '[class^="brand-header-GlobalNav"]',
                                    bottomAnchor: ".customSelection",
                                    topAnchor: ".ui_card.section:nth-child(2)",
                                    stickySide: "center"
                                }),
                                n = document.querySelector(".social_home_feed .ui_column.is-3"),
                                a = document.querySelector(".gptAd");
                            t.init(n, a)
                        }), d.createElement("div", {
                            className: "".concat("cpm-home-page-ad-wrapper-home-page-ad-wrapper__homePageAdWrapper--1K63v"),
                            ref: this.wrapRef
                        }, d.createElement(u.default, {
                            size: "300x250",
                            centered: !0
                        }))) : d.createElement("div", {
                            className: "".concat("cpm-home-page-ad-wrapper-home-page-ad-wrapper__homePageAdWrapper--1K63v"),
                            ref: this.wrapRef
                        }, d.createElement(u.default, {
                            size: "300x250",
                            centered: !0,
                            inactive: !0
                        }))
                    }
                }]), t
            }(d.Component)
        },
        "./roots/social/home/Home.jsx": function(e, t, n) {
            "use strict";
            n.r(t);
            var a = n("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = n("./node_modules/@babel/runtime/helpers/esm/objectSpread.js"),
                o = n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),
                r = n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),
                s = n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),
                l = n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),
                c = n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),
                d = n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),
                u = n("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),
                m = n("./node_modules/react/index.js"),
                p = n("./node_modules/react-apollo/react-apollo.browser.umd.js"),
                v = n("./packages/common/api/api.jsx"),
                b = n("./packages/common/features/features.jsx"),
                f = n("./packages/common/routing/routing.jsx"),
                k = n("./node_modules/react-redux/es/index.js"),
                g = n("./packages/common/i18n/i18n.jsx"),
                h = n("./packages/public/content-uploader/link-uploader/LinkPostUploader.jsx"),
                _ = n("@ta/social.ugc-actions"),
                j = n("@ta/media.upload"),
                S = n("./packages/social/sections/UgcActionSection.jsx"),
                y = function e(t) {
                    var n = t.permissions,
                        a = t.permissionsLoading,
                        i = t.fullWidth,
                        o = t.triggerFeedRefresh,
                        r = t.isLoggedIn,
                        s = Object(b.featureIsEnabled)("social_link_posting_enabled"),
                        l = Object(b.featureIsEnabled)("media_video_upload_enabled"),
                        c = Object(b.featureIsEnabled)("media_photo_upload_enabled"),
                        d = [];
                    return Object(b.featureIsEnabled)("social_feedback_enabled") && d.push(Object(_.ugcActionMapper)("Feedback")), l && n && n.canUploadVideo && d.push({
                        label: Object(g.localize)("ugc_uploader_video_v3"),
                        icon: "video-fill",
                        trackingName: "POST_VIDEOS",
                        name: "video-uploader",
                        overlay: function e() {
                            return m.createElement(j.MediaUploaderModal, {
                                mediaType: "video",
                                modalName: "video-uploader",
                                linkUploaderModalName: "link-uploader",
                                onSubmit: o,
                                pid: 40488
                            })
                        }
                    }), c && (Object(b.featureIsEnabled)("enable_post_photo_ugc_for_logout_user") || (null == n ? void 0 : n.canPostPhoto)) && d.push({
                        label: Object(g.localize)("ugc_uploader_photo_v3"),
                        icon: "camera-fill",
                        name: "photo-uploader",
                        trackingName: "POST_PHOTOS",
                        pid: _.LoginPID.Photo,
                        overlay: function e() {
                            return m.createElement(j.MediaUploaderModal, {
                                mediaType: "photo",
                                modalName: "photo-uploader",
                                linkUploaderModalName: "link-uploader",
                                onSubmit: o,
                                pid: 40488
                            })
                        }
                    }), Object(b.featureIsEnabled)("social_war_enabled") && (!r || a || n && n.canWriteReview) && d.push(Object(_.ugcActionMapper)("Review")), s && n && n.canPostLink && d.push({
                        label: Object(g.localize)("ugc_uploader_linkPost_v3"),
                        icon: "link",
                        name: "link-uploader",
                        trackingName: "POST_LINKS",
                        overlay: function e() {
                            return m.createElement(h.a, {
                                modalName: "link-uploader",
                                onSubmit: o,
                                displaySuccessModal: !1
                            })
                        }
                    }), i ? m.createElement(_.SocialFab, {
                        actions: d
                    }) : m.createElement(S.a, {
                        actions: d
                    })
                };
            y.defaultProps = {
                isLoggedIn: !1
            };
            var N = Object(k.connect)(function(e) {
                    return {
                        isLoggedIn: !!e.auth.loggedInUserId
                    }
                })(y),
                O = n("./packages/common/logging/logging.jsx"),
                E = n.n(O),
                I = n("@ta/styleguide.avatar"),
                C = n("@ta/social.cover-photo"),
                F = n("@ta/social.block-button"),
                T = n("@ta/social.feed"),
                w = n("@ta/social.member-common"),
                x = n("./packages/social/member/MemberStats.jsx"),
                P = n("./packages/social/member/MemberLink.jsx"),
                L = n("./packages/social/member/MemberBio.jsx"),
                A = n("./packages/social/member/DestinationExpertInfo.jsx"),
                R = n("@ta/social.skeletons"),
                M = n("@ta/tracking.interactions"),
                D = n("@ta/common.cdn"),
                z = function e() {
                    return m.createElement("div", {
                        className: "ui_card message ".concat("social-sections-profile-ProfileSectionNarrowLogout__sectionLogout--2xZdK")
                    }, m.createElement(D.CdnImage, {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__sectionLogoutImage--jtVHf",
                        src: "/img2/social/Avatar_stock_PNG_v2.png",
                        alt: ""
                    }), m.createElement("div", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__sectionLogoutTitle--2DfDn"
                    }, Object(g.unescaped)(Object(g.localize)("social_left_hand_rail_value_prop_bold"))), m.createElement("ul", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__sectionLogoutList--2tQCT"
                    }, m.createElement("li", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listItemContainer--3mZqU"
                    }, m.createElement("span", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listCircle--ipESw"
                    }), m.createElement("div", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listText--OXnWH"
                    }, Object(g.unescaped)(Object(g.localize)("onboarding_social_brand_splash_native_personal_advice_bold_v2")))), m.createElement("li", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listItemContainer--3mZqU"
                    }, m.createElement("span", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listCircle--ipESw"
                    }), m.createElement("div", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listText--OXnWH"
                    }, Object(g.unescaped)(Object(g.localize)("left_rail_social_brand_splash_native_easily_find_bold_v2")))), m.createElement("li", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listItemContainer--3mZqU"
                    }, m.createElement("span", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listCircle--ipESw"
                    }), m.createElement("div", {
                        className: "social-sections-profile-ProfileSectionNarrowLogout__listText--OXnWH"
                    }, Object(g.unescaped)(Object(g.localize)("onboarding_social_brand_splash_native_everything_need_1_bold")), Object(g.unescaped)(Object(g.localize)("onboarding_social_brand_splash_native_everything_need_2"))))))
                },
                B = n("./packages/social/feed/MemberProfile.fragment.gql"),
                V = {
                    kind: "Document",
                    definitions: [{
                        kind: "FragmentDefinition",
                        name: {
                            kind: "Name",
                            value: "PermissionFields"
                        },
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "PermissionSet"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "video"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 55
                    }
                };
            V.loc.source = {
                body: "11846faf6d5f"
            };
            var U = V,
                W = {
                    kind: "Document",
                    definitions: [{
                        kind: "OperationDefinition",
                        operation: "query",
                        name: {
                            kind: "Name",
                            value: "SingleProfile"
                        },
                        variableDefinitions: [{
                            kind: "VariableDefinition",
                            variable: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            },
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            },
                            directives: []
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "memberProfiles"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "userIds"
                                    },
                                    value: {
                                        kind: "ListValue",
                                        values: [{
                                            kind: "ObjectValue",
                                            fields: [{
                                                kind: "ObjectField",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "userId"
                                                    }
                                                }
                                            }]
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "MemberForProfile"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "permissions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "PermissionFields"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }],
                    loc: {
                        start: 0,
                        end: 255
                    }
                };
            W.loc.source = {
                body: "4e98a0008efc"
            };
            var H = {};

            function q(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !H[t] && (H[t] = !0, !0)
                })
            }
            W.definitions = W.definitions.concat(q(B.a.definitions)), W.definitions = W.definitions.concat(q(U.definitions));
            var G = W,
                K = function e(t) {
                    var n = t.children,
                        i = t.isSingleObject,
                        o = t.profile,
                        r = t.buttonBlock;
                    return m.createElement("div", {
                        className: "".concat("social-sections-profile-ProfileSectionNarrow__section--x9Tx0", " ").concat(i ? "ui_card section" : "")
                    }, m.createElement(C.CoverPhotoImage, Object(a.a)({
                        userId: o.userId,
                        isMe: o.isMe,
                        isNarrow: !0
                    }, o.coverPhoto)), m.createElement(M.InteractionLogger, null, function(e) {
                        var t;
                        return m.createElement("div", {
                            className: "social-sections-profile-ProfileSectionNarrow__member_block--3FczJ",
                            onClick: function t(n) {
                                return e(n, "profileSectionClick")
                            }
                        }, m.createElement(I.Avatar, {
                            photo: o.avatar,
                            size: "large",
                            withBorder: !0,
                            href: null == o ? void 0 : null === (t = o.route) || void 0 === t ? void 0 : t.url,
                            target: "_self"
                        }), m.createElement("div", {
                            className: "social-sections-profile-ProfileSectionNarrow__align_to_bottom--2Aivn"
                        }, m.createElement(w.MemberName, {
                            profile: o,
                            displayNameClassName: "social-sections-profile-ProfileSectionNarrow__display_name--1_JJ3"
                        })))
                    }), !o.isMe && m.createElement(F.ProfilePublicSocialButtonBlock, {
                        profile: o
                    }), r, m.createElement(x.a, {
                        profile: o,
                        isNarrow: !0
                    }), m.createElement(w.MemberHometown, {
                        hometown: o.hometown
                    }), m.createElement(P.a, {
                        website: o.website
                    }), m.createElement(L.a, {
                        bio: o.bio
                    }), m.createElement(A.a, {
                        expertForums: o.expertForums
                    }), n)
                };
            K.defaultProps = {
                isSingleObject: !1,
                buttonBlock: null,
                children: null
            };
            var Q = function e(t) {
                var n = t.isSingleObject,
                    a = t.userId,
                    i = t.children,
                    o = t.buttonBlock,
                    r = t.onError;
                return a ? m.createElement(T.QueryWithPartialRefetchUntilReactApollo220Release, {
                    query: G,
                    variables: {
                        userId: a
                    },
                    onError: r
                }, function(e) {
                    var t = e.loading,
                        a = e.error,
                        r = e.data,
                        s = void 0 === r ? {} : r;
                    return a && E.a.error(a), t ? m.createElement(R.IntroBlockLoadingSkeleton, null) : s.memberProfiles && s.memberProfiles[0] ? m.createElement(K, {
                        isSingleObject: n,
                        profile: s.memberProfiles[0],
                        buttonBlock: o
                    }, i) : null
                }) : m.createElement(z, null)
            };
            Q.defaultProps = {
                buttonBlock: null,
                children: null,
                onError: void 0
            };
            var Y = Q,
                X = n("@ta/common.authz"),
                J = n("@ta/loading.error"),
                Z = n("@ta/social.educational-tooltips"),
                $ = n("./packages/trips/trip-flow-selector/RemoteStatModal.jsx"),
                ee = n("@ta/social.suggested-followees"),
                te = n("./roots/cpm/home-page-ad-wrapper/home-page-ad-wrapper.jsx"),
                ne = n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),
                ae = n("./packages/events/window-scroll/WindowScroll.jsx"),
                ie = n("@ta/social.tabs"),
                oe = n("@ta/common.error-handling"),
                re = n("@ta/social.feed-filter"),
                se = n("./packages/social/feed-ui/SocialActivityFeed.jsx"),
                le = {
                    namespace: "mixer"
                },
                ce = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "firstPage", void 0), Object(u.a)(Object(d.a)(Object(d.a)(n)), "feedIdToRestore", void 0), Object(u.a)(Object(d.a)(Object(d.a)(n)), "topOfFeedRef", m.createRef()), n.firstPage = !0, n.feedIdToRestore = e.feedIdToRestore, n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = "TOURISM" === this.props.queryPlacement ? Object(re.getAllowedTourismTypes)(this.props.allowedTypes) : Object(re.getAllowedTypes)(this.props.allowedTypes),
                                a = {
                                    userId: this.props.loggedInUserId,
                                    isMe: !0
                                };
                            return m.createElement(oe.ErrorBoundary, null, m.createElement(J.RenderErrorBanner, null, function(e) {
                                return m.createElement(M.TrackingNamespaceContext.Provider, {
                                    value: le
                                }, m.createElement(T.QueryWithPartialRefetchUntilReactApollo220Release, {
                                    query: T.MixerAPIQuery,
                                    errorPolicy: "all",
                                    variables: {
                                        placement: t.props.queryPlacement ? t.props.queryPlacement : t.props.placement,
                                        locationId: t.props.locationId,
                                        sessionType: Object(T.sessionType)(t.props.viewportCategory),
                                        puid: t.props.puid,
                                        allowedTypes: n,
                                        latitude: t.props.latitude || null,
                                        longitude: t.props.longitude || null,
                                        reset: !t.feedIdToRestore,
                                        restoreFromFeedId: t.feedIdToRestore,
                                        socialReference: Object(b.featureIsEnabled)("social_at_referencing_profile_links"),
                                        ipGeo: t.props.ipGeo
                                    },
                                    onError: e
                                }, function(e) {
                                    var i = e.loading,
                                        o = e.error,
                                        r = e.data,
                                        s = void 0 === r ? {} : r,
                                        l = e.refetch,
                                        c = e.fetchMore;
                                    return o && E.a.error("Error fetching home feed: ", o), i ? m.createElement(R.FeedLoadingSkeleton, {
                                        numSections: 4
                                    }) : m.createElement("div", {
                                        ref: t.topOfFeedRef
                                    }, Object(b.featureIsEnabled)("social_home_ideas_from_community") && t.props.loggedInUserId ? m.createElement("div", {
                                        className: "social-home-HomeMixerFeed__ideas_from_community--3d5vy"
                                    }, Object(g.localize)("home_feed_ideas_from_the_community")) : null, m.createElement(se.a, {
                                        userId: t.props.loggedInUserId,
                                        member: a,
                                        socialFeed: s.socialFeed,
                                        refetch: l,
                                        error: o,
                                        fetchMore: c,
                                        mixerPlacement: t.props.placement,
                                        allowedTypes: n,
                                        locationId: t.props.locationId,
                                        loggedInUserId: t.props.loggedInUserId,
                                        viewportCategory: t.props.viewportCategory,
                                        puid: t.props.puid,
                                        feedIdToRestore: t.feedIdToRestore,
                                        reset: t.firstPage || s.socialFeed.feedWasReset,
                                        sessionType: Object(T.sessionType)(t.props.viewportCategory),
                                        newContentSubmittedTimestamp: t.props.newContentSubmittedTimestamp,
                                        loggedInMemberAuthorization: s.authzInfo
                                    }), m.createElement(Z.HomeFeedScrollPrompt, {
                                        elementToScrollTo: t.topOfFeedRef,
                                        feedImpressionId: s && s.socialFeed && s.socialFeed.impressionId
                                    }), m.createElement(Z.ScopedHomeLoggedOutUsersLoginBar, {
                                        topOfFeed: t.topOfFeedRef,
                                        feedImpressionId: s && s.socialFeed && s.socialFeed.impressionId
                                    }), m.createElement(Z.CheckNewFeed, {
                                        topOfFeed: t.topOfFeedRef,
                                        reloadFeedCallback: l,
                                        placement: t.props.placement,
                                        puid: t.props.puid,
                                        locationId: t.props.locationId,
                                        latitude: t.props.latitude,
                                        longitude: t.props.longitude,
                                        feedIdToRestore: t.feedIdToRestore,
                                        allowedTypes: t.props.allowedTypes,
                                        ipGeo: t.props.ipGeo
                                    }))
                                }))
                            }))
                        }
                    }]), t
                }(m.Component),
                de = {
                    placeholder: "social-home-TabbedHomeMixerFeed__placeholder--33POO",
                    tabs: "social-home-TabbedHomeMixerFeed__tabs--14_ng",
                    fixed: "social-home-TabbedHomeMixerFeed__fixed--354Bj",
                    threeRows: "social-home-TabbedHomeMixerFeed__threeRows--AEeQ1"
                },
                ue = function(e) {
                    function t(e) {
                        var n;
                        return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "getClass", function() {
                            if ("MOBILE" === n.props.viewportCategory && n.tabsRef.current) {
                                var e = n.tabsRef.current.getBoundingClientRect(),
                                    t = n.previousPosition;
                                if (n.previousPosition = e.top, e.top < 5) {
                                    if (Object(b.featureIsEnabled)("ml_home_sticky_tab_3_rows")) return "".concat(de.tabs, " ").concat(de.fixed, " ").concat(de.threeRows);
                                    if (Object(b.featureIsEnabled)("ml_home_sticky_tab_mixed") && e.top > t) return "".concat(de.tabs, " ").concat(de.fixed, " ").concat(de.threeRows)
                                }
                                if (e.top < 50) {
                                    if (Object(b.featureIsEnabled)("ml_home_sticky_tab_2_rows")) return "".concat(de.tabs, " ").concat(de.fixed);
                                    if (Object(b.featureIsEnabled)("ml_home_sticky_tab_mixed") && e.top <= t) return "".concat(de.tabs, " ").concat(de.fixed)
                                }
                            }
                            return de.tabs
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "changeTabCallback", function(e) {
                            n.props.changeTabCallback && n.props.changeTabCallback(e), "MOBILE" === n.props.viewportCategory && n.previousPosition < 0 && setTimeout(function() {
                                n.scrollToTopOfFeed()
                            }, 50)
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "scrollToTopOfFeed", function() {
                            n.tabsRef.current && (n.tabsRef.current.scrollIntoView({
                                block: "start"
                            }), window.scrollBy(0, -50))
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "stickyTabsEnabled", function() {
                            return n.props.locationId > 1 && (Object(b.featureIsEnabled)("ml_home_sticky_tab_2_rows") || Object(b.featureIsEnabled)("ml_home_sticky_tab_3_rows") || Object(b.featureIsEnabled)("ml_home_sticky_tab_mixed"))
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "updateTabPosition", function() {
                            var e = n.getClass();
                            e !== n.state.tabsClass && n.setState({
                                tabsClass: e
                            })
                        }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "previousPosition", -1), Object(u.a)(Object(d.a)(Object(d.a)(n)), "tabsRef", m.createRef()), n.state = {
                            tabsClass: n.getClass()
                        }, n
                    }
                    return Object(c.a)(t, e), Object(r.a)(t, [{
                        key: "render",
                        value: function e() {
                            var t = this,
                                n = this.props,
                                i = n.feedIdToRestore,
                                o = Object(ne.a)(n, ["feedIdToRestore"]);
                            return 1 !== this.props.locationId && Object(b.featureIsEnabled)("ml_home_tourism_about_tab") ? m.createElement(M.InteractionLogger, null, function(e) {
                                var n = [],
                                    r = Object(g.localize)("mixer_home_feed");
                                n.push(m.createElement(ie.SocialTab, {
                                    key: "home_tab_".concat(Math.random()),
                                    isActive: "home" === t.props.tab,
                                    label: m.createElement(ie.SocialLabel, {
                                        text: r
                                    }),
                                    socialLabelText: r,
                                    onClick: function n(a) {
                                        e(a, "socialFeedTabClick", {
                                            feedPlacement: "HOME"
                                        }), t.changeTabCallback("home")
                                    }
                                }, m.createElement(ce, Object(a.a)({}, o, {
                                    feedIdToRestore: "home" === t.props.tab ? i : null,
                                    queryPlacement: Object(b.featureIsEnabled)("social_in_destination_feed") && t.props.latitude && t.props.longitude ? "NEARBY_HOME" : "HOME"
                                }))));
                                var s = Object(g.localize)("mixer_home_about");
                                return n.push(m.createElement(ie.SocialTab, {
                                    key: "tourism_tab_".concat(Math.random()),
                                    isActive: "tourism" === t.props.tab,
                                    label: m.createElement(ie.SocialLabel, {
                                        text: s
                                    }),
                                    socialLabelText: s,
                                    onClick: function n(a) {
                                        e(a, "socialFeedTabClick", {
                                            feedPlacement: "TOURISM"
                                        }), t.changeTabCallback("tourism")
                                    }
                                }, m.createElement(ce, Object(a.a)({}, o, {
                                    feedIdToRestore: "tourism" === t.props.tab ? i : null,
                                    queryPlacement: "TOURISM"
                                })))), m.createElement("div", {
                                    className: t.state.tabsClass,
                                    ref: t.tabsRef
                                }, m.createElement("div", {
                                    className: de.placeholder
                                }, " "), m.createElement(ie.SocialTabs, {
                                    tabNames: ["home", "tourism"],
                                    activeTab: t.props.tab,
                                    useFeedStyle: !0,
                                    renderNonActiveTabs: !0
                                }, n), "MOBILE" === t.props.viewportCategory && t.stickyTabsEnabled() && m.createElement(ae.a, {
                                    callback: function e() {
                                        t.updateTabPosition()
                                    },
                                    throttle: 0
                                }))
                            }) : m.createElement(ce, Object(a.a)({}, this.props, {
                                queryPlacement: Object(b.featureIsEnabled)("social_in_destination_feed") && this.props.latitude && this.props.longitude ? "NEARBY_HOME" : "HOME"
                            }))
                        }
                    }]), t
                }(m.Component);
            Object(u.a)(ue, "defaultProps", {
                tab: "home",
                changeTabCallback: function e() {}
            });
            var me = Object(k.connect)(function(e, t) {
                    return Object(i.a)({
                        ipGeo: e.page.ipGeo
                    }, t)
                })(ue),
                pe = n("@ta/common.text"),
                ve = n("@ta/media.image"),
                be = function e(t) {
                    return 1 === t.locationId ? null : m.createElement(p.Query, {
                        query: T.GeoOverviewQuery,
                        variables: {
                            locationId: t.locationId
                        },
                        errorPolicy: "all"
                    }, function(e) {
                        var n = e.loading,
                            a = e.data;
                        if (!n) {
                            var i = a && a.locations && a.locations.length > 0 ? a.locations[0] : null,
                                o = i && i.albums && i.albums[0] && i.albums[0].photos && i.albums[0].photos.length > 0;
                            if (i && (o || i.overview)) {
                                var r = null,
                                    s = null;
                                if (o) {
                                    var l = function e(t, n) {
                                        var a = t.filter(function(e) {
                                                return !!(e.photoSizes && e.photoSizes.length > 0) && (null == n || n.id !== e.id)
                                            }),
                                            i = a.filter(function(e) {
                                                if (e.photoSizes && e.photoSizes.length > 0) {
                                                    var t = e.photoSizes[e.photoSizes.length - 1];
                                                    return t.width > t.height
                                                }
                                                return !1
                                            });
                                        return i.length > 0 ? i[0] : a[0]
                                    }(i.albums[0].photos, i.thumbnail);
                                    r = m.createElement("div", {
                                        className: "social-home-GetToKnowGeoCard__photo--1eqzC"
                                    }, m.createElement(ve.ResponsiveImage, {
                                        sources: l.photoSizes,
                                        width: "100%",
                                        height: "100%",
                                        notLazy: !0
                                    }))
                                }
                                return i.overview && (s = m.createElement("div", {
                                    className: "social-home-GetToKnowGeoCard__overview--1ykLg"
                                }, m.createElement(pe.ReadMore, {
                                    numLinesToShow: 4,
                                    clickCallback: function e() {
                                        return !1
                                    },
                                    ctaText: " ",
                                    collapsible: !0
                                }, Object(g.unescaped)(i.overview)))), m.createElement("div", {
                                    className: "".concat("social-home-GetToKnowGeoCard__card_container--2JuEe", " ui_card section")
                                }, r, m.createElement("div", {
                                    className: "social-home-GetToKnowGeoCard__about--7HKgu"
                                }, Object(g.localize)("about_geo", {
                                    sGeo: i.additionalNames.normal
                                })), s, m.createElement(M.InteractionLogger, null, function(e) {
                                    return m.createElement("div", {
                                        className: "social-home-GetToKnowGeoCard__learn_more--Gidq4",
                                        onClick: function n(a) {
                                            e(a, "rightRailLearnMoreClick"), t.changeTab()
                                        }
                                    }, Object(g.localize)("Homepage_brand_H2"))
                                }))
                            }
                        }
                        return null
                    })
                },
                fe = {
                    namespace: "home"
                },
                ke = function e(t) {
                    return Object(b.featureIsEnabled)("ml_home_tourism_about_tab") && t > 1
                },
                ge = function e(t) {
                    var n;
                    switch (t.viewportCategory) {
                        case "DESKTOP":
                            n = function e() {
                                return m.createElement(m.Fragment, null, m.createElement("div", {
                                    className: "ui_column is-3"
                                }, m.createElement(Y, {
                                    isSingleObject: !0,
                                    userId: t.loggedInUserId,
                                    onError: t.renderErrorBanner
                                }), m.createElement(X.WithAuthzInfo, {
                                    onError: t.renderErrorBanner
                                }, function(e, n) {
                                    return m.createElement(N, {
                                        permissions: e,
                                        permissionsLoading: n,
                                        fullWidth: !1,
                                        triggerFeedRefresh: t.triggerFeedRefresh
                                    })
                                }), m.createElement(te.default, null)), m.createElement("div", {
                                    className: "ui_column is-9"
                                }, m.createElement("div", {
                                    className: "ui_columns"
                                }, m.createElement("div", {
                                    className: "ui_column is-8"
                                }, m.createElement(me, {
                                    placement: t.placement,
                                    puid: t.puid,
                                    locationId: t.locationId,
                                    loggedInUserId: t.loggedInUserId,
                                    latitude: t.latitude,
                                    longitude: t.longitude,
                                    newContentSubmittedTimestamp: t.newContentSubmittedTimestamp,
                                    allowedTypes: t.allowedTypes,
                                    viewportCategory: t.viewportCategory,
                                    tab: t.tab,
                                    changeTabCallback: function e(n) {
                                        t.changeTabCallback(n)
                                    },
                                    feedIdToRestore: t.feedIdToRestore
                                })), m.createElement("div", {
                                    className: "ui_column is-4"
                                }, ke(t.locationId) && !Object(b.featureIsEnabled)("ml_home_suppress_gtkg_card") && "home" === t.tab && m.createElement(be, {
                                    locationId: t.locationId,
                                    changeTab: function e() {
                                        t.changeTabCallback("tourism")
                                    }
                                }), m.createElement(ee.FollowSection, {
                                    placement: "RIGHT_RAIL",
                                    onError: t.renderErrorBanner
                                })))))
                            }();
                            break;
                        case "TABLET":
                            n = function e() {
                                return m.createElement(m.Fragment, null, m.createElement("div", {
                                    className: "ui_column is-12"
                                }, m.createElement(me, {
                                    placement: t.placement,
                                    puid: t.puid,
                                    locationId: t.locationId,
                                    loggedInUserId: t.loggedInUserId,
                                    latitude: t.latitude,
                                    longitude: t.longitude,
                                    newContentSubmittedTimestamp: t.newContentSubmittedTimestamp,
                                    allowedTypes: t.allowedTypes,
                                    viewportCategory: t.viewportCategory,
                                    tab: t.tab,
                                    feedIdToRestore: t.feedIdToRestore,
                                    changeTabCallback: function e(n) {
                                        t.changeTabCallback(n)
                                    }
                                }), m.createElement(f.RouteConsumer, null, function(e) {
                                    return "modal" in e.route || m.createElement(X.WithAuthzInfo, {
                                        onError: t.renderErrorBanner
                                    }, function(e, n) {
                                        return m.createElement(N, {
                                            permissions: e,
                                            permissionsLoading: n,
                                            fullWidth: !0,
                                            triggerFeedRefresh: t.triggerFeedRefresh
                                        })
                                    })
                                })))
                            }();
                            break;
                        default:
                            n = function e() {
                                return m.createElement("div", {
                                    className: "ui_column is-12"
                                }, m.createElement(me, {
                                    placement: t.placement,
                                    puid: t.puid,
                                    locationId: t.locationId,
                                    loggedInUserId: t.loggedInUserId,
                                    latitude: t.latitude,
                                    longitude: t.longitude,
                                    newContentSubmittedTimestamp: t.newContentSubmittedTimestamp,
                                    allowedTypes: t.allowedTypes,
                                    viewportCategory: t.viewportCategory,
                                    tab: t.tab,
                                    feedIdToRestore: t.feedIdToRestore,
                                    changeTabCallback: function e(n) {
                                        t.changeTabCallback(n)
                                    }
                                }), m.createElement(f.RouteConsumer, null, function(e) {
                                    return "modal" in e.route || m.createElement(X.WithAuthzInfo, {
                                        onError: t.renderErrorBanner
                                    }, function(e, n) {
                                        return m.createElement(N, {
                                            permissions: e,
                                            permissionsLoading: n,
                                            fullWidth: !0,
                                            triggerFeedRefresh: t.triggerFeedRefresh
                                        })
                                    })
                                }))
                            }()
                    }
                    return m.createElement(m.Fragment, null, m.createElement(p.Query, {
                        query: T.TermsOfUseQuery,
                        skip: !t.loggedInUserId
                    }, function() {
                        return null
                    }), m.createElement(J.LoadingErrorBanner, null), m.createElement($.b, null, function() {
                        return m.createElement("div", {
                            className: "social_home_feed ui_columns ".concat("social-home-Home__edge2edge--3q5mh")
                        }, n)
                    }))
                };
            ge.defaultProps = {
                latitude: void 0,
                longitude: void 0,
                newContentSubmittedTimestamp: void 0
            };
            var he = function(e) {
                function t(e) {
                    var n;
                    return Object(o.a)(this, t), n = Object(s.a)(this, Object(l.a)(t).call(this, e)), Object(u.a)(Object(d.a)(Object(d.a)(n)), "tabChanged", function(e) {
                        n.state.tab !== e && n.setState({
                            tab: e
                        }, function() {
                            n.updateUrl(e)
                        })
                    }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "triggerFeedRefresh", function() {
                        n.setState({
                            newContentSubmittedTimestamp: new Date
                        })
                    }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "updateUrl", function(e) {
                        var t = "/" === window.location.pathname ? "" : window.location.pathname,
                            a = Object(f.parseUrl)("".concat(t, "/").concat(window.location.search)) || n.props.route;
                        "home" === e ? delete a.tab : a.tab = e;
                        var i = Object(f.buildUrl)(a);
                        i && window.location.pathname && -1 === i.indexOf(window.location.pathname) || window.history.replaceState(a, "", i)
                    }), Object(u.a)(Object(d.a)(Object(d.a)(n)), "topOfFeedRef", m.createRef()), n.state = {
                        reset: !0,
                        newContentSubmittedTimestamp: void 0,
                        tab: e.tab
                    }, n
                }
                return Object(c.a)(t, e), Object(r.a)(t, [{
                    key: "componentDidMount",
                    value: function e() {
                        "home" !== this.state.tab && this.updateUrl(this.state.tab)
                    }
                }, {
                    key: "componentDidUpdate",
                    value: function e(t, n) {
                        !n.reset && this.state.reset && window.scrollTo(0, 0)
                    }
                }, {
                    key: "render",
                    value: function e() {
                        var t = this,
                            n = Object(i.a)({}, this.props);
                        return n.tab = this.state.tab, m.createElement(M.TrackingNamespaceContext.Provider, {
                            value: fe
                        }, m.createElement(M.HomeTrackingContext.Provider, {
                            value: {
                                uid: this.props.puid,
                                scopedGeoId: this.props.locationId
                            }
                        }, m.createElement("div", null, m.createElement(J.RenderErrorBanner, null, function(e) {
                            return m.createElement("div", {
                                ref: t.topOfFeedRef
                            }, m.createElement(ge, Object(a.a)({}, n, {
                                tab: t.state.tab,
                                changeTabCallback: t.tabChanged,
                                renderErrorBanner: e,
                                newContentSubmittedTimestamp: t.state.newContentSubmittedTimestamp,
                                triggerFeedRefresh: t.triggerFeedRefresh
                            })))
                        }), m.createElement(Z.ScrollFeedTooltip, {
                            elementToScrollTo: this.topOfFeedRef
                        }))))
                    }
                }]), t
            }(m.Component);
            Object(u.a)(he, "defaultProps", {
                latitude: void 0,
                longitude: void 0,
                newContentSubmittedTimestamp: void 0
            });
            var _e = function e(t) {
                return m.createElement(f.RouteConsumer, null, function(e) {
                    var n = e.route;
                    return m.createElement(he, Object(a.a)({}, t, {
                        tab: ke(n.geo || t.locationId) && n.tab || "home",
                        locationId: n.geo || t.locationId,
                        allowedTypes: n.allowedTypes && n.allowedTypes.split(",")
                    }))
                })
            };
            _e.defaultProps = {
                latitude: void 0,
                longitude: void 0,
                newContentSubmittedTimestamp: void 0
            }, t.default = Object(v.bind)(function(e, t) {
                return ee.SuggestedMembersModalCombined.stage(e, t),
                    function() {
                        return {
                            placement: "HOME",
                            locationId: e.page.geoId,
                            loggedInUserId: e.auth.loggedInUserId,
                            viewportCategory: e.meta.device.viewportCategory,
                            puid: e.tracking.uid || "",
                            latitude: parseFloat(e.route.latitude) || void 0,
                            longitude: parseFloat(e.route.longitude) || void 0,
                            feedIdToRestore: e.route.feedIdToRestore,
                            route: e.route
                        }
                    }
            })(_e)
        },
        "./roots/social/profile/ProfileBasicFields.fragment.gql": function(e, t, n) {
            "use strict";
            var a = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "ProfileBasicFields"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "MemberProfile"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "userId"
                            },
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "static"
                                },
                                arguments: []
                            }]
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "username"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isMe"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isVerified"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isFollowing"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "externallyConnectedAccountTypes"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 163
                }
            };
            a.loc.source = {
                body: "716324cd6168"
            }, t.a = a
        },
        "@ta/common.authz": function(t, n) {
            t.exports = e
        },
        "@ta/common.cdn": function(e, n) {
            e.exports = t
        },
        "@ta/common.error-handling": function(e, t) {
            e.exports = n
        },
        "@ta/common.localstorage": function(e, t) {
            e.exports = a
        },
        "@ta/common.photo-carousel": function(e, t) {
            e.exports = i
        },
        "@ta/common.sessionstorage": function(e, t) {
            e.exports = o
        },
        "@ta/common.text": function(e, t) {
            e.exports = r
        },
        "@ta/common.typeahead": function(e, t) {
            e.exports = s
        },
        "@ta/common.webview": function(e, t) {
            e.exports = l
        },
        "@ta/events.lifecycle": function(e, t) {
            e.exports = c
        },
        "@ta/input.text-area": function(e, t) {
            e.exports = d
        },
        "@ta/input.text-input": function(e, t) {
            e.exports = u
        },
        "@ta/loading.error": function(e, t) {
            e.exports = m
        },
        "@ta/media.common": function(e, t) {
            e.exports = p
        },
        "@ta/media.image": function(e, t) {
            e.exports = v
        },
        "@ta/media.upload": function(e, t) {
            e.exports = b
        },
        "@ta/overlays.headers": function(e, t) {
            e.exports = f
        },
        "@ta/overlays.managers": function(e, t) {
            e.exports = k
        },
        "@ta/overlays.modal": function(e, t) {
            e.exports = g
        },
        "@ta/overlays.pieces": function(e, t) {
            e.exports = h
        },
        "@ta/overlays.popover": function(e, t) {
            e.exports = _
        },
        "@ta/overlays.toast": function(e, t) {
            e.exports = j
        },
        "@ta/platform.import": function(e, t) {
            e.exports = S
        },
        "@ta/social.block-button": function(e, t) {
            e.exports = y
        },
        "@ta/social.blocks": function(e, t) {
            e.exports = N
        },
        "@ta/social.common-popover": function(e, t) {
            e.exports = O
        },
        "@ta/social.content-removal": function(e, t) {
            e.exports = E
        },
        "@ta/social.cover-photo": function(e, t) {
            e.exports = I
        },
        "@ta/social.dates": function(e, t) {
            e.exports = C
        },
        "@ta/social.educational-tooltips": function(e, t) {
            e.exports = F
        },
        "@ta/social.engagement-card": function(e, t) {
            e.exports = T
        },
        "@ta/social.feed": function(e, t) {
            e.exports = w
        },
        "@ta/social.feed-filter": function(e, t) {
            e.exports = x
        },
        "@ta/social.follow": function(e, t) {
            e.exports = P
        },
        "@ta/social.follow-feed": function(e, t) {
            e.exports = L
        },
        "@ta/social.link-preview": function(e, t) {
            e.exports = A
        },
        "@ta/social.links": function(e, t) {
            e.exports = R
        },
        "@ta/social.login-gate": function(e, t) {
            e.exports = M
        },
        "@ta/social.member-common": function(e, t) {
            e.exports = D
        },
        "@ta/social.member-event": function(e, t) {
            e.exports = z
        },
        "@ta/social.onboarding-state": function(e, t) {
            e.exports = B
        },
        "@ta/social.place-type": function(e, t) {
            e.exports = V
        },
        "@ta/social.poi": function(e, t) {
            e.exports = U
        },
        "@ta/social.repost-action": function(e, t) {
            e.exports = W
        },
        "@ta/social.review-info": function(e, t) {
            e.exports = H
        },
        "@ta/social.scroll": function(e, t) {
            e.exports = q
        },
        "@ta/social.section-overflow": function(e, t) {
            e.exports = G
        },
        "@ta/social.show-more": function(e, t) {
            e.exports = K
        },
        "@ta/social.skeletons": function(e, t) {
            e.exports = Q
        },
        "@ta/social.social-reference": function(e, t) {
            e.exports = Y
        },
        "@ta/social.suggested-followees": function(e, t) {
            e.exports = X
        },
        "@ta/social.tabs": function(e, t) {
            e.exports = J
        },
        "@ta/social.ugc-actions": function(e, t) {
            e.exports = Z
        },
        "@ta/styleguide.avatar": function(e, t) {
            e.exports = $
        },
        "@ta/styleguide.button": function(e, t) {
            e.exports = ee
        },
        "@ta/styleguide.icon": function(e, t) {
            e.exports = te
        },
        "@ta/styleguide.loading": function(e, t) {
            e.exports = ne
        },
        "@ta/tracking.interactions": function(e, t) {
            e.exports = ae
        },
        "common/Radio": function(e, t) {
            e.exports = ie
        },
        "dll-reference @ta/common.global": function(e, t) {
            e.exports = oe
        }
    })
});
//# sourceMappingURL=social.home.490ee48ae8.js.map